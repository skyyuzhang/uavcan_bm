ARM GAS  /tmp/cc2kQaha.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"canard.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.computeTransferIDForwardDistance,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	computeTransferIDForwardDistance:
  23              	.LFB16:
  24              		.file 1 "libcanard/canard.c"
   1:libcanard/canard.c **** /*
   2:libcanard/canard.c ****  * Copyright (c) 2016-2017 UAVCAN Team
   3:libcanard/canard.c ****  *
   4:libcanard/canard.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
   5:libcanard/canard.c ****  * of this software and associated documentation files (the "Software"), to deal
   6:libcanard/canard.c ****  * in the Software without restriction, including without limitation the rights
   7:libcanard/canard.c ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   8:libcanard/canard.c ****  * copies of the Software, and to permit persons to whom the Software is
   9:libcanard/canard.c ****  * furnished to do so, subject to the following conditions:
  10:libcanard/canard.c ****  *
  11:libcanard/canard.c ****  * The above copyright notice and this permission notice shall be included in all
  12:libcanard/canard.c ****  * copies or substantial portions of the Software.
  13:libcanard/canard.c ****  *
  14:libcanard/canard.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  15:libcanard/canard.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  16:libcanard/canard.c ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  17:libcanard/canard.c ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  18:libcanard/canard.c ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  19:libcanard/canard.c ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  20:libcanard/canard.c ****  * SOFTWARE.
  21:libcanard/canard.c ****  *
  22:libcanard/canard.c ****  * Contributors: https://github.com/UAVCAN/libcanard/contributors
  23:libcanard/canard.c ****  *
  24:libcanard/canard.c ****  * Documentation: http://uavcan.org/Implementations/Libcanard
  25:libcanard/canard.c ****  */
  26:libcanard/canard.c **** 
  27:libcanard/canard.c **** #include "canard_internals.h"
  28:libcanard/canard.c **** #include <string.h>
  29:libcanard/canard.c **** 
  30:libcanard/canard.c **** 
  31:libcanard/canard.c **** #undef MIN
  32:libcanard/canard.c **** #undef MAX
  33:libcanard/canard.c **** #define MIN(a, b)   (((a) < (b)) ? (a) : (b))
  34:libcanard/canard.c **** #define MAX(a, b)   (((a) > (b)) ? (a) : (b))
ARM GAS  /tmp/cc2kQaha.s 			page 2


  35:libcanard/canard.c **** 
  36:libcanard/canard.c **** 
  37:libcanard/canard.c **** #define TRANSFER_TIMEOUT_USEC                       2000000
  38:libcanard/canard.c **** 
  39:libcanard/canard.c **** #define TRANSFER_ID_BIT_LEN                         5U
  40:libcanard/canard.c **** #define ANON_MSG_DATA_TYPE_ID_BIT_LEN               2U
  41:libcanard/canard.c **** 
  42:libcanard/canard.c **** #define SOURCE_ID_FROM_ID(x)                        ((uint8_t) (((x) >> 0U)  & 0x7FU))
  43:libcanard/canard.c **** #define SERVICE_NOT_MSG_FROM_ID(x)                  ((bool)    (((x) >> 7U)  & 0x1U))
  44:libcanard/canard.c **** #define REQUEST_NOT_RESPONSE_FROM_ID(x)             ((bool)    (((x) >> 15U) & 0x1U))
  45:libcanard/canard.c **** #define DEST_ID_FROM_ID(x)                          ((uint8_t) (((x) >> 8U)  & 0x7FU))
  46:libcanard/canard.c **** #define PRIORITY_FROM_ID(x)                         ((uint8_t) (((x) >> 24U) & 0x1FU))
  47:libcanard/canard.c **** #define MSG_TYPE_FROM_ID(x)                         ((uint16_t)(((x) >> 8U)  & 0xFFFFU))
  48:libcanard/canard.c **** #define SRV_TYPE_FROM_ID(x)                         ((uint8_t) (((x) >> 16U) & 0xFFU))
  49:libcanard/canard.c **** 
  50:libcanard/canard.c **** #define MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, src_node_id, dst_node_id)            
  51:libcanard/canard.c ****     (((uint32_t)(data_type_id)) | (((uint32_t)(transfer_type)) << 16U) |                           
  52:libcanard/canard.c ****     (((uint32_t)(src_node_id)) << 18U) | (((uint32_t)(dst_node_id)) << 25U))
  53:libcanard/canard.c **** 
  54:libcanard/canard.c **** #define TRANSFER_ID_FROM_TAIL_BYTE(x)               ((uint8_t)((x) & 0x1FU))
  55:libcanard/canard.c **** 
  56:libcanard/canard.c **** // The extra cast to unsigned is needed to squelch warnings from clang-tidy
  57:libcanard/canard.c **** #define IS_START_OF_TRANSFER(x)                     ((bool)(((uint32_t)(x) >> 7U) & 0x1U))
  58:libcanard/canard.c **** #define IS_END_OF_TRANSFER(x)                       ((bool)(((uint32_t)(x) >> 6U) & 0x1U))
  59:libcanard/canard.c **** #define TOGGLE_BIT(x)                               ((bool)(((uint32_t)(x) >> 5U) & 0x1U))
  60:libcanard/canard.c **** 
  61:libcanard/canard.c **** 
  62:libcanard/canard.c **** struct CanardTxQueueItem
  63:libcanard/canard.c **** {
  64:libcanard/canard.c ****     CanardTxQueueItem* next;
  65:libcanard/canard.c ****     CanardCANFrame frame;
  66:libcanard/canard.c **** };
  67:libcanard/canard.c **** 
  68:libcanard/canard.c **** 
  69:libcanard/canard.c **** /*
  70:libcanard/canard.c ****  * API functions
  71:libcanard/canard.c ****  */
  72:libcanard/canard.c **** void canardInit(CanardInstance* out_ins,
  73:libcanard/canard.c ****                 void* mem_arena,
  74:libcanard/canard.c ****                 size_t mem_arena_size,
  75:libcanard/canard.c ****                 CanardOnTransferReception on_reception,
  76:libcanard/canard.c ****                 CanardShouldAcceptTransfer should_accept,
  77:libcanard/canard.c ****                 void* user_reference)
  78:libcanard/canard.c **** {
  79:libcanard/canard.c ****     CANARD_ASSERT(out_ins != NULL);
  80:libcanard/canard.c **** 
  81:libcanard/canard.c ****     /*
  82:libcanard/canard.c ****      * Checking memory layout.
  83:libcanard/canard.c ****      * This condition is supposed to be true for all 32-bit and smaller platforms.
  84:libcanard/canard.c ****      * If your application fails here, make sure it's not built in 64-bit mode.
  85:libcanard/canard.c ****      * Refer to the design documentation for more info.
  86:libcanard/canard.c ****      */
  87:libcanard/canard.c ****     CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 6);
  88:libcanard/canard.c **** 
  89:libcanard/canard.c ****     memset(out_ins, 0, sizeof(*out_ins));
  90:libcanard/canard.c **** 
  91:libcanard/canard.c ****     out_ins->node_id = CANARD_BROADCAST_NODE_ID;
ARM GAS  /tmp/cc2kQaha.s 			page 3


  92:libcanard/canard.c ****     out_ins->on_reception = on_reception;
  93:libcanard/canard.c ****     out_ins->should_accept = should_accept;
  94:libcanard/canard.c ****     out_ins->rx_states = NULL;
  95:libcanard/canard.c ****     out_ins->tx_queue = NULL;
  96:libcanard/canard.c ****     out_ins->user_reference = user_reference;
  97:libcanard/canard.c **** 
  98:libcanard/canard.c ****     size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
  99:libcanard/canard.c ****     if (pool_capacity > 0xFFFFU)
 100:libcanard/canard.c ****     {
 101:libcanard/canard.c ****         pool_capacity = 0xFFFFU;
 102:libcanard/canard.c ****     }
 103:libcanard/canard.c **** 
 104:libcanard/canard.c ****     initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 105:libcanard/canard.c **** }
 106:libcanard/canard.c **** 
 107:libcanard/canard.c **** void* canardGetUserReference(CanardInstance* ins)
 108:libcanard/canard.c **** {
 109:libcanard/canard.c ****     CANARD_ASSERT(ins != NULL);
 110:libcanard/canard.c ****     return ins->user_reference;
 111:libcanard/canard.c **** }
 112:libcanard/canard.c **** 
 113:libcanard/canard.c **** void canardSetLocalNodeID(CanardInstance* ins, uint8_t self_node_id)
 114:libcanard/canard.c **** {
 115:libcanard/canard.c ****     CANARD_ASSERT(ins != NULL);
 116:libcanard/canard.c **** 
 117:libcanard/canard.c ****     if ((ins->node_id == CANARD_BROADCAST_NODE_ID) &&
 118:libcanard/canard.c ****         (self_node_id >= CANARD_MIN_NODE_ID) &&
 119:libcanard/canard.c ****         (self_node_id <= CANARD_MAX_NODE_ID))
 120:libcanard/canard.c ****     {
 121:libcanard/canard.c ****         ins->node_id = self_node_id;
 122:libcanard/canard.c ****     }
 123:libcanard/canard.c ****     else
 124:libcanard/canard.c ****     {
 125:libcanard/canard.c ****         CANARD_ASSERT(false);
 126:libcanard/canard.c ****     }
 127:libcanard/canard.c **** }
 128:libcanard/canard.c **** 
 129:libcanard/canard.c **** uint8_t canardGetLocalNodeID(const CanardInstance* ins)
 130:libcanard/canard.c **** {
 131:libcanard/canard.c ****     return ins->node_id;
 132:libcanard/canard.c **** }
 133:libcanard/canard.c **** 
 134:libcanard/canard.c **** int16_t canardBroadcast(CanardInstance* ins,
 135:libcanard/canard.c ****                         uint64_t data_type_signature,
 136:libcanard/canard.c ****                         uint16_t data_type_id,
 137:libcanard/canard.c ****                         uint8_t* inout_transfer_id,
 138:libcanard/canard.c ****                         uint8_t priority,
 139:libcanard/canard.c ****                         const void* payload,
 140:libcanard/canard.c ****                         uint16_t payload_len)
 141:libcanard/canard.c **** {
 142:libcanard/canard.c ****     if (payload == NULL && payload_len > 0)
 143:libcanard/canard.c ****     {
 144:libcanard/canard.c ****         return -CANARD_ERROR_INVALID_ARGUMENT;
 145:libcanard/canard.c ****     }
 146:libcanard/canard.c ****     if (priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 147:libcanard/canard.c ****     {
 148:libcanard/canard.c ****         return -CANARD_ERROR_INVALID_ARGUMENT;
ARM GAS  /tmp/cc2kQaha.s 			page 4


 149:libcanard/canard.c ****     }
 150:libcanard/canard.c **** 
 151:libcanard/canard.c ****     uint32_t can_id = 0;
 152:libcanard/canard.c ****     uint16_t crc = 0xFFFFU;
 153:libcanard/canard.c **** 
 154:libcanard/canard.c ****     if (canardGetLocalNodeID(ins) == 0)
 155:libcanard/canard.c ****     {
 156:libcanard/canard.c ****         if (payload_len > 7)
 157:libcanard/canard.c ****         {
 158:libcanard/canard.c ****             return -CANARD_ERROR_NODE_ID_NOT_SET;
 159:libcanard/canard.c ****         }
 160:libcanard/canard.c **** 
 161:libcanard/canard.c ****         static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 162:libcanard/canard.c **** 
 163:libcanard/canard.c ****         if ((data_type_id & DTIDMask) != data_type_id)
 164:libcanard/canard.c ****         {
 165:libcanard/canard.c ****             return -CANARD_ERROR_INVALID_ARGUMENT;
 166:libcanard/canard.c ****         }
 167:libcanard/canard.c **** 
 168:libcanard/canard.c ****         // anonymous transfer, random discriminator
 169:libcanard/canard.c ****         const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, payload, payload_len)) & 0x7FFEU
 170:libcanard/canard.c ****         can_id = ((uint32_t) priority << 24U) | ((uint32_t) discriminator << 9U) |
 171:libcanard/canard.c ****                  ((uint32_t) (data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins
 172:libcanard/canard.c ****     }
 173:libcanard/canard.c ****     else
 174:libcanard/canard.c ****     {
 175:libcanard/canard.c ****         can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 8U) | (uint32_t) canard
 176:libcanard/canard.c **** 
 177:libcanard/canard.c ****         if (payload_len > 7)
 178:libcanard/canard.c ****         {
 179:libcanard/canard.c ****             crc = crcAddSignature(crc, data_type_signature);
 180:libcanard/canard.c ****             crc = crcAdd(crc, payload, payload_len);
 181:libcanard/canard.c ****         }
 182:libcanard/canard.c ****     }
 183:libcanard/canard.c **** 
 184:libcanard/canard.c ****     const int16_t result = enqueueTxFrames(ins, can_id, inout_transfer_id, crc, payload, payload_le
 185:libcanard/canard.c **** 
 186:libcanard/canard.c ****     incrementTransferID(inout_transfer_id);
 187:libcanard/canard.c **** 
 188:libcanard/canard.c ****     return result;
 189:libcanard/canard.c **** }
 190:libcanard/canard.c **** 
 191:libcanard/canard.c **** int16_t canardRequestOrRespond(CanardInstance* ins,
 192:libcanard/canard.c ****                                uint8_t destination_node_id,
 193:libcanard/canard.c ****                                uint64_t data_type_signature,
 194:libcanard/canard.c ****                                uint8_t data_type_id,
 195:libcanard/canard.c ****                                uint8_t* inout_transfer_id,
 196:libcanard/canard.c ****                                uint8_t priority,
 197:libcanard/canard.c ****                                CanardRequestResponse kind,
 198:libcanard/canard.c ****                                const void* payload,
 199:libcanard/canard.c ****                                uint16_t payload_len)
 200:libcanard/canard.c **** {
 201:libcanard/canard.c ****     if (payload == NULL && payload_len > 0)
 202:libcanard/canard.c ****     {
 203:libcanard/canard.c ****         return -CANARD_ERROR_INVALID_ARGUMENT;
 204:libcanard/canard.c ****     }
 205:libcanard/canard.c ****     if (priority > CANARD_TRANSFER_PRIORITY_LOWEST)
ARM GAS  /tmp/cc2kQaha.s 			page 5


 206:libcanard/canard.c ****     {
 207:libcanard/canard.c ****         return -CANARD_ERROR_INVALID_ARGUMENT;
 208:libcanard/canard.c ****     }
 209:libcanard/canard.c ****     if (canardGetLocalNodeID(ins) == 0)
 210:libcanard/canard.c ****     {
 211:libcanard/canard.c ****         return -CANARD_ERROR_NODE_ID_NOT_SET;
 212:libcanard/canard.c ****     }
 213:libcanard/canard.c **** 
 214:libcanard/canard.c ****     const uint32_t can_id = ((uint32_t) priority << 24U) | ((uint32_t) data_type_id << 16U) |
 215:libcanard/canard.c ****                             ((uint32_t) kind << 15U) | ((uint32_t) destination_node_id << 8U) |
 216:libcanard/canard.c ****                             (1U << 7U) | (uint32_t) canardGetLocalNodeID(ins);
 217:libcanard/canard.c ****     uint16_t crc = 0xFFFFU;
 218:libcanard/canard.c **** 
 219:libcanard/canard.c ****     if (payload_len > 7)
 220:libcanard/canard.c ****     {
 221:libcanard/canard.c ****         crc = crcAddSignature(crc, data_type_signature);
 222:libcanard/canard.c ****         crc = crcAdd(crc, payload, payload_len);
 223:libcanard/canard.c ****     }
 224:libcanard/canard.c **** 
 225:libcanard/canard.c ****     const int16_t result = enqueueTxFrames(ins, can_id, inout_transfer_id, crc, payload, payload_le
 226:libcanard/canard.c **** 
 227:libcanard/canard.c ****     if (kind == CanardRequest)                      // Response Transfer ID must not be altered
 228:libcanard/canard.c ****     {
 229:libcanard/canard.c ****         incrementTransferID(inout_transfer_id);
 230:libcanard/canard.c ****     }
 231:libcanard/canard.c **** 
 232:libcanard/canard.c ****     return result;
 233:libcanard/canard.c **** }
 234:libcanard/canard.c **** 
 235:libcanard/canard.c **** const CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
 236:libcanard/canard.c **** {
 237:libcanard/canard.c ****     if (ins->tx_queue == NULL)
 238:libcanard/canard.c ****     {
 239:libcanard/canard.c ****         return NULL;
 240:libcanard/canard.c ****     }
 241:libcanard/canard.c ****     return &ins->tx_queue->frame;
 242:libcanard/canard.c **** }
 243:libcanard/canard.c **** 
 244:libcanard/canard.c **** void canardPopTxQueue(CanardInstance* ins)
 245:libcanard/canard.c **** {
 246:libcanard/canard.c ****     CanardTxQueueItem* item = ins->tx_queue;
 247:libcanard/canard.c ****     ins->tx_queue = item->next;
 248:libcanard/canard.c ****     freeBlock(&ins->allocator, item);
 249:libcanard/canard.c **** }
 250:libcanard/canard.c **** 
 251:libcanard/canard.c **** void canardHandleRxFrame(CanardInstance* ins, const CanardCANFrame* frame, uint64_t timestamp_usec)
 252:libcanard/canard.c **** {
 253:libcanard/canard.c ****     const CanardTransferType transfer_type = extractTransferType(frame->id);
 254:libcanard/canard.c ****     const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 255:libcanard/canard.c ****                                         (uint8_t)CANARD_BROADCAST_NODE_ID :
 256:libcanard/canard.c ****                                         DEST_ID_FROM_ID(frame->id);
 257:libcanard/canard.c **** 
 258:libcanard/canard.c ****     // TODO: This function should maintain statistics of transfer errors and such.
 259:libcanard/canard.c **** 
 260:libcanard/canard.c ****     if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 261:libcanard/canard.c ****         (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 262:libcanard/canard.c ****         (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
ARM GAS  /tmp/cc2kQaha.s 			page 6


 263:libcanard/canard.c ****         (frame->data_len < 1))
 264:libcanard/canard.c ****     {
 265:libcanard/canard.c ****         return;     // Unsupported frame, not UAVCAN - ignore
 266:libcanard/canard.c ****     }
 267:libcanard/canard.c **** 
 268:libcanard/canard.c ****     if (transfer_type != CanardTransferTypeBroadcast &&
 269:libcanard/canard.c ****         destination_node_id != canardGetLocalNodeID(ins))
 270:libcanard/canard.c ****     {
 271:libcanard/canard.c ****         return;     // Address mismatch
 272:libcanard/canard.c ****     }
 273:libcanard/canard.c **** 
 274:libcanard/canard.c ****     const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 275:libcanard/canard.c ****     const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 276:libcanard/canard.c ****     const uint16_t data_type_id = extractDataType(frame->id);
 277:libcanard/canard.c ****     const uint32_t transfer_descriptor =
 278:libcanard/canard.c ****             MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_
 279:libcanard/canard.c **** 
 280:libcanard/canard.c ****     const uint8_t tail_byte = frame->data[frame->data_len - 1];
 281:libcanard/canard.c **** 
 282:libcanard/canard.c ****     CanardRxState* rx_state = NULL;
 283:libcanard/canard.c **** 
 284:libcanard/canard.c ****     if (IS_START_OF_TRANSFER(tail_byte))
 285:libcanard/canard.c ****     {
 286:libcanard/canard.c ****         uint64_t data_type_signature = 0;
 287:libcanard/canard.c **** 
 288:libcanard/canard.c ****         if (ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_
 289:libcanard/canard.c ****         {
 290:libcanard/canard.c ****             rx_state = traverseRxStates(ins, transfer_descriptor);
 291:libcanard/canard.c **** 
 292:libcanard/canard.c ****             if(rx_state == NULL)
 293:libcanard/canard.c ****             {
 294:libcanard/canard.c ****                 return; // No allocator room for this frame
 295:libcanard/canard.c ****             }
 296:libcanard/canard.c **** 
 297:libcanard/canard.c ****             rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 298:libcanard/canard.c ****         }
 299:libcanard/canard.c ****         else
 300:libcanard/canard.c ****         {
 301:libcanard/canard.c ****             return;     // The application doesn't want this transfer
 302:libcanard/canard.c ****         }
 303:libcanard/canard.c ****     }
 304:libcanard/canard.c ****     else
 305:libcanard/canard.c ****     {
 306:libcanard/canard.c ****         rx_state = findRxState(ins->rx_states, transfer_descriptor);
 307:libcanard/canard.c **** 
 308:libcanard/canard.c ****         if (rx_state == NULL)
 309:libcanard/canard.c ****         {
 310:libcanard/canard.c ****             return;
 311:libcanard/canard.c ****         }
 312:libcanard/canard.c ****     }
 313:libcanard/canard.c **** 
 314:libcanard/canard.c ****     CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with re
 315:libcanard/canard.c **** 
 316:libcanard/canard.c ****     // Resolving the state flags:
 317:libcanard/canard.c ****     const bool not_initialized = rx_state->timestamp_usec == 0;
 318:libcanard/canard.c ****     const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 319:libcanard/canard.c ****     const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
ARM GAS  /tmp/cc2kQaha.s 			page 7


 320:libcanard/canard.c ****     const bool not_previous_tid =
 321:libcanard/canard.c ****         computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYT
 322:libcanard/canard.c **** 
 323:libcanard/canard.c ****     const bool need_restart =
 324:libcanard/canard.c ****             (not_initialized) ||
 325:libcanard/canard.c ****             (tid_timed_out) ||
 326:libcanard/canard.c ****             (first_frame && not_previous_tid);
 327:libcanard/canard.c **** 
 328:libcanard/canard.c ****     if (need_restart)
 329:libcanard/canard.c ****     {
 330:libcanard/canard.c ****         rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 331:libcanard/canard.c ****         rx_state->next_toggle = 0;
 332:libcanard/canard.c ****         releaseStatePayload(ins, rx_state);
 333:libcanard/canard.c ****         if (!IS_START_OF_TRANSFER(tail_byte)) // missed the first frame
 334:libcanard/canard.c ****         {
 335:libcanard/canard.c ****             rx_state->transfer_id++;
 336:libcanard/canard.c ****             return;
 337:libcanard/canard.c ****         }
 338:libcanard/canard.c ****     }
 339:libcanard/canard.c **** 
 340:libcanard/canard.c ****     if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 341:libcanard/canard.c ****     {
 342:libcanard/canard.c ****         rx_state->timestamp_usec = timestamp_usec;
 343:libcanard/canard.c ****         CanardRxTransfer rx_transfer = {
 344:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 345:libcanard/canard.c ****             .payload_head = frame->data,
 346:libcanard/canard.c ****             .payload_len = (uint8_t)(frame->data_len - 1U),
 347:libcanard/canard.c ****             .data_type_id = data_type_id,
 348:libcanard/canard.c ****             .transfer_type = transfer_type,
 349:libcanard/canard.c ****             .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 350:libcanard/canard.c ****             .priority = priority,
 351:libcanard/canard.c ****             .source_node_id = source_node_id
 352:libcanard/canard.c ****         };
 353:libcanard/canard.c **** 
 354:libcanard/canard.c ****         ins->on_reception(ins, &rx_transfer);
 355:libcanard/canard.c **** 
 356:libcanard/canard.c ****         prepareForNextTransfer(rx_state);
 357:libcanard/canard.c ****         return;
 358:libcanard/canard.c ****     }
 359:libcanard/canard.c **** 
 360:libcanard/canard.c ****     if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 361:libcanard/canard.c ****     {
 362:libcanard/canard.c ****         return; // wrong toggle
 363:libcanard/canard.c ****     }
 364:libcanard/canard.c **** 
 365:libcanard/canard.c ****     if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 366:libcanard/canard.c ****     {
 367:libcanard/canard.c ****         return; // unexpected tid
 368:libcanard/canard.c ****     }
 369:libcanard/canard.c **** 
 370:libcanard/canard.c ****     if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of mul
 371:libcanard/canard.c ****     {
 372:libcanard/canard.c ****         if (frame->data_len <= 3)
 373:libcanard/canard.c ****         {
 374:libcanard/canard.c ****             return;     // Not enough data
 375:libcanard/canard.c ****         }
 376:libcanard/canard.c **** 
ARM GAS  /tmp/cc2kQaha.s 			page 8


 377:libcanard/canard.c ****         // take off the crc and store the payload
 378:libcanard/canard.c ****         rx_state->timestamp_usec = timestamp_usec;
 379:libcanard/canard.c ****         const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 380:libcanard/canard.c ****                                                  (uint8_t) (frame->data_len - 3));
 381:libcanard/canard.c ****         if (ret < 0)
 382:libcanard/canard.c ****         {
 383:libcanard/canard.c ****             releaseStatePayload(ins, rx_state);
 384:libcanard/canard.c ****             prepareForNextTransfer(rx_state);
 385:libcanard/canard.c ****             return;
 386:libcanard/canard.c ****         }
 387:libcanard/canard.c ****         rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) fram
 388:libcanard/canard.c ****         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 389:libcanard/canard.c ****                                           frame->data + 2, (uint8_t)(frame->data_len - 3));
 390:libcanard/canard.c ****     }
 391:libcanard/canard.c ****     else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a 
 392:libcanard/canard.c ****     {
 393:libcanard/canard.c ****         const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 394:libcanard/canard.c ****                                                  (uint8_t) (frame->data_len - 1));
 395:libcanard/canard.c ****         if (ret < 0)
 396:libcanard/canard.c ****         {
 397:libcanard/canard.c ****             releaseStatePayload(ins, rx_state);
 398:libcanard/canard.c ****             prepareForNextTransfer(rx_state);
 399:libcanard/canard.c ****             return;
 400:libcanard/canard.c ****         }
 401:libcanard/canard.c ****         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 402:libcanard/canard.c ****                                           frame->data, (uint8_t)(frame->data_len - 1));
 403:libcanard/canard.c ****     }
 404:libcanard/canard.c ****     else                                                                            // End of a mul
 405:libcanard/canard.c ****     {
 406:libcanard/canard.c ****         const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 407:libcanard/canard.c **** 
 408:libcanard/canard.c ****         uint8_t tail_offset = 0;
 409:libcanard/canard.c **** 
 410:libcanard/canard.c ****         if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 411:libcanard/canard.c ****         {
 412:libcanard/canard.c ****             // Copy the beginning of the frame into the head, point the tail pointer to the remaind
 413:libcanard/canard.c ****             for (size_t i = rx_state->payload_len;
 414:libcanard/canard.c ****                  (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size)
 415:libcanard/canard.c ****                  i++, tail_offset++)
 416:libcanard/canard.c ****             {
 417:libcanard/canard.c ****                 rx_state->buffer_head[i] = frame->data[tail_offset];
 418:libcanard/canard.c ****             }
 419:libcanard/canard.c ****         }
 420:libcanard/canard.c ****         else
 421:libcanard/canard.c ****         {
 422:libcanard/canard.c ****             // Like above, except that the beginning goes into the last block of the storage
 423:libcanard/canard.c ****             CanardBufferBlock* block = rx_state->buffer_blocks;
 424:libcanard/canard.c ****             if (block != NULL)          // If there's no middle, that's fine, we'll use only head a
 425:libcanard/canard.c ****             {
 426:libcanard/canard.c ****                 size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the
 427:libcanard/canard.c ****                 while (block->next != NULL)
 428:libcanard/canard.c ****                 {
 429:libcanard/canard.c ****                     block = block->next;
 430:libcanard/canard.c ****                     offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 431:libcanard/canard.c ****                 }
 432:libcanard/canard.c ****                 CANARD_ASSERT(block != NULL);
 433:libcanard/canard.c **** 
ARM GAS  /tmp/cc2kQaha.s 			page 9


 434:libcanard/canard.c ****                 const size_t offset_within_block = rx_state->payload_len - offset;
 435:libcanard/canard.c ****                 CANARD_ASSERT(offset_within_block < CANARD_BUFFER_BLOCK_DATA_SIZE);
 436:libcanard/canard.c **** 
 437:libcanard/canard.c ****                 for (size_t i = offset_within_block;
 438:libcanard/canard.c ****                      (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 439:libcanard/canard.c ****                      i++, tail_offset++)
 440:libcanard/canard.c ****                 {
 441:libcanard/canard.c ****                     block->data[i] = frame->data[tail_offset];
 442:libcanard/canard.c ****                 }
 443:libcanard/canard.c ****             }
 444:libcanard/canard.c ****         }
 445:libcanard/canard.c **** 
 446:libcanard/canard.c ****         CanardRxTransfer rx_transfer = {
 447:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 448:libcanard/canard.c ****             .payload_head = rx_state->buffer_head,
 449:libcanard/canard.c ****             .payload_middle = rx_state->buffer_blocks,
 450:libcanard/canard.c ****             .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]
 451:libcanard/canard.c ****             .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 452:libcanard/canard.c ****             .data_type_id = data_type_id,
 453:libcanard/canard.c ****             .transfer_type = transfer_type,
 454:libcanard/canard.c ****             .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 455:libcanard/canard.c ****             .priority = priority,
 456:libcanard/canard.c ****             .source_node_id = source_node_id
 457:libcanard/canard.c ****         };
 458:libcanard/canard.c **** 
 459:libcanard/canard.c ****         rx_state->buffer_blocks = NULL;     // Block list ownership has been transferred to rx_tran
 460:libcanard/canard.c **** 
 461:libcanard/canard.c ****         // CRC validation
 462:libcanard/canard.c ****         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->d
 463:libcanard/canard.c ****         if (rx_state->calculated_crc == rx_state->payload_crc)
 464:libcanard/canard.c ****         {
 465:libcanard/canard.c ****             ins->on_reception(ins, &rx_transfer);
 466:libcanard/canard.c ****         }
 467:libcanard/canard.c **** 
 468:libcanard/canard.c ****         // Making sure the payload is released even if the application didn't bother with it
 469:libcanard/canard.c ****         canardReleaseRxTransferPayload(ins, &rx_transfer);
 470:libcanard/canard.c ****         prepareForNextTransfer(rx_state);
 471:libcanard/canard.c ****         return;
 472:libcanard/canard.c ****     }
 473:libcanard/canard.c **** 
 474:libcanard/canard.c ****     rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 475:libcanard/canard.c **** }
 476:libcanard/canard.c **** 
 477:libcanard/canard.c **** void canardCleanupStaleTransfers(CanardInstance* ins, uint64_t current_time_usec)
 478:libcanard/canard.c **** {
 479:libcanard/canard.c ****     CanardRxState* prev = ins->rx_states, * state = ins->rx_states;
 480:libcanard/canard.c **** 
 481:libcanard/canard.c ****     while (state != NULL)
 482:libcanard/canard.c ****     {
 483:libcanard/canard.c ****         if ((current_time_usec - state->timestamp_usec) > TRANSFER_TIMEOUT_USEC)
 484:libcanard/canard.c ****         {
 485:libcanard/canard.c ****             if (state == ins->rx_states)
 486:libcanard/canard.c ****             {
 487:libcanard/canard.c ****                 releaseStatePayload(ins, state);
 488:libcanard/canard.c ****                 ins->rx_states = ins->rx_states->next;
 489:libcanard/canard.c ****                 freeBlock(&ins->allocator, state);
 490:libcanard/canard.c ****                 state = ins->rx_states;
ARM GAS  /tmp/cc2kQaha.s 			page 10


 491:libcanard/canard.c ****                 prev = state;
 492:libcanard/canard.c ****             }
 493:libcanard/canard.c ****             else
 494:libcanard/canard.c ****             {
 495:libcanard/canard.c ****                 releaseStatePayload(ins, state);
 496:libcanard/canard.c ****                 prev->next = state->next;
 497:libcanard/canard.c ****                 freeBlock(&ins->allocator, state);
 498:libcanard/canard.c ****                 state = prev->next;
 499:libcanard/canard.c ****             }
 500:libcanard/canard.c ****         }
 501:libcanard/canard.c ****         else
 502:libcanard/canard.c ****         {
 503:libcanard/canard.c ****             prev = state;
 504:libcanard/canard.c ****             state = state->next;
 505:libcanard/canard.c ****         }
 506:libcanard/canard.c ****     }
 507:libcanard/canard.c **** }
 508:libcanard/canard.c **** 
 509:libcanard/canard.c **** int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
 510:libcanard/canard.c ****                            uint32_t bit_offset,
 511:libcanard/canard.c ****                            uint8_t bit_length,
 512:libcanard/canard.c ****                            bool value_is_signed,
 513:libcanard/canard.c ****                            void* out_value)
 514:libcanard/canard.c **** {
 515:libcanard/canard.c ****     if (transfer == NULL || out_value == NULL)
 516:libcanard/canard.c ****     {
 517:libcanard/canard.c ****         return -CANARD_ERROR_INVALID_ARGUMENT;
 518:libcanard/canard.c ****     }
 519:libcanard/canard.c **** 
 520:libcanard/canard.c ****     if (bit_length < 1 || bit_length > 64)
 521:libcanard/canard.c ****     {
 522:libcanard/canard.c ****         return -CANARD_ERROR_INVALID_ARGUMENT;
 523:libcanard/canard.c ****     }
 524:libcanard/canard.c **** 
 525:libcanard/canard.c ****     if (bit_length == 1 && value_is_signed)
 526:libcanard/canard.c ****     {
 527:libcanard/canard.c ****         return -CANARD_ERROR_INVALID_ARGUMENT;
 528:libcanard/canard.c ****     }
 529:libcanard/canard.c **** 
 530:libcanard/canard.c ****     /*
 531:libcanard/canard.c ****      * Reading raw bytes into the temporary storage.
 532:libcanard/canard.c ****      * Luckily, C guarantees that every element is aligned at the beginning (lower address) of the 
 533:libcanard/canard.c ****      */
 534:libcanard/canard.c ****     union
 535:libcanard/canard.c ****     {
 536:libcanard/canard.c ****         bool     boolean;       ///< sizeof(bool) is implementation-defined, so it has to be handle
 537:libcanard/canard.c ****         uint8_t  u8;            ///< Also char
 538:libcanard/canard.c ****         int8_t   s8;
 539:libcanard/canard.c ****         uint16_t u16;
 540:libcanard/canard.c ****         int16_t  s16;
 541:libcanard/canard.c ****         uint32_t u32;
 542:libcanard/canard.c ****         int32_t  s32;           ///< Also float, possibly double, possibly long double (depends on 
 543:libcanard/canard.c ****         uint64_t u64;
 544:libcanard/canard.c ****         int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on 
 545:libcanard/canard.c ****         uint8_t bytes[8];
 546:libcanard/canard.c ****     } storage;
 547:libcanard/canard.c **** 
ARM GAS  /tmp/cc2kQaha.s 			page 11


 548:libcanard/canard.c ****     memset(&storage, 0, sizeof(storage));   // This is important
 549:libcanard/canard.c **** 
 550:libcanard/canard.c ****     const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.byte
 551:libcanard/canard.c ****     if (result <= 0)
 552:libcanard/canard.c ****     {
 553:libcanard/canard.c ****         return result;
 554:libcanard/canard.c ****     }
 555:libcanard/canard.c **** 
 556:libcanard/canard.c ****     CANARD_ASSERT((result > 0) && (result <= 64) && (result <= bit_length));
 557:libcanard/canard.c **** 
 558:libcanard/canard.c ****     /*
 559:libcanard/canard.c ****      * The bit copy algorithm assumes that more significant bits have lower index, so we need to sh
 560:libcanard/canard.c ****      * Extra most significant bits will be filled with zeroes, which is fine.
 561:libcanard/canard.c ****      * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however
 562:libcanard/canard.c ****      * not be taken if bit_length == 64, because 64 % 8 == 0.
 563:libcanard/canard.c ****      */
 564:libcanard/canard.c ****     if ((bit_length % 8) != 0)
 565:libcanard/canard.c ****     {
 566:libcanard/canard.c ****         // coverity[overrun-local]
 567:libcanard/canard.c ****         storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_le
 568:libcanard/canard.c ****     }
 569:libcanard/canard.c **** 
 570:libcanard/canard.c ****     /*
 571:libcanard/canard.c ****      * Determining the closest standard byte length - this will be needed for byte reordering and s
 572:libcanard/canard.c ****      */
 573:libcanard/canard.c ****     uint8_t std_byte_length = 0;
 574:libcanard/canard.c ****     if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 575:libcanard/canard.c ****     else if (bit_length <= 8)   { std_byte_length = 1; }
 576:libcanard/canard.c ****     else if (bit_length <= 16)  { std_byte_length = 2; }
 577:libcanard/canard.c ****     else if (bit_length <= 32)  { std_byte_length = 4; }
 578:libcanard/canard.c ****     else if (bit_length <= 64)  { std_byte_length = 8; }
 579:libcanard/canard.c ****     else
 580:libcanard/canard.c ****     {
 581:libcanard/canard.c ****         CANARD_ASSERT(false);
 582:libcanard/canard.c ****         return -CANARD_ERROR_INTERNAL;
 583:libcanard/canard.c ****     }
 584:libcanard/canard.c **** 
 585:libcanard/canard.c ****     CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));
 586:libcanard/canard.c **** 
 587:libcanard/canard.c ****     /*
 588:libcanard/canard.c ****      * Flipping the byte order if needed.
 589:libcanard/canard.c ****      */
 590:libcanard/canard.c ****     if (isBigEndian())
 591:libcanard/canard.c ****     {
 592:libcanard/canard.c ****         swapByteOrder(&storage.bytes[0], std_byte_length);
 593:libcanard/canard.c ****     }
 594:libcanard/canard.c **** 
 595:libcanard/canard.c ****     /*
 596:libcanard/canard.c ****      * Extending the sign bit if needed. I miss templates.
 597:libcanard/canard.c ****      * Note that we operate on unsigned values in order to avoid undefined behaviors.
 598:libcanard/canard.c ****      */
 599:libcanard/canard.c ****     if (value_is_signed && (std_byte_length * 8 != bit_length))
 600:libcanard/canard.c ****     {
 601:libcanard/canard.c ****         if (bit_length <= 8)
 602:libcanard/canard.c ****         {
 603:libcanard/canard.c ****             if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the 
 604:libcanard/canard.c ****             {
ARM GAS  /tmp/cc2kQaha.s 			page 12


 605:libcanard/canard.c ****                 storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set a
 606:libcanard/canard.c ****             }
 607:libcanard/canard.c ****         }
 608:libcanard/canard.c ****         else if (bit_length <= 16)
 609:libcanard/canard.c ****         {
 610:libcanard/canard.c ****             if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 611:libcanard/canard.c ****             {
 612:libcanard/canard.c ****                 storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 613:libcanard/canard.c ****             }
 614:libcanard/canard.c ****         }
 615:libcanard/canard.c ****         else if (bit_length <= 32)
 616:libcanard/canard.c ****         {
 617:libcanard/canard.c ****             if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 618:libcanard/canard.c ****             {
 619:libcanard/canard.c ****                 storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length
 620:libcanard/canard.c ****             }
 621:libcanard/canard.c ****         }
 622:libcanard/canard.c ****         else if (bit_length < 64)   // Strictly less, this is not a typo
 623:libcanard/canard.c ****         {
 624:libcanard/canard.c ****             if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 625:libcanard/canard.c ****             {
 626:libcanard/canard.c ****                 storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << b
 627:libcanard/canard.c ****             }
 628:libcanard/canard.c ****         }
 629:libcanard/canard.c ****         else
 630:libcanard/canard.c ****         {
 631:libcanard/canard.c ****             CANARD_ASSERT(false);
 632:libcanard/canard.c ****             return -CANARD_ERROR_INTERNAL;
 633:libcanard/canard.c ****         }
 634:libcanard/canard.c ****     }
 635:libcanard/canard.c **** 
 636:libcanard/canard.c ****     /*
 637:libcanard/canard.c ****      * Copying the result out.
 638:libcanard/canard.c ****      */
 639:libcanard/canard.c ****     if (value_is_signed)
 640:libcanard/canard.c ****     {
 641:libcanard/canard.c ****         if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 642:libcanard/canard.c ****         else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 643:libcanard/canard.c ****         else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 644:libcanard/canard.c ****         else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 645:libcanard/canard.c ****         else
 646:libcanard/canard.c ****         {
 647:libcanard/canard.c ****             CANARD_ASSERT(false);
 648:libcanard/canard.c ****             return -CANARD_ERROR_INTERNAL;
 649:libcanard/canard.c ****         }
 650:libcanard/canard.c ****     }
 651:libcanard/canard.c ****     else
 652:libcanard/canard.c ****     {
 653:libcanard/canard.c ****         if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 654:libcanard/canard.c ****         else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 655:libcanard/canard.c ****         else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 656:libcanard/canard.c ****         else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 657:libcanard/canard.c ****         else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 658:libcanard/canard.c ****         else
 659:libcanard/canard.c ****         {
 660:libcanard/canard.c ****             CANARD_ASSERT(false);
 661:libcanard/canard.c ****             return -CANARD_ERROR_INTERNAL;
ARM GAS  /tmp/cc2kQaha.s 			page 13


 662:libcanard/canard.c ****         }
 663:libcanard/canard.c ****     }
 664:libcanard/canard.c **** 
 665:libcanard/canard.c ****     CANARD_ASSERT(result <= bit_length);
 666:libcanard/canard.c ****     CANARD_ASSERT(result > 0);
 667:libcanard/canard.c ****     return result;
 668:libcanard/canard.c **** }
 669:libcanard/canard.c **** 
 670:libcanard/canard.c **** void canardEncodeScalar(void* destination,
 671:libcanard/canard.c ****                         uint32_t bit_offset,
 672:libcanard/canard.c ****                         uint8_t bit_length,
 673:libcanard/canard.c ****                         const void* value)
 674:libcanard/canard.c **** {
 675:libcanard/canard.c ****     /*
 676:libcanard/canard.c ****      * This function can only fail due to invalid arguments, so it was decided to make it return vo
 677:libcanard/canard.c ****      * and in the case of bad arguments try the best effort or just trigger an CANARD_ASSERTion fai
 678:libcanard/canard.c ****      * Maybe not the best solution, but it simplifies the API.
 679:libcanard/canard.c ****      */
 680:libcanard/canard.c ****     CANARD_ASSERT(destination != NULL);
 681:libcanard/canard.c ****     CANARD_ASSERT(value != NULL);
 682:libcanard/canard.c **** 
 683:libcanard/canard.c ****     if (bit_length > 64)
 684:libcanard/canard.c ****     {
 685:libcanard/canard.c ****         CANARD_ASSERT(false);
 686:libcanard/canard.c ****         bit_length = 64;
 687:libcanard/canard.c ****     }
 688:libcanard/canard.c **** 
 689:libcanard/canard.c ****     if (bit_length < 1)
 690:libcanard/canard.c ****     {
 691:libcanard/canard.c ****         CANARD_ASSERT(false);
 692:libcanard/canard.c ****         bit_length = 1;
 693:libcanard/canard.c ****     }
 694:libcanard/canard.c **** 
 695:libcanard/canard.c ****     /*
 696:libcanard/canard.c ****      * Preparing the data in the temporary storage.
 697:libcanard/canard.c ****      */
 698:libcanard/canard.c ****     union
 699:libcanard/canard.c ****     {
 700:libcanard/canard.c ****         bool     boolean;
 701:libcanard/canard.c ****         uint8_t  u8;
 702:libcanard/canard.c ****         uint16_t u16;
 703:libcanard/canard.c ****         uint32_t u32;
 704:libcanard/canard.c ****         uint64_t u64;
 705:libcanard/canard.c ****         uint8_t bytes[8];
 706:libcanard/canard.c ****     } storage;
 707:libcanard/canard.c **** 
 708:libcanard/canard.c ****     memset(&storage, 0, sizeof(storage));
 709:libcanard/canard.c **** 
 710:libcanard/canard.c ****     uint8_t std_byte_length = 0;
 711:libcanard/canard.c **** 
 712:libcanard/canard.c ****     // Extra most significant bits can be safely ignored here.
 713:libcanard/canard.c ****     if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) va
 714:libcanard/canard.c ****     else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) valu
 715:libcanard/canard.c ****     else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) val
 716:libcanard/canard.c ****     else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) val
 717:libcanard/canard.c ****     else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) val
 718:libcanard/canard.c ****     else
ARM GAS  /tmp/cc2kQaha.s 			page 14


 719:libcanard/canard.c ****     {
 720:libcanard/canard.c ****         CANARD_ASSERT(false);
 721:libcanard/canard.c ****     }
 722:libcanard/canard.c **** 
 723:libcanard/canard.c ****     CANARD_ASSERT(std_byte_length > 0);
 724:libcanard/canard.c **** 
 725:libcanard/canard.c ****     if (isBigEndian())
 726:libcanard/canard.c ****     {
 727:libcanard/canard.c ****         swapByteOrder(&storage.bytes[0], std_byte_length);
 728:libcanard/canard.c ****     }
 729:libcanard/canard.c **** 
 730:libcanard/canard.c ****     /*
 731:libcanard/canard.c ****      * The bit copy algorithm assumes that more significant bits have lower index, so we need to sh
 732:libcanard/canard.c ****      * Extra least significant bits will be filled with zeroes, which is fine.
 733:libcanard/canard.c ****      * Extra most significant bits will be discarded here.
 734:libcanard/canard.c ****      * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however
 735:libcanard/canard.c ****      * not be taken if bit_length == 64, because 64 % 8 == 0.
 736:libcanard/canard.c ****      */
 737:libcanard/canard.c ****     if ((bit_length % 8) != 0)
 738:libcanard/canard.c ****     {
 739:libcanard/canard.c ****         // coverity[overrun-local]
 740:libcanard/canard.c ****         storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_le
 741:libcanard/canard.c ****     }
 742:libcanard/canard.c **** 
 743:libcanard/canard.c ****     /*
 744:libcanard/canard.c ****      * Now, the storage contains properly serialized scalar. Copying it out.
 745:libcanard/canard.c ****      */
 746:libcanard/canard.c ****     copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 747:libcanard/canard.c **** }
 748:libcanard/canard.c **** 
 749:libcanard/canard.c **** void canardReleaseRxTransferPayload(CanardInstance* ins, CanardRxTransfer* transfer)
 750:libcanard/canard.c **** {
 751:libcanard/canard.c ****     while (transfer->payload_middle != NULL)
 752:libcanard/canard.c ****     {
 753:libcanard/canard.c ****         CanardBufferBlock* const temp = transfer->payload_middle->next;
 754:libcanard/canard.c ****         freeBlock(&ins->allocator, transfer->payload_middle);
 755:libcanard/canard.c ****         transfer->payload_middle = temp;
 756:libcanard/canard.c ****     }
 757:libcanard/canard.c **** 
 758:libcanard/canard.c ****     transfer->payload_middle = NULL;
 759:libcanard/canard.c ****     transfer->payload_head = NULL;
 760:libcanard/canard.c ****     transfer->payload_tail = NULL;
 761:libcanard/canard.c ****     transfer->payload_len = 0;
 762:libcanard/canard.c **** }
 763:libcanard/canard.c **** 
 764:libcanard/canard.c **** CanardPoolAllocatorStatistics canardGetPoolAllocatorStatistics(CanardInstance* ins)
 765:libcanard/canard.c **** {
 766:libcanard/canard.c ****     return ins->allocator.statistics;
 767:libcanard/canard.c **** }
 768:libcanard/canard.c **** 
 769:libcanard/canard.c **** uint16_t canardConvertNativeFloatToFloat16(float value)
 770:libcanard/canard.c **** {
 771:libcanard/canard.c ****     CANARD_ASSERT(sizeof(float) == 4);
 772:libcanard/canard.c **** 
 773:libcanard/canard.c ****     union FP32
 774:libcanard/canard.c ****     {
 775:libcanard/canard.c ****         uint32_t u;
ARM GAS  /tmp/cc2kQaha.s 			page 15


 776:libcanard/canard.c ****         float f;
 777:libcanard/canard.c ****     };
 778:libcanard/canard.c **** 
 779:libcanard/canard.c ****     const union FP32 f32inf = { 255UL << 23U };
 780:libcanard/canard.c ****     const union FP32 f16inf = { 31UL << 23U };
 781:libcanard/canard.c ****     const union FP32 magic = { 15UL << 23U };
 782:libcanard/canard.c ****     const uint32_t sign_mask = 0x80000000UL;
 783:libcanard/canard.c ****     const uint32_t round_mask = ~0xFFFUL;
 784:libcanard/canard.c **** 
 785:libcanard/canard.c ****     union FP32 in;
 786:libcanard/canard.c ****     in.f = value;
 787:libcanard/canard.c ****     uint32_t sign = in.u & sign_mask;
 788:libcanard/canard.c ****     in.u ^= sign;
 789:libcanard/canard.c **** 
 790:libcanard/canard.c ****     uint16_t out = 0;
 791:libcanard/canard.c **** 
 792:libcanard/canard.c ****     if (in.u >= f32inf.u)
 793:libcanard/canard.c ****     {
 794:libcanard/canard.c ****         out = (in.u > f32inf.u) ? (uint16_t)0x7FFFU : (uint16_t)0x7C00U;
 795:libcanard/canard.c ****     }
 796:libcanard/canard.c ****     else
 797:libcanard/canard.c ****     {
 798:libcanard/canard.c ****         in.u &= round_mask;
 799:libcanard/canard.c ****         in.f *= magic.f;
 800:libcanard/canard.c ****         in.u -= round_mask;
 801:libcanard/canard.c ****         if (in.u > f16inf.u)
 802:libcanard/canard.c ****         {
 803:libcanard/canard.c ****             in.u = f16inf.u;
 804:libcanard/canard.c ****         }
 805:libcanard/canard.c ****         out = (uint16_t)(in.u >> 13U);
 806:libcanard/canard.c ****     }
 807:libcanard/canard.c **** 
 808:libcanard/canard.c ****     out |= (uint16_t)(sign >> 16U);
 809:libcanard/canard.c **** 
 810:libcanard/canard.c ****     return out;
 811:libcanard/canard.c **** }
 812:libcanard/canard.c **** 
 813:libcanard/canard.c **** float canardConvertFloat16ToNativeFloat(uint16_t value)
 814:libcanard/canard.c **** {
 815:libcanard/canard.c ****     CANARD_ASSERT(sizeof(float) == 4);
 816:libcanard/canard.c **** 
 817:libcanard/canard.c ****     union FP32
 818:libcanard/canard.c ****     {
 819:libcanard/canard.c ****         uint32_t u;
 820:libcanard/canard.c ****         float f;
 821:libcanard/canard.c ****     };
 822:libcanard/canard.c **** 
 823:libcanard/canard.c ****     const union FP32 magic = { (254UL - 15UL) << 23U };
 824:libcanard/canard.c ****     const union FP32 was_inf_nan = { (127UL + 16UL) << 23U };
 825:libcanard/canard.c ****     union FP32 out;
 826:libcanard/canard.c **** 
 827:libcanard/canard.c ****     out.u = (value & 0x7FFFU) << 13U;
 828:libcanard/canard.c ****     out.f *= magic.f;
 829:libcanard/canard.c ****     if (out.f >= was_inf_nan.f)
 830:libcanard/canard.c ****     {
 831:libcanard/canard.c ****         out.u |= 255UL << 23U;
 832:libcanard/canard.c ****     }
ARM GAS  /tmp/cc2kQaha.s 			page 16


 833:libcanard/canard.c ****     out.u |= (value & 0x8000UL) << 16U;
 834:libcanard/canard.c **** 
 835:libcanard/canard.c ****     return out.f;
 836:libcanard/canard.c **** }
 837:libcanard/canard.c **** 
 838:libcanard/canard.c **** /*
 839:libcanard/canard.c ****  * Internal (static functions)
 840:libcanard/canard.c ****  */
 841:libcanard/canard.c **** CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
 842:libcanard/canard.c **** {
  25              		.loc 1 842 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
 843:libcanard/canard.c ****     int16_t d = (int16_t)(b - a);
  31              		.loc 1 843 0
  32 0000 091A     		subs	r1, r1, r0
  33              	.LVL1:
  34 0002 89B2     		uxth	r1, r1
  35 0004 08B2     		sxth	r0, r1
  36              	.LVL2:
 844:libcanard/canard.c ****     if (d < 0)
  37              		.loc 1 844 0
  38 0006 0028     		cmp	r0, #0
  39 0008 00DB     		blt	.L3
  40              	.L2:
 845:libcanard/canard.c ****     {
 846:libcanard/canard.c ****         d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 847:libcanard/canard.c ****     }
 848:libcanard/canard.c ****     return d;
 849:libcanard/canard.c **** }
  41              		.loc 1 849 0
  42 000a 7047     		bx	lr
  43              	.L3:
 846:libcanard/canard.c ****     }
  44              		.loc 1 846 0
  45 000c 2031     		adds	r1, r1, #32
  46 000e 08B2     		sxth	r0, r1
  47              	.LVL3:
  48 0010 FBE7     		b	.L2
  49              		.cfi_endproc
  50              	.LFE16:
  52              		.section	.text.isPriorityHigher,"ax",%progbits
  53              		.align	1
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu softvfp
  59              	isPriorityHigher:
  60              	.LFB21:
 850:libcanard/canard.c **** 
 851:libcanard/canard.c **** CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
 852:libcanard/canard.c **** {
 853:libcanard/canard.c ****     CANARD_ASSERT(transfer_id != NULL);
 854:libcanard/canard.c **** 
ARM GAS  /tmp/cc2kQaha.s 			page 17


 855:libcanard/canard.c ****     (*transfer_id)++;
 856:libcanard/canard.c ****     if (*transfer_id >= 32)
 857:libcanard/canard.c ****     {
 858:libcanard/canard.c ****         *transfer_id = 0;
 859:libcanard/canard.c ****     }
 860:libcanard/canard.c **** }
 861:libcanard/canard.c **** 
 862:libcanard/canard.c **** CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
 863:libcanard/canard.c ****                                         uint32_t can_id,
 864:libcanard/canard.c ****                                         uint8_t* transfer_id,
 865:libcanard/canard.c ****                                         uint16_t crc,
 866:libcanard/canard.c ****                                         const uint8_t* payload,
 867:libcanard/canard.c ****                                         uint16_t payload_len)
 868:libcanard/canard.c **** {
 869:libcanard/canard.c ****     CANARD_ASSERT(ins != NULL);
 870:libcanard/canard.c ****     CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared
 871:libcanard/canard.c **** 
 872:libcanard/canard.c ****     if (transfer_id == NULL)
 873:libcanard/canard.c ****     {
 874:libcanard/canard.c ****         return -CANARD_ERROR_INVALID_ARGUMENT;
 875:libcanard/canard.c ****     }
 876:libcanard/canard.c **** 
 877:libcanard/canard.c ****     if ((payload_len > 0) && (payload == NULL))
 878:libcanard/canard.c ****     {
 879:libcanard/canard.c ****         return -CANARD_ERROR_INVALID_ARGUMENT;
 880:libcanard/canard.c ****     }
 881:libcanard/canard.c **** 
 882:libcanard/canard.c ****     int16_t result = 0;
 883:libcanard/canard.c **** 
 884:libcanard/canard.c ****     if (payload_len < CANARD_CAN_FRAME_MAX_DATA_LEN)                        // Single frame transfe
 885:libcanard/canard.c ****     {
 886:libcanard/canard.c ****         CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 887:libcanard/canard.c ****         if (queue_item == NULL)
 888:libcanard/canard.c ****         {
 889:libcanard/canard.c ****             return -CANARD_ERROR_OUT_OF_MEMORY;
 890:libcanard/canard.c ****         }
 891:libcanard/canard.c **** 
 892:libcanard/canard.c ****         memcpy(queue_item->frame.data, payload, payload_len);
 893:libcanard/canard.c **** 
 894:libcanard/canard.c ****         queue_item->frame.data_len = (uint8_t)(payload_len + 1);
 895:libcanard/canard.c ****         queue_item->frame.data[payload_len] = (uint8_t)(0xC0U | (*transfer_id & 31U));
 896:libcanard/canard.c ****         queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 897:libcanard/canard.c **** 
 898:libcanard/canard.c ****         pushTxQueue(ins, queue_item);
 899:libcanard/canard.c ****         result++;
 900:libcanard/canard.c ****     }
 901:libcanard/canard.c ****     else                                                                    // Multi frame transfer
 902:libcanard/canard.c ****     {
 903:libcanard/canard.c ****         uint16_t data_index = 0;
 904:libcanard/canard.c ****         uint8_t toggle = 0;
 905:libcanard/canard.c ****         uint8_t sot_eot = 0x80;
 906:libcanard/canard.c **** 
 907:libcanard/canard.c ****         CanardTxQueueItem* queue_item = NULL;
 908:libcanard/canard.c **** 
 909:libcanard/canard.c ****         while (payload_len - data_index != 0)
 910:libcanard/canard.c ****         {
 911:libcanard/canard.c ****             queue_item = createTxItem(&ins->allocator);
ARM GAS  /tmp/cc2kQaha.s 			page 18


 912:libcanard/canard.c ****             if (queue_item == NULL)
 913:libcanard/canard.c ****             {
 914:libcanard/canard.c ****                 return -CANARD_ERROR_OUT_OF_MEMORY;          // TODO: Purge all frames enqueued so 
 915:libcanard/canard.c ****             }
 916:libcanard/canard.c **** 
 917:libcanard/canard.c ****             uint8_t i = 0;
 918:libcanard/canard.c ****             if (data_index == 0)
 919:libcanard/canard.c ****             {
 920:libcanard/canard.c ****                 // add crc
 921:libcanard/canard.c ****                 queue_item->frame.data[0] = (uint8_t) (crc);
 922:libcanard/canard.c ****                 queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 923:libcanard/canard.c ****                 i = 2;
 924:libcanard/canard.c ****             }
 925:libcanard/canard.c ****             else
 926:libcanard/canard.c ****             {
 927:libcanard/canard.c ****                 i = 0;
 928:libcanard/canard.c ****             }
 929:libcanard/canard.c **** 
 930:libcanard/canard.c ****             for (; i < (CANARD_CAN_FRAME_MAX_DATA_LEN - 1) && data_index < payload_len; i++, data_i
 931:libcanard/canard.c ****             {
 932:libcanard/canard.c ****                 queue_item->frame.data[i] = payload[data_index];
 933:libcanard/canard.c ****             }
 934:libcanard/canard.c ****             // tail byte
 935:libcanard/canard.c ****             sot_eot = (data_index == payload_len) ? (uint8_t)0x40 : sot_eot;
 936:libcanard/canard.c **** 
 937:libcanard/canard.c ****             queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*
 938:libcanard/canard.c ****             queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 939:libcanard/canard.c ****             queue_item->frame.data_len = (uint8_t)(i + 1);
 940:libcanard/canard.c ****             pushTxQueue(ins, queue_item);
 941:libcanard/canard.c **** 
 942:libcanard/canard.c ****             result++;
 943:libcanard/canard.c ****             toggle ^= 1;
 944:libcanard/canard.c ****             sot_eot = 0;
 945:libcanard/canard.c ****         }
 946:libcanard/canard.c ****     }
 947:libcanard/canard.c **** 
 948:libcanard/canard.c ****     return result;
 949:libcanard/canard.c **** }
 950:libcanard/canard.c **** 
 951:libcanard/canard.c **** /**
 952:libcanard/canard.c ****  * Puts frame on on the TX queue. Higher priority placed first
 953:libcanard/canard.c ****  */
 954:libcanard/canard.c **** CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
 955:libcanard/canard.c **** {
 956:libcanard/canard.c ****     CANARD_ASSERT(ins != NULL);
 957:libcanard/canard.c ****     CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames
 958:libcanard/canard.c **** 
 959:libcanard/canard.c ****     if (ins->tx_queue == NULL)
 960:libcanard/canard.c ****     {
 961:libcanard/canard.c ****         ins->tx_queue = item;
 962:libcanard/canard.c ****         return;
 963:libcanard/canard.c ****     }
 964:libcanard/canard.c **** 
 965:libcanard/canard.c ****     CanardTxQueueItem* queue = ins->tx_queue;
 966:libcanard/canard.c ****     CanardTxQueueItem* previous = ins->tx_queue;
 967:libcanard/canard.c **** 
 968:libcanard/canard.c ****     while (queue != NULL)
ARM GAS  /tmp/cc2kQaha.s 			page 19


 969:libcanard/canard.c ****     {
 970:libcanard/canard.c ****         if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 971:libcanard/canard.c ****         {
 972:libcanard/canard.c ****             if (queue == ins->tx_queue)
 973:libcanard/canard.c ****             {
 974:libcanard/canard.c ****                 item->next = queue;
 975:libcanard/canard.c ****                 ins->tx_queue = item;
 976:libcanard/canard.c ****             }
 977:libcanard/canard.c ****             else
 978:libcanard/canard.c ****             {
 979:libcanard/canard.c ****                 previous->next = item;
 980:libcanard/canard.c ****                 item->next = queue;
 981:libcanard/canard.c ****             }
 982:libcanard/canard.c ****             return;
 983:libcanard/canard.c ****         }
 984:libcanard/canard.c ****         else
 985:libcanard/canard.c ****         {
 986:libcanard/canard.c ****             if (queue->next == NULL)
 987:libcanard/canard.c ****             {
 988:libcanard/canard.c ****                 queue->next = item;
 989:libcanard/canard.c ****                 return;
 990:libcanard/canard.c ****             }
 991:libcanard/canard.c ****             else
 992:libcanard/canard.c ****             {
 993:libcanard/canard.c ****                 previous = queue;
 994:libcanard/canard.c ****                 queue = queue->next;
 995:libcanard/canard.c ****             }
 996:libcanard/canard.c ****         }
 997:libcanard/canard.c ****     }
 998:libcanard/canard.c **** }
 999:libcanard/canard.c **** 
1000:libcanard/canard.c **** /**
1001:libcanard/canard.c ****  * Creates new tx queue item from allocator
1002:libcanard/canard.c ****  */
1003:libcanard/canard.c **** CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
1004:libcanard/canard.c **** {
1005:libcanard/canard.c ****     CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
1006:libcanard/canard.c ****     if (item == NULL)
1007:libcanard/canard.c ****     {
1008:libcanard/canard.c ****         return NULL;
1009:libcanard/canard.c ****     }
1010:libcanard/canard.c ****     memset(item, 0, sizeof(*item));
1011:libcanard/canard.c ****     return item;
1012:libcanard/canard.c **** }
1013:libcanard/canard.c **** 
1014:libcanard/canard.c **** /**
1015:libcanard/canard.c ****  * Returns true if priority of rhs is higher than id
1016:libcanard/canard.c ****  */
1017:libcanard/canard.c **** CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
1018:libcanard/canard.c **** {
  61              		.loc 1 1018 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66              	.LVL4:
  67 0000 10B4     		push	{r4}
ARM GAS  /tmp/cc2kQaha.s 			page 20


  68              	.LCFI0:
  69              		.cfi_def_cfa_offset 4
  70              		.cfi_offset 4, -4
1019:libcanard/canard.c ****     const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
  71              		.loc 1 1019 0
  72 0002 21F06044 		bic	r4, r1, #-536870912
  73              	.LVL5:
1020:libcanard/canard.c ****     const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
  74              		.loc 1 1020 0
  75 0006 20F06042 		bic	r2, r0, #-536870912
  76              	.LVL6:
1021:libcanard/canard.c **** 
1022:libcanard/canard.c ****     /*
1023:libcanard/canard.c ****      * STD vs EXT - if 11 most significant bits are the same, EXT loses.
1024:libcanard/canard.c ****      */
1025:libcanard/canard.c ****     const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
1026:libcanard/canard.c ****     const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
  77              		.loc 1 1026 0
  78 000a C30F     		lsrs	r3, r0, #31
  79              	.LVL7:
1027:libcanard/canard.c ****     if (ext != rhs_ext)
  80              		.loc 1 1027 0
  81 000c B3EBD17F 		cmp	r3, r1, lsr #31
  82 0010 10D0     		beq	.L5
  83              	.LBB2:
1028:libcanard/canard.c ****     {
1029:libcanard/canard.c ****         uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
  84              		.loc 1 1029 0
  85 0012 0029     		cmp	r1, #0
  86 0014 0ADB     		blt	.L11
  87              	.LVL8:
  88              	.L6:
1030:libcanard/canard.c ****         uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
  89              		.loc 1 1030 0 discriminator 4
  90 0016 0028     		cmp	r0, #0
  91 0018 0ADB     		blt	.L12
  92              	.LVL9:
  93              	.L7:
1031:libcanard/canard.c ****         if (arb11 != rhs_arb11)
  94              		.loc 1 1031 0 discriminator 4
  95 001a 9442     		cmp	r4, r2
  96 001c 03D0     		beq	.L8
1032:libcanard/canard.c ****         {
1033:libcanard/canard.c ****             return arb11 < rhs_arb11;
  97              		.loc 1 1033 0
  98 001e 9442     		cmp	r4, r2
  99 0020 2CBF     		ite	cs
 100 0022 0023     		movcs	r3, #0
 101              	.LVL10:
 102 0024 0123     		movcc	r3, #1
 103              	.LVL11:
 104              	.L8:
 105              	.LBE2:
1034:libcanard/canard.c ****         }
1035:libcanard/canard.c ****         else
1036:libcanard/canard.c ****         {
1037:libcanard/canard.c ****             return rhs_ext;
ARM GAS  /tmp/cc2kQaha.s 			page 21


1038:libcanard/canard.c ****         }
1039:libcanard/canard.c ****     }
1040:libcanard/canard.c **** 
1041:libcanard/canard.c ****     /*
1042:libcanard/canard.c ****      * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
1043:libcanard/canard.c ****      */
1044:libcanard/canard.c ****     const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
1045:libcanard/canard.c ****     const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
1046:libcanard/canard.c ****     if (clean_id == rhs_clean_id && rtr != rhs_rtr)
1047:libcanard/canard.c ****     {
1048:libcanard/canard.c ****         return rhs_rtr;
1049:libcanard/canard.c ****     }
1050:libcanard/canard.c **** 
1051:libcanard/canard.c ****     /*
1052:libcanard/canard.c ****      * Plain ID arbitration - greater value loses.
1053:libcanard/canard.c ****      */
1054:libcanard/canard.c ****     return clean_id < rhs_clean_id;
1055:libcanard/canard.c **** }
 106              		.loc 1 1055 0
 107 0026 1846     		mov	r0, r3
 108              	.LVL12:
 109 0028 10BC     		pop	{r4}
 110              	.LCFI1:
 111              		.cfi_remember_state
 112              		.cfi_restore 4
 113              		.cfi_def_cfa_offset 0
 114 002a 7047     		bx	lr
 115              	.LVL13:
 116              	.L11:
 117              	.LCFI2:
 118              		.cfi_restore_state
 119              	.LBB3:
1029:libcanard/canard.c ****         uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 120              		.loc 1 1029 0 discriminator 1
 121 002c A40C     		lsrs	r4, r4, #18
 122              	.LVL14:
 123 002e F2E7     		b	.L6
 124              	.LVL15:
 125              	.L12:
1030:libcanard/canard.c ****         if (arb11 != rhs_arb11)
 126              		.loc 1 1030 0 discriminator 1
 127 0030 920C     		lsrs	r2, r2, #18
 128              	.LVL16:
 129 0032 F2E7     		b	.L7
 130              	.LVL17:
 131              	.L5:
 132              	.LBE3:
1044:libcanard/canard.c ****     const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 133              		.loc 1 1044 0
 134 0034 C1F38071 		ubfx	r1, r1, #30, #1
 135              	.LVL18:
1045:libcanard/canard.c ****     if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 136              		.loc 1 1045 0
 137 0038 C0F38073 		ubfx	r3, r0, #30, #1
 138              	.LVL19:
1046:libcanard/canard.c ****     {
 139              		.loc 1 1046 0
ARM GAS  /tmp/cc2kQaha.s 			page 22


 140 003c 9442     		cmp	r4, r2
 141 003e 04D0     		beq	.L13
 142              	.L9:
1054:libcanard/canard.c **** }
 143              		.loc 1 1054 0
 144 0040 9442     		cmp	r4, r2
 145 0042 2CBF     		ite	cs
 146 0044 0023     		movcs	r3, #0
 147              	.LVL20:
 148 0046 0123     		movcc	r3, #1
 149 0048 EDE7     		b	.L8
 150              	.LVL21:
 151              	.L13:
1046:libcanard/canard.c ****     {
 152              		.loc 1 1046 0 discriminator 1
 153 004a 9942     		cmp	r1, r3
 154 004c EBD1     		bne	.L8
 155 004e F7E7     		b	.L9
 156              		.cfi_endproc
 157              	.LFE21:
 159              		.section	.text.extractTransferType,"ax",%progbits
 160              		.align	1
 161              		.syntax unified
 162              		.thumb
 163              		.thumb_func
 164              		.fpu softvfp
 166              	extractTransferType:
 167              	.LFB24:
1056:libcanard/canard.c **** 
1057:libcanard/canard.c **** /**
1058:libcanard/canard.c ****  * preps the rx state for the next transfer. does not delete the state
1059:libcanard/canard.c ****  */
1060:libcanard/canard.c **** CANARD_INTERNAL void prepareForNextTransfer(CanardRxState* state)
1061:libcanard/canard.c **** {
1062:libcanard/canard.c ****     CANARD_ASSERT(state->buffer_blocks == NULL);
1063:libcanard/canard.c ****     state->transfer_id++;
1064:libcanard/canard.c ****     state->payload_len = 0;
1065:libcanard/canard.c ****     state->next_toggle = 0;
1066:libcanard/canard.c **** }
1067:libcanard/canard.c **** 
1068:libcanard/canard.c **** /**
1069:libcanard/canard.c ****  * returns data type from id
1070:libcanard/canard.c ****  */
1071:libcanard/canard.c **** CANARD_INTERNAL uint16_t extractDataType(uint32_t id)
1072:libcanard/canard.c **** {
1073:libcanard/canard.c ****     if (extractTransferType(id) == CanardTransferTypeBroadcast)
1074:libcanard/canard.c ****     {
1075:libcanard/canard.c ****         uint16_t dtid = MSG_TYPE_FROM_ID(id);
1076:libcanard/canard.c ****         if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
1077:libcanard/canard.c ****         {
1078:libcanard/canard.c ****             dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
1079:libcanard/canard.c ****         }
1080:libcanard/canard.c ****         return dtid;
1081:libcanard/canard.c ****     }
1082:libcanard/canard.c ****     else
1083:libcanard/canard.c ****     {
1084:libcanard/canard.c ****         return (uint16_t) SRV_TYPE_FROM_ID(id);
ARM GAS  /tmp/cc2kQaha.s 			page 23


1085:libcanard/canard.c ****     }
1086:libcanard/canard.c **** }
1087:libcanard/canard.c **** 
1088:libcanard/canard.c **** /**
1089:libcanard/canard.c ****  * returns transfer type from id
1090:libcanard/canard.c ****  */
1091:libcanard/canard.c **** CANARD_INTERNAL CanardTransferType extractTransferType(uint32_t id)
1092:libcanard/canard.c **** {
 168              		.loc 1 1092 0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 0
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172              		@ link register save eliminated.
 173              	.LVL22:
1093:libcanard/canard.c ****     const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
1094:libcanard/canard.c ****     if (!is_service)
 174              		.loc 1 1094 0
 175 0000 10F0800F 		tst	r0, #128
 176 0004 06D0     		beq	.L16
1095:libcanard/canard.c ****     {
1096:libcanard/canard.c ****         return CanardTransferTypeBroadcast;
1097:libcanard/canard.c ****     }
1098:libcanard/canard.c ****     else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 177              		.loc 1 1098 0
 178 0006 10F4004F 		tst	r0, #32768
 179 000a 01D1     		bne	.L18
1099:libcanard/canard.c ****     {
1100:libcanard/canard.c ****         return CanardTransferTypeRequest;
1101:libcanard/canard.c ****     }
1102:libcanard/canard.c ****     else
1103:libcanard/canard.c ****     {
1104:libcanard/canard.c ****         return CanardTransferTypeResponse;
 180              		.loc 1 1104 0
 181 000c 0020     		movs	r0, #0
 182              	.LVL23:
1105:libcanard/canard.c ****     }
1106:libcanard/canard.c **** }
 183              		.loc 1 1106 0
 184 000e 7047     		bx	lr
 185              	.LVL24:
 186              	.L18:
1100:libcanard/canard.c ****     }
 187              		.loc 1 1100 0
 188 0010 0120     		movs	r0, #1
 189              	.LVL25:
 190 0012 7047     		bx	lr
 191              	.LVL26:
 192              	.L16:
1096:libcanard/canard.c ****     }
 193              		.loc 1 1096 0
 194 0014 0220     		movs	r0, #2
 195              	.LVL27:
 196 0016 7047     		bx	lr
 197              		.cfi_endproc
 198              	.LFE24:
 200              		.section	.text.extractDataType,"ax",%progbits
 201              		.align	1
ARM GAS  /tmp/cc2kQaha.s 			page 24


 202              		.syntax unified
 203              		.thumb
 204              		.thumb_func
 205              		.fpu softvfp
 207              	extractDataType:
 208              	.LFB23:
1072:libcanard/canard.c ****     if (extractTransferType(id) == CanardTransferTypeBroadcast)
 209              		.loc 1 1072 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              	.LVL28:
 214 0000 10B5     		push	{r4, lr}
 215              	.LCFI3:
 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 4, -8
 218              		.cfi_offset 14, -4
 219 0002 0446     		mov	r4, r0
1073:libcanard/canard.c ****     {
 220              		.loc 1 1073 0
 221 0004 FFF7FEFF 		bl	extractTransferType
 222              	.LVL29:
 223 0008 0228     		cmp	r0, #2
 224 000a 02D0     		beq	.L23
1084:libcanard/canard.c ****     }
 225              		.loc 1 1084 0
 226 000c C4F30740 		ubfx	r0, r4, #16, #8
 227              	.L21:
1086:libcanard/canard.c **** 
 228              		.loc 1 1086 0
 229 0010 10BD     		pop	{r4, pc}
 230              	.LVL30:
 231              	.L23:
 232              	.LBB4:
1075:libcanard/canard.c ****         if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 233              		.loc 1 1075 0
 234 0012 C4F30F20 		ubfx	r0, r4, #8, #16
 235              	.LVL31:
1076:libcanard/canard.c ****         {
 236              		.loc 1 1076 0
 237 0016 14F07F0F 		tst	r4, #127
 238 001a F9D1     		bne	.L21
1078:libcanard/canard.c ****         }
 239              		.loc 1 1078 0
 240 001c 00F00300 		and	r0, r0, #3
 241              	.LVL32:
 242 0020 F6E7     		b	.L21
 243              	.LBE4:
 244              		.cfi_endproc
 245              	.LFE23:
 247              		.section	.text.findRxState,"ax",%progbits
 248              		.align	1
 249              		.syntax unified
 250              		.thumb
 251              		.thumb_func
 252              		.fpu softvfp
 254              	findRxState:
ARM GAS  /tmp/cc2kQaha.s 			page 25


 255              	.LFB26:
1107:libcanard/canard.c **** 
1108:libcanard/canard.c **** /*
1109:libcanard/canard.c ****  *  CanardRxState functions
1110:libcanard/canard.c ****  */
1111:libcanard/canard.c **** 
1112:libcanard/canard.c **** /**
1113:libcanard/canard.c ****  * Traverses the list of CanardRxState's and returns a pointer to the CanardRxState
1114:libcanard/canard.c ****  * with either the Id or a new one at the end
1115:libcanard/canard.c ****  */
1116:libcanard/canard.c **** CANARD_INTERNAL CanardRxState* traverseRxStates(CanardInstance* ins, uint32_t transfer_descriptor)
1117:libcanard/canard.c **** {
1118:libcanard/canard.c ****     CanardRxState* states = ins->rx_states;
1119:libcanard/canard.c **** 
1120:libcanard/canard.c ****     if (states == NULL) // initialize CanardRxStates
1121:libcanard/canard.c ****     {
1122:libcanard/canard.c ****         states = createRxState(&ins->allocator, transfer_descriptor);
1123:libcanard/canard.c ****         
1124:libcanard/canard.c ****         if(states == NULL)
1125:libcanard/canard.c ****         {
1126:libcanard/canard.c ****             return NULL;
1127:libcanard/canard.c ****         }
1128:libcanard/canard.c **** 
1129:libcanard/canard.c ****         ins->rx_states = states;
1130:libcanard/canard.c ****         return states;
1131:libcanard/canard.c ****     }
1132:libcanard/canard.c **** 
1133:libcanard/canard.c ****     states = findRxState(states, transfer_descriptor);
1134:libcanard/canard.c ****     if (states != NULL)
1135:libcanard/canard.c ****     {
1136:libcanard/canard.c ****         return states;
1137:libcanard/canard.c ****     }
1138:libcanard/canard.c ****     else
1139:libcanard/canard.c ****     {
1140:libcanard/canard.c ****         return prependRxState(ins, transfer_descriptor);
1141:libcanard/canard.c ****     }
1142:libcanard/canard.c **** }
1143:libcanard/canard.c **** 
1144:libcanard/canard.c **** /**
1145:libcanard/canard.c ****  * returns pointer to the rx state of transfer descriptor or null if not found
1146:libcanard/canard.c ****  */
1147:libcanard/canard.c **** CANARD_INTERNAL CanardRxState* findRxState(CanardRxState* state, uint32_t transfer_descriptor)
1148:libcanard/canard.c **** {
 256              		.loc 1 1148 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              		@ link register save eliminated.
 261              	.LVL33:
 262              	.L25:
1149:libcanard/canard.c ****     while (state != NULL)
 263              		.loc 1 1149 0
 264 0000 20B1     		cbz	r0, .L26
1150:libcanard/canard.c ****     {
1151:libcanard/canard.c ****         if (state->dtid_tt_snid_dnid == transfer_descriptor)
 265              		.loc 1 1151 0
 266 0002 0369     		ldr	r3, [r0, #16]
ARM GAS  /tmp/cc2kQaha.s 			page 26


 267 0004 8B42     		cmp	r3, r1
 268 0006 01D0     		beq	.L26
1152:libcanard/canard.c ****         {
1153:libcanard/canard.c ****             return state;
1154:libcanard/canard.c ****         }
1155:libcanard/canard.c ****         state = state->next;
 269              		.loc 1 1155 0
 270 0008 0068     		ldr	r0, [r0]
 271              	.LVL34:
 272 000a F9E7     		b	.L25
 273              	.L26:
1156:libcanard/canard.c ****     }
1157:libcanard/canard.c ****     return NULL;
1158:libcanard/canard.c **** }
 274              		.loc 1 1158 0
 275 000c 7047     		bx	lr
 276              		.cfi_endproc
 277              	.LFE26:
 279              		.section	.text.isBigEndian,"ax",%progbits
 280              		.align	1
 281              		.syntax unified
 282              		.thumb
 283              		.thumb_func
 284              		.fpu softvfp
 286              	isBigEndian:
 287              	.LFB34:
1159:libcanard/canard.c **** 
1160:libcanard/canard.c **** /**
1161:libcanard/canard.c ****  * prepends rx state to the canard instance rx_states
1162:libcanard/canard.c ****  */
1163:libcanard/canard.c **** CANARD_INTERNAL CanardRxState* prependRxState(CanardInstance* ins, uint32_t transfer_descriptor)
1164:libcanard/canard.c **** {
1165:libcanard/canard.c ****     CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
1166:libcanard/canard.c **** 
1167:libcanard/canard.c ****     if(state == NULL)
1168:libcanard/canard.c ****     {
1169:libcanard/canard.c ****         return NULL;
1170:libcanard/canard.c ****     }
1171:libcanard/canard.c **** 
1172:libcanard/canard.c ****     state->next = ins->rx_states;
1173:libcanard/canard.c ****     ins->rx_states = state;
1174:libcanard/canard.c ****     return state;
1175:libcanard/canard.c **** }
1176:libcanard/canard.c **** 
1177:libcanard/canard.c **** CANARD_INTERNAL CanardRxState* createRxState(CanardPoolAllocator* allocator, uint32_t transfer_desc
1178:libcanard/canard.c **** {
1179:libcanard/canard.c ****     CanardRxState init = {
1180:libcanard/canard.c ****         .next = NULL,
1181:libcanard/canard.c ****         .buffer_blocks = NULL,
1182:libcanard/canard.c ****         .dtid_tt_snid_dnid = transfer_descriptor
1183:libcanard/canard.c ****     };
1184:libcanard/canard.c **** 
1185:libcanard/canard.c ****     CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
1186:libcanard/canard.c ****     if (state == NULL)
1187:libcanard/canard.c ****     {
1188:libcanard/canard.c ****         return NULL;
1189:libcanard/canard.c ****     }
ARM GAS  /tmp/cc2kQaha.s 			page 27


1190:libcanard/canard.c ****     memcpy(state, &init, sizeof(*state));
1191:libcanard/canard.c **** 
1192:libcanard/canard.c ****     return state;
1193:libcanard/canard.c **** }
1194:libcanard/canard.c **** 
1195:libcanard/canard.c **** CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
1196:libcanard/canard.c **** {
1197:libcanard/canard.c ****     while (rxstate->buffer_blocks != NULL)
1198:libcanard/canard.c ****     {
1199:libcanard/canard.c ****         CanardBufferBlock* const temp = rxstate->buffer_blocks->next;
1200:libcanard/canard.c ****         freeBlock(&ins->allocator, rxstate->buffer_blocks);
1201:libcanard/canard.c ****         rxstate->buffer_blocks = temp;
1202:libcanard/canard.c ****     }
1203:libcanard/canard.c ****     rxstate->payload_len = 0;
1204:libcanard/canard.c ****     return CANARD_OK;
1205:libcanard/canard.c **** }
1206:libcanard/canard.c **** 
1207:libcanard/canard.c **** /*
1208:libcanard/canard.c ****  *  CanardBufferBlock functions
1209:libcanard/canard.c ****  */
1210:libcanard/canard.c **** 
1211:libcanard/canard.c **** /**
1212:libcanard/canard.c ****  * pushes data into the rx state. Fills the buffer head, then appends data to buffer blocks
1213:libcanard/canard.c ****  */
1214:libcanard/canard.c **** CANARD_INTERNAL int16_t bufferBlockPushBytes(CanardPoolAllocator* allocator,
1215:libcanard/canard.c ****                                              CanardRxState* state,
1216:libcanard/canard.c ****                                              const uint8_t* data,
1217:libcanard/canard.c ****                                              uint8_t data_len)
1218:libcanard/canard.c **** {
1219:libcanard/canard.c ****     uint16_t data_index = 0;
1220:libcanard/canard.c **** 
1221:libcanard/canard.c ****     // if head is not full, add data to head
1222:libcanard/canard.c ****     if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
1223:libcanard/canard.c ****     {
1224:libcanard/canard.c ****         for (uint16_t i = (uint16_t)state->payload_len;
1225:libcanard/canard.c ****              i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
1226:libcanard/canard.c ****              i++, data_index++)
1227:libcanard/canard.c ****         {
1228:libcanard/canard.c ****             state->buffer_head[i] = data[data_index];
1229:libcanard/canard.c ****         }
1230:libcanard/canard.c ****         if (data_index >= data_len)
1231:libcanard/canard.c ****         {
1232:libcanard/canard.c ****             state->payload_len =
1233:libcanard/canard.c ****                 (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BIT
1234:libcanard/canard.c ****             return 1;
1235:libcanard/canard.c ****         }
1236:libcanard/canard.c ****     } // head is full.
1237:libcanard/canard.c **** 
1238:libcanard/canard.c ****     uint16_t index_at_nth_block =
1239:libcanard/canard.c ****         (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_
1240:libcanard/canard.c **** 
1241:libcanard/canard.c ****     // get to current block
1242:libcanard/canard.c ****     CanardBufferBlock* block = NULL;
1243:libcanard/canard.c **** 
1244:libcanard/canard.c ****     // buffer blocks uninitialized
1245:libcanard/canard.c ****     if (state->buffer_blocks == NULL)
1246:libcanard/canard.c ****     {
ARM GAS  /tmp/cc2kQaha.s 			page 28


1247:libcanard/canard.c ****         state->buffer_blocks = createBufferBlock(allocator);
1248:libcanard/canard.c **** 
1249:libcanard/canard.c ****         if (state->buffer_blocks == NULL)
1250:libcanard/canard.c ****         {
1251:libcanard/canard.c ****             return -CANARD_ERROR_OUT_OF_MEMORY;
1252:libcanard/canard.c ****         }
1253:libcanard/canard.c **** 
1254:libcanard/canard.c ****         block = state->buffer_blocks;
1255:libcanard/canard.c ****         index_at_nth_block = 0;
1256:libcanard/canard.c ****     }
1257:libcanard/canard.c ****     else
1258:libcanard/canard.c ****     {
1259:libcanard/canard.c ****         uint16_t nth_block = 1;
1260:libcanard/canard.c **** 
1261:libcanard/canard.c ****         // get to block
1262:libcanard/canard.c ****         block = state->buffer_blocks;
1263:libcanard/canard.c ****         while (block->next != NULL)
1264:libcanard/canard.c ****         {
1265:libcanard/canard.c ****             nth_block++;
1266:libcanard/canard.c ****             block = block->next;
1267:libcanard/canard.c ****         }
1268:libcanard/canard.c **** 
1269:libcanard/canard.c ****         const uint16_t num_buffer_blocks =
1270:libcanard/canard.c ****             (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_
1271:libcanard/canard.c ****                          CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);
1272:libcanard/canard.c **** 
1273:libcanard/canard.c ****         if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
1274:libcanard/canard.c ****         {
1275:libcanard/canard.c ****             block->next = createBufferBlock(allocator);
1276:libcanard/canard.c ****             if (block->next == NULL)
1277:libcanard/canard.c ****             {
1278:libcanard/canard.c ****                 return -CANARD_ERROR_OUT_OF_MEMORY;
1279:libcanard/canard.c ****             }
1280:libcanard/canard.c ****             block = block->next;
1281:libcanard/canard.c ****         }
1282:libcanard/canard.c ****     }
1283:libcanard/canard.c **** 
1284:libcanard/canard.c ****     // add data to current block until it becomes full, add new block if necessary
1285:libcanard/canard.c ****     while (data_index < data_len)
1286:libcanard/canard.c ****     {
1287:libcanard/canard.c ****         for (uint16_t i = index_at_nth_block;
1288:libcanard/canard.c ****              i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
1289:libcanard/canard.c ****              i++, data_index++)
1290:libcanard/canard.c ****         {
1291:libcanard/canard.c ****             block->data[i] = data[data_index];
1292:libcanard/canard.c ****         }
1293:libcanard/canard.c **** 
1294:libcanard/canard.c ****         if (data_index < data_len)
1295:libcanard/canard.c ****         {
1296:libcanard/canard.c ****             block->next = createBufferBlock(allocator);
1297:libcanard/canard.c ****             if (block->next == NULL)
1298:libcanard/canard.c ****             {
1299:libcanard/canard.c ****                 return -CANARD_ERROR_OUT_OF_MEMORY;
1300:libcanard/canard.c ****             }
1301:libcanard/canard.c ****             block = block->next;
1302:libcanard/canard.c ****             index_at_nth_block = 0;
1303:libcanard/canard.c ****         }
ARM GAS  /tmp/cc2kQaha.s 			page 29


1304:libcanard/canard.c ****     }
1305:libcanard/canard.c **** 
1306:libcanard/canard.c ****     state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOA
1307:libcanard/canard.c **** 
1308:libcanard/canard.c ****     return 1;
1309:libcanard/canard.c **** }
1310:libcanard/canard.c **** 
1311:libcanard/canard.c **** CANARD_INTERNAL CanardBufferBlock* createBufferBlock(CanardPoolAllocator* allocator)
1312:libcanard/canard.c **** {
1313:libcanard/canard.c ****     CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
1314:libcanard/canard.c ****     if (block == NULL)
1315:libcanard/canard.c ****     {
1316:libcanard/canard.c ****         return NULL;
1317:libcanard/canard.c ****     }
1318:libcanard/canard.c ****     block->next = NULL;
1319:libcanard/canard.c ****     return block;
1320:libcanard/canard.c **** }
1321:libcanard/canard.c **** 
1322:libcanard/canard.c **** /**
1323:libcanard/canard.c ****  * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
1324:libcanard/canard.c ****  */
1325:libcanard/canard.c **** void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
1326:libcanard/canard.c ****                         uint8_t* dst, uint32_t dst_offset)
1327:libcanard/canard.c **** {
1328:libcanard/canard.c ****     CANARD_ASSERT(src_len > 0U);
1329:libcanard/canard.c **** 
1330:libcanard/canard.c ****     // Normalizing inputs
1331:libcanard/canard.c ****     src += src_offset / 8U;
1332:libcanard/canard.c ****     dst += dst_offset / 8U;
1333:libcanard/canard.c **** 
1334:libcanard/canard.c ****     src_offset %= 8U;
1335:libcanard/canard.c ****     dst_offset %= 8U;
1336:libcanard/canard.c **** 
1337:libcanard/canard.c ****     const size_t last_bit = src_offset + src_len;
1338:libcanard/canard.c ****     while (last_bit - src_offset)
1339:libcanard/canard.c ****     {
1340:libcanard/canard.c ****         const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
1341:libcanard/canard.c ****         const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
1342:libcanard/canard.c **** 
1343:libcanard/canard.c ****         const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
1344:libcanard/canard.c ****         const uint32_t copy_bits = MIN(last_bit - src_offset, 8U - max_offset);
1345:libcanard/canard.c **** 
1346:libcanard/canard.c ****         const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
1347:libcanard/canard.c ****         const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> ds
1348:libcanard/canard.c **** 
1349:libcanard/canard.c ****         dst[dst_offset / 8U] =
1350:libcanard/canard.c ****             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_dat
1351:libcanard/canard.c **** 
1352:libcanard/canard.c ****         src_offset += copy_bits;
1353:libcanard/canard.c ****         dst_offset += copy_bits;
1354:libcanard/canard.c ****     }
1355:libcanard/canard.c **** }
1356:libcanard/canard.c **** 
1357:libcanard/canard.c **** CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
1358:libcanard/canard.c ****                                                  uint32_t bit_offset,
1359:libcanard/canard.c ****                                                  uint8_t bit_length,
1360:libcanard/canard.c ****                                                  void* output)
ARM GAS  /tmp/cc2kQaha.s 			page 30


1361:libcanard/canard.c **** {
1362:libcanard/canard.c ****     CANARD_ASSERT(transfer != 0);
1363:libcanard/canard.c **** 
1364:libcanard/canard.c ****     if (bit_offset >= transfer->payload_len * 8)
1365:libcanard/canard.c ****     {
1366:libcanard/canard.c ****         return 0;       // Out of range, reading zero bits
1367:libcanard/canard.c ****     }
1368:libcanard/canard.c **** 
1369:libcanard/canard.c ****     if (bit_offset + bit_length > transfer->payload_len * 8)
1370:libcanard/canard.c ****     {
1371:libcanard/canard.c ****         bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
1372:libcanard/canard.c ****     }
1373:libcanard/canard.c **** 
1374:libcanard/canard.c ****     CANARD_ASSERT(bit_length > 0);
1375:libcanard/canard.c **** 
1376:libcanard/canard.c ****     if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
1377:libcanard/canard.c ****     {
1378:libcanard/canard.c ****         /*
1379:libcanard/canard.c ****          * This part is hideously complicated and probably should be redesigned.
1380:libcanard/canard.c ****          * The objective here is to copy the requested number of bits from scattered storage into t
1381:libcanard/canard.c ****          * local storage. We go through great pains to ensure that all corner cases are handled cor
1382:libcanard/canard.c ****          */
1383:libcanard/canard.c ****         uint32_t input_bit_offset = bit_offset;
1384:libcanard/canard.c ****         uint8_t output_bit_offset = 0;
1385:libcanard/canard.c ****         uint8_t remaining_bit_length = bit_length;
1386:libcanard/canard.c **** 
1387:libcanard/canard.c ****         // Reading head
1388:libcanard/canard.c ****         if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
1389:libcanard/canard.c ****         {
1390:libcanard/canard.c ****             const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
1391:libcanard/canard.c ****                                                 CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input
1392:libcanard/canard.c **** 
1393:libcanard/canard.c ****             copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0
1394:libcanard/canard.c **** 
1395:libcanard/canard.c ****             input_bit_offset += amount;
1396:libcanard/canard.c ****             output_bit_offset = (uint8_t)(output_bit_offset + amount);
1397:libcanard/canard.c ****             remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
1398:libcanard/canard.c ****         }
1399:libcanard/canard.c **** 
1400:libcanard/canard.c ****         // Reading middle
1401:libcanard/canard.c ****         uint32_t remaining_bits = transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SI
1402:libcanard/canard.c ****         uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
1403:libcanard/canard.c ****         const CanardBufferBlock* block = transfer->payload_middle;
1404:libcanard/canard.c **** 
1405:libcanard/canard.c ****         while ((block != NULL) && (remaining_bit_length > 0))
1406:libcanard/canard.c ****         {
1407:libcanard/canard.c ****             CANARD_ASSERT(remaining_bits > 0);
1408:libcanard/canard.c ****             const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_S
1409:libcanard/canard.c ****                                                                          remaining_bits);
1410:libcanard/canard.c **** 
1411:libcanard/canard.c ****             // Perform copy if we've reached the requested offset, otherwise jump over this block a
1412:libcanard/canard.c ****             if (block_end_bit_offset > input_bit_offset)
1413:libcanard/canard.c ****             {
1414:libcanard/canard.c ****                 const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - i
1415:libcanard/canard.c **** 
1416:libcanard/canard.c ****                 CANARD_ASSERT(input_bit_offset >= block_bit_offset);
1417:libcanard/canard.c ****                 const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
ARM GAS  /tmp/cc2kQaha.s 			page 31


1418:libcanard/canard.c **** 
1419:libcanard/canard.c ****                 copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, o
1420:libcanard/canard.c **** 
1421:libcanard/canard.c ****                 input_bit_offset += amount;
1422:libcanard/canard.c ****                 output_bit_offset = (uint8_t)(output_bit_offset + amount);
1423:libcanard/canard.c ****                 remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
1424:libcanard/canard.c ****             }
1425:libcanard/canard.c **** 
1426:libcanard/canard.c ****             CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
1427:libcanard/canard.c ****             remaining_bits -= block_end_bit_offset - block_bit_offset;
1428:libcanard/canard.c ****             block_bit_offset = block_end_bit_offset;
1429:libcanard/canard.c ****             block = block->next;
1430:libcanard/canard.c ****         }
1431:libcanard/canard.c **** 
1432:libcanard/canard.c ****         CANARD_ASSERT(remaining_bit_length <= remaining_bits);
1433:libcanard/canard.c **** 
1434:libcanard/canard.c ****         // Reading tail
1435:libcanard/canard.c ****         if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
1436:libcanard/canard.c ****         {
1437:libcanard/canard.c ****             CANARD_ASSERT(input_bit_offset >= block_bit_offset);
1438:libcanard/canard.c ****             const uint32_t offset = input_bit_offset - block_bit_offset;
1439:libcanard/canard.c **** 
1440:libcanard/canard.c ****             copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) outpu
1441:libcanard/canard.c ****                          output_bit_offset);
1442:libcanard/canard.c **** 
1443:libcanard/canard.c ****             input_bit_offset += remaining_bit_length;
1444:libcanard/canard.c ****             output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
1445:libcanard/canard.c ****             remaining_bit_length = 0;
1446:libcanard/canard.c ****         }
1447:libcanard/canard.c **** 
1448:libcanard/canard.c ****         CANARD_ASSERT(input_bit_offset <= transfer->payload_len * 8);
1449:libcanard/canard.c ****         CANARD_ASSERT(output_bit_offset <= 64);
1450:libcanard/canard.c ****         CANARD_ASSERT(remaining_bit_length == 0);
1451:libcanard/canard.c ****     }
1452:libcanard/canard.c ****     else                                                                    // Single frame
1453:libcanard/canard.c ****     {
1454:libcanard/canard.c ****         copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
1455:libcanard/canard.c ****     }
1456:libcanard/canard.c **** 
1457:libcanard/canard.c ****     return bit_length;
1458:libcanard/canard.c **** }
1459:libcanard/canard.c **** 
1460:libcanard/canard.c **** CANARD_INTERNAL bool isBigEndian(void)
1461:libcanard/canard.c **** {
 288              		.loc 1 1461 0
 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292              		@ link register save eliminated.
1462:libcanard/canard.c **** #if defined(BYTE_ORDER) && defined(BIG_ENDIAN)
1463:libcanard/canard.c ****     return BYTE_ORDER == BIG_ENDIAN;                // Some compilers offer this neat shortcut
1464:libcanard/canard.c **** #else
1465:libcanard/canard.c ****     union
1466:libcanard/canard.c ****     {
1467:libcanard/canard.c ****         uint16_t a;
1468:libcanard/canard.c ****         uint8_t b[2];
1469:libcanard/canard.c ****     } u;
ARM GAS  /tmp/cc2kQaha.s 			page 32


1470:libcanard/canard.c ****     u.a = 1;
1471:libcanard/canard.c ****     return u.b[1] == 1;                             // Some don't...
1472:libcanard/canard.c **** #endif
1473:libcanard/canard.c **** }
 293              		.loc 1 1473 0
 294 0000 0020     		movs	r0, #0
 295 0002 7047     		bx	lr
 296              		.cfi_endproc
 297              	.LFE34:
 299              		.section	.text.crcAddByte,"ax",%progbits
 300              		.align	1
 301              		.syntax unified
 302              		.thumb
 303              		.thumb_func
 304              		.fpu softvfp
 306              	crcAddByte:
 307              	.LFB36:
1474:libcanard/canard.c **** 
1475:libcanard/canard.c **** CANARD_INTERNAL void swapByteOrder(void* data, size_t size)
1476:libcanard/canard.c **** {
1477:libcanard/canard.c ****     CANARD_ASSERT(data != NULL);
1478:libcanard/canard.c **** 
1479:libcanard/canard.c ****     uint8_t* const bytes = (uint8_t*) data;
1480:libcanard/canard.c **** 
1481:libcanard/canard.c ****     size_t fwd = 0;
1482:libcanard/canard.c ****     size_t rev = size - 1;
1483:libcanard/canard.c **** 
1484:libcanard/canard.c ****     while (fwd < rev)
1485:libcanard/canard.c ****     {
1486:libcanard/canard.c ****         const uint8_t x = bytes[fwd];
1487:libcanard/canard.c ****         bytes[fwd] = bytes[rev];
1488:libcanard/canard.c ****         bytes[rev] = x;
1489:libcanard/canard.c ****         fwd++;
1490:libcanard/canard.c ****         rev--;
1491:libcanard/canard.c ****     }
1492:libcanard/canard.c **** }
1493:libcanard/canard.c **** 
1494:libcanard/canard.c **** /*
1495:libcanard/canard.c ****  * CRC functions
1496:libcanard/canard.c ****  */
1497:libcanard/canard.c **** CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
1498:libcanard/canard.c **** {
 308              		.loc 1 1498 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312              		@ link register save eliminated.
 313              	.LVL35:
1499:libcanard/canard.c ****     crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 314              		.loc 1 1499 0
 315 0000 80EA0120 		eor	r0, r0, r1, lsl #8
 316              	.LVL36:
 317              	.LBB5:
1500:libcanard/canard.c ****     for (uint8_t j = 0; j < 8; j++)
 318              		.loc 1 1500 0
 319 0004 0023     		movs	r3, #0
 320 0006 07E0     		b	.L30
ARM GAS  /tmp/cc2kQaha.s 			page 33


 321              	.LVL37:
 322              	.L35:
1501:libcanard/canard.c ****     {
1502:libcanard/canard.c ****         if (crc_val & 0x8000U)
1503:libcanard/canard.c ****         {
1504:libcanard/canard.c ****             crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 323              		.loc 1 1504 0
 324 0008 4000     		lsls	r0, r0, #1
 325              	.LVL38:
 326 000a 80B2     		uxth	r0, r0
 327 000c 80F48150 		eor	r0, r0, #4128
 328 0010 80F00100 		eor	r0, r0, #1
 329              	.LVL39:
 330              	.L32:
1500:libcanard/canard.c ****     for (uint8_t j = 0; j < 8; j++)
 331              		.loc 1 1500 0 discriminator 2
 332 0014 0133     		adds	r3, r3, #1
 333              	.LVL40:
 334 0016 DBB2     		uxtb	r3, r3
 335              	.LVL41:
 336              	.L30:
1500:libcanard/canard.c ****     for (uint8_t j = 0; j < 8; j++)
 337              		.loc 1 1500 0 is_stmt 0 discriminator 1
 338 0018 072B     		cmp	r3, #7
 339 001a 05D8     		bhi	.L34
1502:libcanard/canard.c ****         {
 340              		.loc 1 1502 0 is_stmt 1
 341 001c 10F4004F 		tst	r0, #32768
 342 0020 F2D1     		bne	.L35
1505:libcanard/canard.c ****         }
1506:libcanard/canard.c ****         else
1507:libcanard/canard.c ****         {
1508:libcanard/canard.c ****             crc_val = (uint16_t) (crc_val << 1U);
 343              		.loc 1 1508 0
 344 0022 4000     		lsls	r0, r0, #1
 345              	.LVL42:
 346 0024 80B2     		uxth	r0, r0
 347              	.LVL43:
 348 0026 F5E7     		b	.L32
 349              	.L34:
 350              	.LBE5:
1509:libcanard/canard.c ****         }
1510:libcanard/canard.c ****     }
1511:libcanard/canard.c ****     return crc_val;
1512:libcanard/canard.c **** }
 351              		.loc 1 1512 0
 352 0028 7047     		bx	lr
 353              		.cfi_endproc
 354              	.LFE36:
 356              		.section	.text.crcAddSignature,"ax",%progbits
 357              		.align	1
 358              		.syntax unified
 359              		.thumb
 360              		.thumb_func
 361              		.fpu softvfp
 363              	crcAddSignature:
 364              	.LFB37:
ARM GAS  /tmp/cc2kQaha.s 			page 34


1513:libcanard/canard.c **** 
1514:libcanard/canard.c **** CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
1515:libcanard/canard.c **** {
 365              		.loc 1 1515 0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369              	.LVL44:
 370 0000 70B5     		push	{r4, r5, r6, lr}
 371              	.LCFI4:
 372              		.cfi_def_cfa_offset 16
 373              		.cfi_offset 4, -16
 374              		.cfi_offset 5, -12
 375              		.cfi_offset 6, -8
 376              		.cfi_offset 14, -4
 377 0002 1646     		mov	r6, r2
 378 0004 1D46     		mov	r5, r3
 379              	.LVL45:
 380              	.LBB6:
1516:libcanard/canard.c ****     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 381              		.loc 1 1516 0
 382 0006 0024     		movs	r4, #0
 383 0008 10E0     		b	.L37
 384              	.LVL46:
 385              	.L38:
1517:libcanard/canard.c ****     {
1518:libcanard/canard.c ****         crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 386              		.loc 1 1518 0 discriminator 3
 387 000a C4F12002 		rsb	r2, r4, #32
 388 000e A4F12003 		sub	r3, r4, #32
 389 0012 26FA04F1 		lsr	r1, r6, r4
 390 0016 05FA02F2 		lsl	r2, r5, r2
 391 001a 1143     		orrs	r1, r1, r2
 392 001c 25FA03F3 		lsr	r3, r5, r3
 393 0020 1943     		orrs	r1, r1, r3
 394 0022 C9B2     		uxtb	r1, r1
 395 0024 FFF7FEFF 		bl	crcAddByte
 396              	.LVL47:
1516:libcanard/canard.c ****     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 397              		.loc 1 1516 0 discriminator 3
 398 0028 0834     		adds	r4, r4, #8
 399              	.LVL48:
 400 002a A4B2     		uxth	r4, r4
 401              	.LVL49:
 402              	.L37:
1516:libcanard/canard.c ****     for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 403              		.loc 1 1516 0 is_stmt 0 discriminator 1
 404 002c 3F2C     		cmp	r4, #63
 405 002e ECD9     		bls	.L38
 406              	.LBE6:
1519:libcanard/canard.c ****     }
1520:libcanard/canard.c ****     return crc_val;
1521:libcanard/canard.c **** }
 407              		.loc 1 1521 0 is_stmt 1
 408 0030 70BD     		pop	{r4, r5, r6, pc}
 409              		.cfi_endproc
 410              	.LFE37:
ARM GAS  /tmp/cc2kQaha.s 			page 35


 412              		.section	.text.crcAdd,"ax",%progbits
 413              		.align	1
 414              		.syntax unified
 415              		.thumb
 416              		.thumb_func
 417              		.fpu softvfp
 419              	crcAdd:
 420              	.LFB38:
1522:libcanard/canard.c **** 
1523:libcanard/canard.c **** CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
1524:libcanard/canard.c **** {
 421              		.loc 1 1524 0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 0
 424              		@ frame_needed = 0, uses_anonymous_args = 0
 425              	.LVL50:
 426 0000 38B5     		push	{r3, r4, r5, lr}
 427              	.LCFI5:
 428              		.cfi_def_cfa_offset 16
 429              		.cfi_offset 3, -16
 430              		.cfi_offset 4, -12
 431              		.cfi_offset 5, -8
 432              		.cfi_offset 14, -4
1525:libcanard/canard.c ****     while (len--)
 433              		.loc 1 1525 0
 434 0002 05E0     		b	.L41
 435              	.LVL51:
 436              	.L42:
1526:libcanard/canard.c ****     {
1527:libcanard/canard.c ****         crc_val = crcAddByte(crc_val, *bytes++);
 437              		.loc 1 1527 0
 438 0004 4D1C     		adds	r5, r1, #1
 439              	.LVL52:
 440 0006 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 441 0008 FFF7FEFF 		bl	crcAddByte
 442              	.LVL53:
1525:libcanard/canard.c ****     while (len--)
 443              		.loc 1 1525 0
 444 000c 2246     		mov	r2, r4
 445              		.loc 1 1527 0
 446 000e 2946     		mov	r1, r5
 447              	.LVL54:
 448              	.L41:
1525:libcanard/canard.c ****     while (len--)
 449              		.loc 1 1525 0
 450 0010 541E     		subs	r4, r2, #1
 451              	.LVL55:
 452 0012 002A     		cmp	r2, #0
 453 0014 F6D1     		bne	.L42
1528:libcanard/canard.c ****     }
1529:libcanard/canard.c ****     return crc_val;
1530:libcanard/canard.c **** }
 454              		.loc 1 1530 0
 455 0016 38BD     		pop	{r3, r4, r5, pc}
 456              		.cfi_endproc
 457              	.LFE38:
 459              		.section	.text.initPoolAllocator,"ax",%progbits
ARM GAS  /tmp/cc2kQaha.s 			page 36


 460              		.align	1
 461              		.syntax unified
 462              		.thumb
 463              		.thumb_func
 464              		.fpu softvfp
 466              	initPoolAllocator:
 467              	.LFB39:
1531:libcanard/canard.c **** 
1532:libcanard/canard.c **** /*
1533:libcanard/canard.c ****  *  Pool Allocator functions
1534:libcanard/canard.c ****  */
1535:libcanard/canard.c **** CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
1536:libcanard/canard.c ****                                        CanardPoolAllocatorBlock* buf,
1537:libcanard/canard.c ****                                        uint16_t buf_len)
1538:libcanard/canard.c **** {
 468              		.loc 1 1538 0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 0
 471              		@ frame_needed = 0, uses_anonymous_args = 0
 472              		@ link register save eliminated.
 473              	.LVL56:
 474 0000 30B4     		push	{r4, r5}
 475              	.LCFI6:
 476              		.cfi_def_cfa_offset 8
 477              		.cfi_offset 4, -8
 478              		.cfi_offset 5, -4
 479              	.LVL57:
1539:libcanard/canard.c ****     size_t current_index = 0;
1540:libcanard/canard.c ****     CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 480              		.loc 1 1540 0
 481 0002 0546     		mov	r5, r0
 482              	.LVL58:
1539:libcanard/canard.c ****     size_t current_index = 0;
 483              		.loc 1 1539 0
 484 0004 0023     		movs	r3, #0
1541:libcanard/canard.c ****     while (current_index < buf_len)
 485              		.loc 1 1541 0
 486 0006 04E0     		b	.L45
 487              	.LVL59:
 488              	.L46:
1542:libcanard/canard.c ****     {
1543:libcanard/canard.c ****         *current_block = &buf[current_index];
 489              		.loc 1 1543 0
 490 0008 01EB4314 		add	r4, r1, r3, lsl #5
 491 000c 2C60     		str	r4, [r5]
1544:libcanard/canard.c ****         current_block = &((*current_block)->next);
 492              		.loc 1 1544 0
 493 000e 2546     		mov	r5, r4
 494              	.LVL60:
1545:libcanard/canard.c ****         current_index++;
 495              		.loc 1 1545 0
 496 0010 0133     		adds	r3, r3, #1
 497              	.LVL61:
 498              	.L45:
1541:libcanard/canard.c ****     {
 499              		.loc 1 1541 0
 500 0012 9A42     		cmp	r2, r3
ARM GAS  /tmp/cc2kQaha.s 			page 37


 501 0014 F8D8     		bhi	.L46
1546:libcanard/canard.c ****     }
1547:libcanard/canard.c ****     *current_block = NULL;
 502              		.loc 1 1547 0
 503 0016 0023     		movs	r3, #0
 504              	.LVL62:
 505 0018 2B60     		str	r3, [r5]
1548:libcanard/canard.c **** 
1549:libcanard/canard.c ****     allocator->statistics.capacity_blocks = buf_len;
 506              		.loc 1 1549 0
 507 001a 8280     		strh	r2, [r0, #4]	@ movhi
1550:libcanard/canard.c ****     allocator->statistics.current_usage_blocks = 0;
 508              		.loc 1 1550 0
 509 001c C380     		strh	r3, [r0, #6]	@ movhi
1551:libcanard/canard.c ****     allocator->statistics.peak_usage_blocks = 0;
 510              		.loc 1 1551 0
 511 001e 0381     		strh	r3, [r0, #8]	@ movhi
1552:libcanard/canard.c **** }
 512              		.loc 1 1552 0
 513 0020 30BC     		pop	{r4, r5}
 514              	.LCFI7:
 515              		.cfi_restore 5
 516              		.cfi_restore 4
 517              		.cfi_def_cfa_offset 0
 518              	.LVL63:
 519 0022 7047     		bx	lr
 520              		.cfi_endproc
 521              	.LFE39:
 523              		.section	.text.allocateBlock,"ax",%progbits
 524              		.align	1
 525              		.syntax unified
 526              		.thumb
 527              		.thumb_func
 528              		.fpu softvfp
 530              	allocateBlock:
 531              	.LFB40:
1553:libcanard/canard.c **** 
1554:libcanard/canard.c **** CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
1555:libcanard/canard.c **** {
 532              		.loc 1 1555 0
 533              		.cfi_startproc
 534              		@ args = 0, pretend = 0, frame = 0
 535              		@ frame_needed = 0, uses_anonymous_args = 0
 536              		@ link register save eliminated.
 537              	.LVL64:
 538 0000 0246     		mov	r2, r0
1556:libcanard/canard.c ****     // Check if there are any blocks available in the free list.
1557:libcanard/canard.c ****     if (allocator->free_list == NULL)
 539              		.loc 1 1557 0
 540 0002 0068     		ldr	r0, [r0]
 541              	.LVL65:
 542 0004 50B1     		cbz	r0, .L50
 543              	.LVL66:
1558:libcanard/canard.c ****     {
1559:libcanard/canard.c ****         return NULL;
1560:libcanard/canard.c ****     }
1561:libcanard/canard.c **** 
ARM GAS  /tmp/cc2kQaha.s 			page 38


1562:libcanard/canard.c ****     // Take first available block and prepares next block for use.
1563:libcanard/canard.c ****     void* result = allocator->free_list;
1564:libcanard/canard.c ****     allocator->free_list = allocator->free_list->next;
 544              		.loc 1 1564 0
 545 0006 0368     		ldr	r3, [r0]
 546 0008 1360     		str	r3, [r2]
1565:libcanard/canard.c **** 
1566:libcanard/canard.c ****     // Update statistics
1567:libcanard/canard.c ****     allocator->statistics.current_usage_blocks++;
 547              		.loc 1 1567 0
 548 000a D388     		ldrh	r3, [r2, #6]
 549 000c 0133     		adds	r3, r3, #1
 550 000e 9BB2     		uxth	r3, r3
 551 0010 D380     		strh	r3, [r2, #6]	@ movhi
1568:libcanard/canard.c ****     if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 552              		.loc 1 1568 0
 553 0012 1189     		ldrh	r1, [r2, #8]
 554 0014 8B42     		cmp	r3, r1
 555 0016 02D9     		bls	.L48
1569:libcanard/canard.c ****     {
1570:libcanard/canard.c ****         allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 556              		.loc 1 1570 0
 557 0018 1381     		strh	r3, [r2, #8]	@ movhi
 558 001a 7047     		bx	lr
 559              	.LVL67:
 560              	.L50:
1559:libcanard/canard.c ****     }
 561              		.loc 1 1559 0
 562 001c 0020     		movs	r0, #0
 563              	.L48:
1571:libcanard/canard.c ****     }
1572:libcanard/canard.c **** 
1573:libcanard/canard.c ****     return result;
1574:libcanard/canard.c **** }
 564              		.loc 1 1574 0
 565 001e 7047     		bx	lr
 566              		.cfi_endproc
 567              	.LFE40:
 569              		.section	.text.createBufferBlock,"ax",%progbits
 570              		.align	1
 571              		.syntax unified
 572              		.thumb
 573              		.thumb_func
 574              		.fpu softvfp
 576              	createBufferBlock:
 577              	.LFB31:
1312:libcanard/canard.c ****     CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 578              		.loc 1 1312 0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 582              	.LVL68:
 583 0000 08B5     		push	{r3, lr}
 584              	.LCFI8:
 585              		.cfi_def_cfa_offset 8
 586              		.cfi_offset 3, -8
 587              		.cfi_offset 14, -4
ARM GAS  /tmp/cc2kQaha.s 			page 39


1313:libcanard/canard.c ****     if (block == NULL)
 588              		.loc 1 1313 0
 589 0002 FFF7FEFF 		bl	allocateBlock
 590              	.LVL69:
1314:libcanard/canard.c ****     {
 591              		.loc 1 1314 0
 592 0006 0346     		mov	r3, r0
 593 0008 08B1     		cbz	r0, .L51
1318:libcanard/canard.c ****     return block;
 594              		.loc 1 1318 0
 595 000a 0022     		movs	r2, #0
 596 000c 0260     		str	r2, [r0]
 597              	.L51:
1320:libcanard/canard.c **** 
 598              		.loc 1 1320 0
 599 000e 1846     		mov	r0, r3
 600              	.LVL70:
 601 0010 08BD     		pop	{r3, pc}
 602              		.cfi_endproc
 603              	.LFE31:
 605              		.section	.text.bufferBlockPushBytes,"ax",%progbits
 606              		.align	1
 607              		.syntax unified
 608              		.thumb
 609              		.thumb_func
 610              		.fpu softvfp
 612              	bufferBlockPushBytes:
 613              	.LFB30:
1218:libcanard/canard.c ****     uint16_t data_index = 0;
 614              		.loc 1 1218 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 0
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 618              	.LVL71:
 619 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 620              	.LCFI9:
 621              		.cfi_def_cfa_offset 40
 622              		.cfi_offset 3, -40
 623              		.cfi_offset 4, -36
 624              		.cfi_offset 5, -32
 625              		.cfi_offset 6, -28
 626              		.cfi_offset 7, -24
 627              		.cfi_offset 8, -20
 628              		.cfi_offset 9, -16
 629              		.cfi_offset 10, -12
 630              		.cfi_offset 11, -8
 631              		.cfi_offset 14, -4
 632              	.LVL72:
1222:libcanard/canard.c ****     {
 633              		.loc 1 1222 0
 634 0004 CC8A     		ldrh	r4, [r1, #22]
 635 0006 C4F30904 		ubfx	r4, r4, #0, #10
 636 000a 062C     		cmp	r4, #6
 637 000c 1CD0     		beq	.L69
 638              	.LBB7:
1224:libcanard/canard.c ****              i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 639              		.loc 1 1224 0
ARM GAS  /tmp/cc2kQaha.s 			page 40


 640 000e 2646     		mov	r6, r4
 641              	.LVL73:
 642 0010 2546     		mov	r5, r4
 643              	.LBE7:
1219:libcanard/canard.c **** 
 644              		.loc 1 1219 0
 645 0012 0024     		movs	r4, #0
 646              	.LVL74:
 647              	.L56:
 648              	.LBB8:
1224:libcanard/canard.c ****              i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 649              		.loc 1 1224 0 discriminator 1
 650 0014 052D     		cmp	r5, #5
 651 0016 02D8     		bhi	.L57
1225:libcanard/canard.c ****              i++, data_index++)
 652              		.loc 1 1225 0
 653 0018 9FB2     		uxth	r7, r3
 654 001a A742     		cmp	r7, r4
 655 001c 0AD8     		bhi	.L58
 656              	.L57:
 657              	.LBE8:
1230:libcanard/canard.c ****         {
 658              		.loc 1 1230 0
 659 001e 9DB2     		uxth	r5, r3
 660              	.LVL75:
 661 0020 A542     		cmp	r5, r4
 662 0022 12D8     		bhi	.L55
1233:libcanard/canard.c ****             return 1;
 663              		.loc 1 1233 0
 664 0024 3544     		add	r5, r5, r6
1232:libcanard/canard.c ****                 (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BIT
 665              		.loc 1 1232 0
 666 0026 CB8A     		ldrh	r3, [r1, #22]
 667              	.LVL76:
 668 0028 65F30903 		bfi	r3, r5, #0, #10
 669 002c CB82     		strh	r3, [r1, #22]	@ movhi
1234:libcanard/canard.c ****         }
 670              		.loc 1 1234 0
 671 002e 0120     		movs	r0, #1
 672              	.LVL77:
 673              	.L59:
1309:libcanard/canard.c **** 
 674              		.loc 1 1309 0
 675 0030 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 676              	.LVL78:
 677              	.L58:
 678              	.LBB9:
1228:libcanard/canard.c ****         }
 679              		.loc 1 1228 0
 680 0034 12F804C0 		ldrb	ip, [r2, r4]	@ zero_extendqisi2
 681 0038 4F19     		adds	r7, r1, r5
 682 003a 87F81AC0 		strb	ip, [r7, #26]
1226:libcanard/canard.c ****         {
 683              		.loc 1 1226 0
 684 003e 0135     		adds	r5, r5, #1
 685              	.LVL79:
 686 0040 ADB2     		uxth	r5, r5
ARM GAS  /tmp/cc2kQaha.s 			page 41


 687              	.LVL80:
 688 0042 0134     		adds	r4, r4, #1
 689              	.LVL81:
 690 0044 A4B2     		uxth	r4, r4
 691              	.LVL82:
 692 0046 E5E7     		b	.L56
 693              	.LVL83:
 694              	.L69:
 695              	.LBE9:
1219:libcanard/canard.c **** 
 696              		.loc 1 1219 0
 697 0048 0024     		movs	r4, #0
 698              	.LVL84:
 699              	.L55:
 700 004a 9946     		mov	r9, r3
 701 004c 9346     		mov	fp, r2
 702 004e 0E46     		mov	r6, r1
 703 0050 8246     		mov	r10, r0
 704              	.LVL85:
1239:libcanard/canard.c **** 
 705              		.loc 1 1239 0
 706 0052 CD8A     		ldrh	r5, [r1, #22]
 707 0054 C5F30905 		ubfx	r5, r5, #0, #10
 708 0058 AA1F     		subs	r2, r5, #6
 709              	.LVL86:
 710 005a 1C23     		movs	r3, #28
 711              	.LVL87:
 712 005c B2FBF3F8 		udiv	r8, r2, r3
 713 0060 03FB1828 		mls	r8, r3, r8, r2
1238:libcanard/canard.c ****         (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_
 714              		.loc 1 1238 0
 715 0064 1FFA88F8 		uxth	r8, r8
 716              	.LVL88:
1245:libcanard/canard.c ****     {
 717              		.loc 1 1245 0
 718 0068 4F68     		ldr	r7, [r1, #4]
 719 006a 7FBB     		cbnz	r7, .L70
1247:libcanard/canard.c **** 
 720              		.loc 1 1247 0
 721 006c FFF7FEFF 		bl	createBufferBlock
 722              	.LVL89:
 723 0070 0746     		mov	r7, r0
 724 0072 7060     		str	r0, [r6, #4]
1249:libcanard/canard.c ****         {
 725              		.loc 1 1249 0
 726 0074 0028     		cmp	r0, #0
 727 0076 46D0     		beq	.L71
1255:libcanard/canard.c ****     }
 728              		.loc 1 1255 0
 729 0078 4FF00008 		mov	r8, #0
 730              	.LVL90:
 731              	.L64:
1285:libcanard/canard.c ****     {
 732              		.loc 1 1285 0
 733 007c 1FFA89F1 		uxth	r1, r9
 734 0080 A142     		cmp	r1, r4
 735 0082 3CD8     		bhi	.L75
ARM GAS  /tmp/cc2kQaha.s 			page 42


1306:libcanard/canard.c **** 
 736              		.loc 1 1306 0
 737 0084 F28A     		ldrh	r2, [r6, #22]
 738 0086 C2F30903 		ubfx	r3, r2, #0, #10
 739 008a 0B44     		add	r3, r3, r1
 740 008c 63F30902 		bfi	r2, r3, #0, #10
 741 0090 F282     		strh	r2, [r6, #22]	@ movhi
1308:libcanard/canard.c **** }
 742              		.loc 1 1308 0
 743 0092 0120     		movs	r0, #1
 744 0094 CCE7     		b	.L59
 745              	.LVL91:
 746              	.L62:
 747              	.LBB10:
1265:libcanard/canard.c ****             block = block->next;
 748              		.loc 1 1265 0
 749 0096 0132     		adds	r2, r2, #1
 750              	.LVL92:
 751 0098 92B2     		uxth	r2, r2
 752              	.LVL93:
1266:libcanard/canard.c ****         }
 753              		.loc 1 1266 0
 754 009a 1F46     		mov	r7, r3
 755              	.LVL94:
 756              	.L60:
1263:libcanard/canard.c ****         {
 757              		.loc 1 1263 0
 758 009c 3B68     		ldr	r3, [r7]
 759 009e 002B     		cmp	r3, #0
 760 00a0 F9D1     		bne	.L62
1270:libcanard/canard.c ****                          CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);
 761              		.loc 1 1270 0
 762 00a2 09EB0503 		add	r3, r9, r5
 763 00a6 063B     		subs	r3, r3, #6
 764 00a8 1C25     		movs	r5, #28
 765 00aa B3FBF5F3 		udiv	r3, r3, r5
 766 00ae 9BB2     		uxth	r3, r3
1269:libcanard/canard.c ****             (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_
 767              		.loc 1 1269 0
 768 00b0 0133     		adds	r3, r3, #1
 769 00b2 9BB2     		uxth	r3, r3
 770              	.LVL95:
1273:libcanard/canard.c ****         {
 771              		.loc 1 1273 0
 772 00b4 9A42     		cmp	r2, r3
 773 00b6 E1D2     		bcs	.L64
1273:libcanard/canard.c ****         {
 774              		.loc 1 1273 0 is_stmt 0 discriminator 1
 775 00b8 B8F1000F 		cmp	r8, #0
 776 00bc DED1     		bne	.L64
1275:libcanard/canard.c ****             if (block->next == NULL)
 777              		.loc 1 1275 0 is_stmt 1
 778 00be 5046     		mov	r0, r10
 779              	.LVL96:
 780 00c0 FFF7FEFF 		bl	createBufferBlock
 781              	.LVL97:
 782 00c4 3860     		str	r0, [r7]
ARM GAS  /tmp/cc2kQaha.s 			page 43


1276:libcanard/canard.c ****             {
 783              		.loc 1 1276 0
 784 00c6 08B3     		cbz	r0, .L72
1280:libcanard/canard.c ****         }
 785              		.loc 1 1280 0
 786 00c8 0746     		mov	r7, r0
 787              	.LVL98:
 788 00ca D7E7     		b	.L64
 789              	.LVL99:
 790              	.L70:
1259:libcanard/canard.c **** 
 791              		.loc 1 1259 0
 792 00cc 0122     		movs	r2, #1
 793 00ce E5E7     		b	.L60
 794              	.LVL100:
 795              	.L66:
 796              	.LBE10:
 797              	.LBB11:
1291:libcanard/canard.c ****         }
 798              		.loc 1 1291 0
 799 00d0 1BF80400 		ldrb	r0, [fp, r4]	@ zero_extendqisi2
 800 00d4 BB18     		adds	r3, r7, r2
 801 00d6 1871     		strb	r0, [r3, #4]
1289:libcanard/canard.c ****         {
 802              		.loc 1 1289 0
 803 00d8 0132     		adds	r2, r2, #1
 804              	.LVL101:
 805 00da 92B2     		uxth	r2, r2
 806              	.LVL102:
 807 00dc 0134     		adds	r4, r4, #1
 808              	.LVL103:
 809 00de A4B2     		uxth	r4, r4
 810              	.LVL104:
 811              	.L68:
1287:libcanard/canard.c ****              i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 812              		.loc 1 1287 0 discriminator 1
 813 00e0 1B2A     		cmp	r2, #27
 814 00e2 01D8     		bhi	.L65
1288:libcanard/canard.c ****              i++, data_index++)
 815              		.loc 1 1288 0
 816 00e4 A142     		cmp	r1, r4
 817 00e6 F3D8     		bhi	.L66
 818              	.L65:
 819              	.LBE11:
1294:libcanard/canard.c ****         {
 820              		.loc 1 1294 0
 821 00e8 A142     		cmp	r1, r4
 822 00ea 0AD9     		bls	.L73
1296:libcanard/canard.c ****             if (block->next == NULL)
 823              		.loc 1 1296 0
 824 00ec 5046     		mov	r0, r10
 825 00ee FFF7FEFF 		bl	createBufferBlock
 826              	.LVL105:
 827 00f2 3860     		str	r0, [r7]
1297:libcanard/canard.c ****             {
 828              		.loc 1 1297 0
 829 00f4 68B1     		cbz	r0, .L74
ARM GAS  /tmp/cc2kQaha.s 			page 44


1302:libcanard/canard.c ****         }
 830              		.loc 1 1302 0
 831 00f6 4FF00008 		mov	r8, #0
 832              	.LVL106:
 833              	.L67:
 834 00fa 0746     		mov	r7, r0
 835              	.LVL107:
 836 00fc BEE7     		b	.L64
 837              	.LVL108:
 838              	.L75:
 839              	.LBB12:
1287:libcanard/canard.c ****              i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 840              		.loc 1 1287 0
 841 00fe 4246     		mov	r2, r8
 842 0100 EEE7     		b	.L68
 843              	.LVL109:
 844              	.L73:
 845              	.LBE12:
 846 0102 3846     		mov	r0, r7
 847 0104 F9E7     		b	.L67
 848              	.LVL110:
 849              	.L71:
1251:libcanard/canard.c ****         }
 850              		.loc 1 1251 0
 851 0106 6FF00200 		mvn	r0, #2
 852 010a 91E7     		b	.L59
 853              	.LVL111:
 854              	.L72:
 855              	.LBB13:
1278:libcanard/canard.c ****             }
 856              		.loc 1 1278 0
 857 010c 6FF00200 		mvn	r0, #2
 858 0110 8EE7     		b	.L59
 859              	.L74:
 860              	.LBE13:
1299:libcanard/canard.c ****             }
 861              		.loc 1 1299 0
 862 0112 6FF00200 		mvn	r0, #2
 863 0116 8BE7     		b	.L59
 864              		.cfi_endproc
 865              	.LFE30:
 867              		.section	.text.pushTxQueue,"ax",%progbits
 868              		.align	1
 869              		.syntax unified
 870              		.thumb
 871              		.thumb_func
 872              		.fpu softvfp
 874              	pushTxQueue:
 875              	.LFB19:
 955:libcanard/canard.c ****     CANARD_ASSERT(ins != NULL);
 876              		.loc 1 955 0
 877              		.cfi_startproc
 878              		@ args = 0, pretend = 0, frame = 0
 879              		@ frame_needed = 0, uses_anonymous_args = 0
 880              	.LVL112:
 881 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 882              	.LCFI10:
ARM GAS  /tmp/cc2kQaha.s 			page 45


 883              		.cfi_def_cfa_offset 24
 884              		.cfi_offset 4, -24
 885              		.cfi_offset 5, -20
 886              		.cfi_offset 6, -16
 887              		.cfi_offset 7, -12
 888              		.cfi_offset 8, -8
 889              		.cfi_offset 14, -4
 956:libcanard/canard.c ****     CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames
 890              		.loc 1 956 0
 891 0004 90B1     		cbz	r0, .L88
 892 0006 0D46     		mov	r5, r1
 893 0008 8046     		mov	r8, r0
 957:libcanard/canard.c **** 
 894              		.loc 1 957 0
 895 000a 0B7C     		ldrb	r3, [r1, #16]	@ zero_extendqisi2
 896 000c ABB1     		cbz	r3, .L89
 959:libcanard/canard.c ****     {
 897              		.loc 1 959 0
 898 000e C769     		ldr	r7, [r0, #28]
 899 0010 D7B1     		cbz	r7, .L90
 966:libcanard/canard.c **** 
 900              		.loc 1 966 0
 901 0012 3E46     		mov	r6, r7
 965:libcanard/canard.c ****     CanardTxQueueItem* previous = ins->tx_queue;
 902              		.loc 1 965 0
 903 0014 3C46     		mov	r4, r7
 904              	.LVL113:
 905              	.L80:
 968:libcanard/canard.c ****     {
 906              		.loc 1 968 0
 907 0016 CCB1     		cbz	r4, .L77
 970:libcanard/canard.c ****         {
 908              		.loc 1 970 0
 909 0018 6968     		ldr	r1, [r5, #4]
 910 001a 6068     		ldr	r0, [r4, #4]
 911 001c FFF7FEFF 		bl	isPriorityHigher
 912              	.LVL114:
 913 0020 B0B9     		cbnz	r0, .L91
 986:libcanard/canard.c ****             {
 914              		.loc 1 986 0
 915 0022 2368     		ldr	r3, [r4]
 993:libcanard/canard.c ****                 queue = queue->next;
 916              		.loc 1 993 0
 917 0024 2646     		mov	r6, r4
 918              	.LVL115:
 986:libcanard/canard.c ****             {
 919              		.loc 1 986 0
 920 0026 E3B1     		cbz	r3, .L92
 994:libcanard/canard.c ****             }
 921              		.loc 1 994 0
 922 0028 1C46     		mov	r4, r3
 923              	.LVL116:
 924 002a F4E7     		b	.L80
 925              	.LVL117:
 926              	.L88:
 956:libcanard/canard.c ****     CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames
 927              		.loc 1 956 0 discriminator 1
ARM GAS  /tmp/cc2kQaha.s 			page 46


 928 002c 0E4B     		ldr	r3, .L94
 929 002e 0F4A     		ldr	r2, .L94+4
 930 0030 4FF46F71 		mov	r1, #956
 931              	.LVL118:
 932 0034 0E48     		ldr	r0, .L94+8
 933              	.LVL119:
 934 0036 FFF7FEFF 		bl	__assert_func
 935              	.LVL120:
 936              	.L89:
 957:libcanard/canard.c **** 
 937              		.loc 1 957 0 discriminator 1
 938 003a 0E4B     		ldr	r3, .L94+12
 939 003c 0B4A     		ldr	r2, .L94+4
 940 003e 40F2BD31 		movw	r1, #957
 941              	.LVL121:
 942 0042 0B48     		ldr	r0, .L94+8
 943              	.LVL122:
 944 0044 FFF7FEFF 		bl	__assert_func
 945              	.LVL123:
 946              	.L90:
 961:libcanard/canard.c ****         return;
 947              		.loc 1 961 0
 948 0048 C8F81C10 		str	r1, [r8, #28]
 949              	.LVL124:
 950              	.L77:
 998:libcanard/canard.c **** 
 951              		.loc 1 998 0
 952 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 953              	.LVL125:
 954              	.L91:
 972:libcanard/canard.c ****             {
 955              		.loc 1 972 0
 956 0050 A742     		cmp	r7, r4
 957 0052 02D0     		beq	.L93
 979:libcanard/canard.c ****                 item->next = queue;
 958              		.loc 1 979 0
 959 0054 3560     		str	r5, [r6]
 980:libcanard/canard.c ****             }
 960              		.loc 1 980 0
 961 0056 2C60     		str	r4, [r5]
 962 0058 F8E7     		b	.L77
 963              	.L93:
 974:libcanard/canard.c ****                 ins->tx_queue = item;
 964              		.loc 1 974 0
 965 005a 2C60     		str	r4, [r5]
 975:libcanard/canard.c ****             }
 966              		.loc 1 975 0
 967 005c C8F81C50 		str	r5, [r8, #28]
 968 0060 F4E7     		b	.L77
 969              	.LVL126:
 970              	.L92:
 988:libcanard/canard.c ****                 return;
 971              		.loc 1 988 0
 972 0062 2560     		str	r5, [r4]
 989:libcanard/canard.c ****             }
 973              		.loc 1 989 0
 974 0064 F2E7     		b	.L77
ARM GAS  /tmp/cc2kQaha.s 			page 47


 975              	.L95:
 976 0066 00BF     		.align	2
 977              	.L94:
 978 0068 00000000 		.word	.LC0
 979 006c 00000000 		.word	.LANCHOR0
 980 0070 14000000 		.word	.LC1
 981 0074 28000000 		.word	.LC2
 982              		.cfi_endproc
 983              	.LFE19:
 985              		.section	.text.incrementTransferID,"ax",%progbits
 986              		.align	1
 987              		.syntax unified
 988              		.thumb
 989              		.thumb_func
 990              		.fpu softvfp
 992              	incrementTransferID:
 993              	.LFB17:
 852:libcanard/canard.c ****     CANARD_ASSERT(transfer_id != NULL);
 994              		.loc 1 852 0
 995              		.cfi_startproc
 996              		@ args = 0, pretend = 0, frame = 0
 997              		@ frame_needed = 0, uses_anonymous_args = 0
 998              	.LVL127:
 999 0000 08B5     		push	{r3, lr}
 1000              	.LCFI11:
 1001              		.cfi_def_cfa_offset 8
 1002              		.cfi_offset 3, -8
 1003              		.cfi_offset 14, -4
 853:libcanard/canard.c **** 
 1004              		.loc 1 853 0
 1005 0002 40B1     		cbz	r0, .L100
 855:libcanard/canard.c ****     if (*transfer_id >= 32)
 1006              		.loc 1 855 0
 1007 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1008 0006 0133     		adds	r3, r3, #1
 1009 0008 DBB2     		uxtb	r3, r3
 1010 000a 0370     		strb	r3, [r0]
 856:libcanard/canard.c ****     {
 1011              		.loc 1 856 0
 1012 000c 1F2B     		cmp	r3, #31
 1013 000e 01D9     		bls	.L96
 858:libcanard/canard.c ****     }
 1014              		.loc 1 858 0
 1015 0010 0023     		movs	r3, #0
 1016 0012 0370     		strb	r3, [r0]
 1017              	.L96:
 860:libcanard/canard.c **** 
 1018              		.loc 1 860 0
 1019 0014 08BD     		pop	{r3, pc}
 1020              	.L100:
 853:libcanard/canard.c **** 
 1021              		.loc 1 853 0 discriminator 1
 1022 0016 034B     		ldr	r3, .L101
 1023 0018 034A     		ldr	r2, .L101+4
 1024 001a 40F25531 		movw	r1, #853
 1025 001e 0348     		ldr	r0, .L101+8
 1026              	.LVL128:
ARM GAS  /tmp/cc2kQaha.s 			page 48


 1027 0020 FFF7FEFF 		bl	__assert_func
 1028              	.LVL129:
 1029              	.L102:
 1030              		.align	2
 1031              	.L101:
 1032 0024 00000000 		.word	.LC3
 1033 0028 00000000 		.word	.LANCHOR1
 1034 002c 14000000 		.word	.LC1
 1035              		.cfi_endproc
 1036              	.LFE17:
 1038              		.section	.text.freeBlock,"ax",%progbits
 1039              		.align	1
 1040              		.syntax unified
 1041              		.thumb
 1042              		.thumb_func
 1043              		.fpu softvfp
 1045              	freeBlock:
 1046              	.LFB41:
1575:libcanard/canard.c **** 
1576:libcanard/canard.c **** CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
1577:libcanard/canard.c **** {
 1047              		.loc 1 1577 0
 1048              		.cfi_startproc
 1049              		@ args = 0, pretend = 0, frame = 0
 1050              		@ frame_needed = 0, uses_anonymous_args = 0
 1051              	.LVL130:
 1052 0000 08B5     		push	{r3, lr}
 1053              	.LCFI12:
 1054              		.cfi_def_cfa_offset 8
 1055              		.cfi_offset 3, -8
 1056              		.cfi_offset 14, -4
 1057              	.LVL131:
1578:libcanard/canard.c ****     CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
1579:libcanard/canard.c **** 
1580:libcanard/canard.c ****     block->next = allocator->free_list;
 1058              		.loc 1 1580 0
 1059 0002 0368     		ldr	r3, [r0]
 1060 0004 0B60     		str	r3, [r1]
1581:libcanard/canard.c ****     allocator->free_list = block;
 1061              		.loc 1 1581 0
 1062 0006 0160     		str	r1, [r0]
1582:libcanard/canard.c **** 
1583:libcanard/canard.c ****     CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
 1063              		.loc 1 1583 0
 1064 0008 C388     		ldrh	r3, [r0, #6]
 1065 000a 13B1     		cbz	r3, .L106
1584:libcanard/canard.c ****     allocator->statistics.current_usage_blocks--;
 1066              		.loc 1 1584 0
 1067 000c 013B     		subs	r3, r3, #1
 1068 000e C380     		strh	r3, [r0, #6]	@ movhi
1585:libcanard/canard.c **** }
 1069              		.loc 1 1585 0
 1070 0010 08BD     		pop	{r3, pc}
 1071              	.L106:
1583:libcanard/canard.c ****     allocator->statistics.current_usage_blocks--;
 1072              		.loc 1 1583 0 discriminator 1
 1073 0012 034B     		ldr	r3, .L107
ARM GAS  /tmp/cc2kQaha.s 			page 49


 1074 0014 034A     		ldr	r2, .L107+4
 1075 0016 40F22F61 		movw	r1, #1583
 1076              	.LVL132:
 1077 001a 0348     		ldr	r0, .L107+8
 1078              	.LVL133:
 1079 001c FFF7FEFF 		bl	__assert_func
 1080              	.LVL134:
 1081              	.L108:
 1082              		.align	2
 1083              	.L107:
 1084 0020 00000000 		.word	.LC4
 1085 0024 00000000 		.word	.LANCHOR2
 1086 0028 14000000 		.word	.LC1
 1087              		.cfi_endproc
 1088              	.LFE41:
 1090              		.section	.text.releaseStatePayload,"ax",%progbits
 1091              		.align	1
 1092              		.syntax unified
 1093              		.thumb
 1094              		.thumb_func
 1095              		.fpu softvfp
 1097              	releaseStatePayload:
 1098              	.LFB29:
1196:libcanard/canard.c ****     while (rxstate->buffer_blocks != NULL)
 1099              		.loc 1 1196 0
 1100              		.cfi_startproc
 1101              		@ args = 0, pretend = 0, frame = 0
 1102              		@ frame_needed = 0, uses_anonymous_args = 0
 1103              	.LVL135:
 1104 0000 70B5     		push	{r4, r5, r6, lr}
 1105              	.LCFI13:
 1106              		.cfi_def_cfa_offset 16
 1107              		.cfi_offset 4, -16
 1108              		.cfi_offset 5, -12
 1109              		.cfi_offset 6, -8
 1110              		.cfi_offset 14, -4
 1111 0002 0646     		mov	r6, r0
 1112 0004 0C46     		mov	r4, r1
1197:libcanard/canard.c ****     {
 1113              		.loc 1 1197 0
 1114 0006 05E0     		b	.L110
 1115              	.LVL136:
 1116              	.L111:
 1117              	.LBB14:
1199:libcanard/canard.c ****         freeBlock(&ins->allocator, rxstate->buffer_blocks);
 1118              		.loc 1 1199 0
 1119 0008 0D68     		ldr	r5, [r1]
 1120              	.LVL137:
1200:libcanard/canard.c ****         rxstate->buffer_blocks = temp;
 1121              		.loc 1 1200 0
 1122 000a 06F10C00 		add	r0, r6, #12
 1123 000e FFF7FEFF 		bl	freeBlock
 1124              	.LVL138:
1201:libcanard/canard.c ****     }
 1125              		.loc 1 1201 0
 1126 0012 6560     		str	r5, [r4, #4]
 1127              	.LVL139:
ARM GAS  /tmp/cc2kQaha.s 			page 50


 1128              	.L110:
 1129              	.LBE14:
1197:libcanard/canard.c ****     {
 1130              		.loc 1 1197 0
 1131 0014 6168     		ldr	r1, [r4, #4]
 1132 0016 0029     		cmp	r1, #0
 1133 0018 F6D1     		bne	.L111
1203:libcanard/canard.c ****     return CANARD_OK;
 1134              		.loc 1 1203 0
 1135 001a E38A     		ldrh	r3, [r4, #22]
 1136 001c 6FF30903 		bfc	r3, #0, #10
 1137 0020 E382     		strh	r3, [r4, #22]	@ movhi
1205:libcanard/canard.c **** 
 1138              		.loc 1 1205 0
 1139 0022 0020     		movs	r0, #0
 1140 0024 0021     		movs	r1, #0
 1141 0026 70BD     		pop	{r4, r5, r6, pc}
 1142              		.cfi_endproc
 1143              	.LFE29:
 1145              		.section	.text.prepareForNextTransfer,"ax",%progbits
 1146              		.align	1
 1147              		.syntax unified
 1148              		.thumb
 1149              		.thumb_func
 1150              		.fpu softvfp
 1152              	prepareForNextTransfer:
 1153              	.LFB22:
1061:libcanard/canard.c ****     CANARD_ASSERT(state->buffer_blocks == NULL);
 1154              		.loc 1 1061 0
 1155              		.cfi_startproc
 1156              		@ args = 0, pretend = 0, frame = 0
 1157              		@ frame_needed = 0, uses_anonymous_args = 0
 1158              	.LVL140:
 1159 0000 08B5     		push	{r3, lr}
 1160              	.LCFI14:
 1161              		.cfi_def_cfa_offset 8
 1162              		.cfi_offset 3, -8
 1163              		.cfi_offset 14, -4
1062:libcanard/canard.c ****     state->transfer_id++;
 1164              		.loc 1 1062 0
 1165 0002 4368     		ldr	r3, [r0, #4]
 1166 0004 83B9     		cbnz	r3, .L116
1063:libcanard/canard.c ****     state->payload_len = 0;
 1167              		.loc 1 1063 0
 1168 0006 C37D     		ldrb	r3, [r0, #23]	@ zero_extendqisi2
 1169 0008 C3F38402 		ubfx	r2, r3, #2, #5
 1170 000c 0132     		adds	r2, r2, #1
 1171 000e 62F38603 		bfi	r3, r2, #2, #5
 1172 0012 C375     		strb	r3, [r0, #23]
1064:libcanard/canard.c ****     state->next_toggle = 0;
 1173              		.loc 1 1064 0
 1174 0014 C38A     		ldrh	r3, [r0, #22]
 1175 0016 6FF30903 		bfc	r3, #0, #10
 1176 001a C382     		strh	r3, [r0, #22]	@ movhi
1065:libcanard/canard.c **** }
 1177              		.loc 1 1065 0
 1178 001c C3F30723 		ubfx	r3, r3, #8, #8
ARM GAS  /tmp/cc2kQaha.s 			page 51


 1179 0020 6FF3C713 		bfc	r3, #7, #1
 1180 0024 C375     		strb	r3, [r0, #23]
1066:libcanard/canard.c **** 
 1181              		.loc 1 1066 0
 1182 0026 08BD     		pop	{r3, pc}
 1183              	.L116:
1062:libcanard/canard.c ****     state->transfer_id++;
 1184              		.loc 1 1062 0 discriminator 1
 1185 0028 034B     		ldr	r3, .L117
 1186 002a 044A     		ldr	r2, .L117+4
 1187 002c 40F22641 		movw	r1, #1062
 1188 0030 0348     		ldr	r0, .L117+8
 1189              	.LVL141:
 1190 0032 FFF7FEFF 		bl	__assert_func
 1191              	.LVL142:
 1192              	.L118:
 1193 0036 00BF     		.align	2
 1194              	.L117:
 1195 0038 00000000 		.word	.LC5
 1196 003c 00000000 		.word	.LANCHOR3
 1197 0040 14000000 		.word	.LC1
 1198              		.cfi_endproc
 1199              	.LFE22:
 1201              		.section	.text.copyBitArray,"ax",%progbits
 1202              		.align	1
 1203              		.syntax unified
 1204              		.thumb
 1205              		.thumb_func
 1206              		.fpu softvfp
 1208              	copyBitArray:
 1209              	.LFB32:
1327:libcanard/canard.c ****     CANARD_ASSERT(src_len > 0U);
 1210              		.loc 1 1327 0
 1211              		.cfi_startproc
 1212              		@ args = 4, pretend = 0, frame = 0
 1213              		@ frame_needed = 0, uses_anonymous_args = 0
 1214              	.LVL143:
 1215 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1216              	.LCFI15:
 1217              		.cfi_def_cfa_offset 32
 1218              		.cfi_offset 3, -32
 1219              		.cfi_offset 4, -28
 1220              		.cfi_offset 5, -24
 1221              		.cfi_offset 6, -20
 1222              		.cfi_offset 7, -16
 1223              		.cfi_offset 8, -12
 1224              		.cfi_offset 9, -8
 1225              		.cfi_offset 14, -4
 1226 0004 089F     		ldr	r7, [sp, #32]
1328:libcanard/canard.c **** 
 1227              		.loc 1 1328 0
 1228 0006 4AB1     		cbz	r2, .L124
1331:libcanard/canard.c ****     dst += dst_offset / 8U;
 1229              		.loc 1 1331 0
 1230 0008 4FEAD10C 		lsr	ip, r1, #3
 1231              	.LVL144:
1332:libcanard/canard.c **** 
ARM GAS  /tmp/cc2kQaha.s 			page 52


 1232              		.loc 1 1332 0
 1233 000c 03EBD703 		add	r3, r3, r7, lsr #3
 1234              	.LVL145:
1334:libcanard/canard.c ****     dst_offset %= 8U;
 1235              		.loc 1 1334 0
 1236 0010 01F00701 		and	r1, r1, #7
 1237              	.LVL146:
1335:libcanard/canard.c **** 
 1238              		.loc 1 1335 0
 1239 0014 07F00707 		and	r7, r7, #7
 1240              	.LVL147:
1337:libcanard/canard.c ****     while (last_bit - src_offset)
 1241              		.loc 1 1337 0
 1242 0018 0A44     		add	r2, r2, r1
 1243              	.LVL148:
1338:libcanard/canard.c ****     {
 1244              		.loc 1 1338 0
 1245 001a 31E0     		b	.L121
 1246              	.LVL149:
 1247              	.L124:
1328:libcanard/canard.c **** 
 1248              		.loc 1 1328 0 discriminator 1
 1249 001c 1A4B     		ldr	r3, .L125
 1250              	.LVL150:
 1251 001e 1B4A     		ldr	r2, .L125+4
 1252              	.LVL151:
 1253 0020 4FF4A661 		mov	r1, #1328
 1254              	.LVL152:
 1255 0024 1A48     		ldr	r0, .L125+8
 1256              	.LVL153:
 1257 0026 FFF7FEFF 		bl	__assert_func
 1258              	.LVL154:
 1259              	.L122:
 1260              	.LBB15:
1340:libcanard/canard.c ****         const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 1261              		.loc 1 1340 0
 1262 002a 01F00708 		and	r8, r1, #7
 1263              	.LVL155:
1341:libcanard/canard.c **** 
 1264              		.loc 1 1341 0
 1265 002e 07F0070E 		and	lr, r7, #7
 1266              	.LVL156:
1343:libcanard/canard.c ****         const uint32_t copy_bits = MIN(last_bit - src_offset, 8U - max_offset);
 1267              		.loc 1 1343 0
 1268 0032 4646     		mov	r6, r8
 1269 0034 F045     		cmp	r8, lr
 1270 0036 38BF     		it	cc
 1271 0038 7646     		movcc	r6, lr
 1272              	.LVL157:
1344:libcanard/canard.c **** 
 1273              		.loc 1 1344 0
 1274 003a C6F10806 		rsb	r6, r6, #8
 1275              	.LVL158:
 1276 003e 541A     		subs	r4, r2, r1
 1277 0040 A642     		cmp	r6, r4
 1278              	.LVL159:
 1279 0042 28BF     		it	cs
ARM GAS  /tmp/cc2kQaha.s 			page 53


 1280 0044 2646     		movcs	r6, r4
 1281              	.LVL160:
1346:libcanard/canard.c ****         const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> ds
 1282              		.loc 1 1346 0
 1283 0046 4FF47F45 		mov	r5, #65280
 1284 004a F540     		lsrs	r5, r5, r6
 1285 004c EDB2     		uxtb	r5, r5
 1286 004e 45FA0EF5 		asr	r5, r5, lr
 1287              	.LVL161:
1347:libcanard/canard.c **** 
 1288              		.loc 1 1347 0
 1289 0052 CC08     		lsrs	r4, r1, #3
 1290 0054 00EB0C09 		add	r9, r0, ip
 1291 0058 19F80440 		ldrb	r4, [r9, r4]	@ zero_extendqisi2
 1292 005c 04FA08F4 		lsl	r4, r4, r8
 1293 0060 24FA0EF4 		lsr	r4, r4, lr
 1294 0064 E4B2     		uxtb	r4, r4
 1295              	.LVL162:
1350:libcanard/canard.c **** 
 1296              		.loc 1 1350 0
 1297 0066 4FEAD708 		lsr	r8, r7, #3
 1298              	.LVL163:
 1299 006a 13F808E0 		ldrb	lr, [r3, r8]	@ zero_extendqisi2
 1300              	.LVL164:
 1301 006e 8EEA0404 		eor	r4, lr, r4
 1302              	.LVL165:
 1303 0072 2C40     		ands	r4, r4, r5
 1304 0074 8EEA040E 		eor	lr, lr, r4
1349:libcanard/canard.c ****             (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_dat
 1305              		.loc 1 1349 0
 1306 0078 03F808E0 		strb	lr, [r3, r8]
 1307              	.LVL166:
1352:libcanard/canard.c ****         dst_offset += copy_bits;
 1308              		.loc 1 1352 0
 1309 007c 3144     		add	r1, r1, r6
 1310              	.LVL167:
1353:libcanard/canard.c ****     }
 1311              		.loc 1 1353 0
 1312 007e 3744     		add	r7, r7, r6
 1313              	.LVL168:
 1314              	.L121:
 1315              	.LBE15:
1338:libcanard/canard.c ****     {
 1316              		.loc 1 1338 0
 1317 0080 9142     		cmp	r1, r2
 1318 0082 D2D1     		bne	.L122
1355:libcanard/canard.c **** 
 1319              		.loc 1 1355 0
 1320 0084 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1321              	.LVL169:
 1322              	.L126:
 1323              		.align	2
 1324              	.L125:
 1325 0088 00000000 		.word	.LC6
 1326 008c 00000000 		.word	.LANCHOR4
 1327 0090 14000000 		.word	.LC1
 1328              		.cfi_endproc
ARM GAS  /tmp/cc2kQaha.s 			page 54


 1329              	.LFE32:
 1331              		.section	.text.descatterTransferPayload,"ax",%progbits
 1332              		.align	1
 1333              		.syntax unified
 1334              		.thumb
 1335              		.thumb_func
 1336              		.fpu softvfp
 1338              	descatterTransferPayload:
 1339              	.LFB33:
1361:libcanard/canard.c ****     CANARD_ASSERT(transfer != 0);
 1340              		.loc 1 1361 0
 1341              		.cfi_startproc
 1342              		@ args = 0, pretend = 0, frame = 16
 1343              		@ frame_needed = 0, uses_anonymous_args = 0
 1344              	.LVL170:
 1345 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1346              	.LCFI16:
 1347              		.cfi_def_cfa_offset 36
 1348              		.cfi_offset 4, -36
 1349              		.cfi_offset 5, -32
 1350              		.cfi_offset 6, -28
 1351              		.cfi_offset 7, -24
 1352              		.cfi_offset 8, -20
 1353              		.cfi_offset 9, -16
 1354              		.cfi_offset 10, -12
 1355              		.cfi_offset 11, -8
 1356              		.cfi_offset 14, -4
 1357 0004 87B0     		sub	sp, sp, #28
 1358              	.LCFI17:
 1359              		.cfi_def_cfa_offset 64
 1360 0006 0592     		str	r2, [sp, #20]
 1361 0008 0393     		str	r3, [sp, #12]
1362:libcanard/canard.c **** 
 1362              		.loc 1 1362 0
 1363 000a 0490     		str	r0, [sp, #16]
 1364 000c 0028     		cmp	r0, #0
 1365 000e 40D0     		beq	.L155
 1366 0010 8846     		mov	r8, r1
1364:libcanard/canard.c ****     {
 1367              		.loc 1 1364 0
 1368 0012 049B     		ldr	r3, [sp, #16]
 1369              	.LVL171:
 1370 0014 9B8A     		ldrh	r3, [r3, #20]
 1371 0016 DA00     		lsls	r2, r3, #3
 1372              	.LVL172:
 1373 0018 8A42     		cmp	r2, r1
 1374 001a 40F2ED80 		bls	.L150
1369:libcanard/canard.c ****     {
 1375              		.loc 1 1369 0
 1376 001e 0599     		ldr	r1, [sp, #20]
 1377              	.LVL173:
 1378 0020 4144     		add	r1, r1, r8
 1379 0022 8A42     		cmp	r2, r1
 1380 0024 05D2     		bcs	.L130
1371:libcanard/canard.c ****     }
 1381              		.loc 1 1371 0
 1382 0026 D0B2     		uxtb	r0, r2
ARM GAS  /tmp/cc2kQaha.s 			page 55


 1383              	.LVL174:
 1384 0028 5FFA88F3 		uxtb	r3, r8
 1385 002c C01A     		subs	r0, r0, r3
 1386 002e C3B2     		uxtb	r3, r0
 1387 0030 0593     		str	r3, [sp, #20]
 1388              	.LVL175:
 1389              	.L130:
1374:libcanard/canard.c **** 
 1390              		.loc 1 1374 0
 1391 0032 059B     		ldr	r3, [sp, #20]
 1392 0034 002B     		cmp	r3, #0
 1393 0036 33D0     		beq	.L156
1376:libcanard/canard.c ****     {
 1394              		.loc 1 1376 0
 1395 0038 049B     		ldr	r3, [sp, #16]
 1396 003a DB68     		ldr	r3, [r3, #12]
 1397 003c 002B     		cmp	r3, #0
 1398 003e 36D0     		beq	.L157
 1399              	.L132:
 1400              	.LVL176:
 1401              	.LBB16:
1388:libcanard/canard.c ****         {
 1402              		.loc 1 1388 0
 1403 0040 B8F12F0F 		cmp	r8, #47
 1404 0044 44D8     		bhi	.L151
 1405              	.LBB17:
1390:libcanard/canard.c ****                                                 CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input
 1406              		.loc 1 1390 0
 1407 0046 C8F13003 		rsb	r3, r8, #48
 1408 004a 059A     		ldr	r2, [sp, #20]
 1409 004c 9A42     		cmp	r2, r3
 1410 004e 3CD3     		bcc	.L152
1390:libcanard/canard.c ****                                                 CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input
 1411              		.loc 1 1390 0 is_stmt 0 discriminator 1
 1412 0050 5FFA88F3 		uxtb	r3, r8
 1413 0054 C3F13003 		rsb	r3, r3, #48
 1414 0058 DBB2     		uxtb	r3, r3
 1415 005a 0293     		str	r3, [sp, #8]
 1416              	.L135:
 1417              	.LVL177:
1393:libcanard/canard.c **** 
 1418              		.loc 1 1393 0 is_stmt 1 discriminator 4
 1419 005c 049B     		ldr	r3, [sp, #16]
 1420 005e 9868     		ldr	r0, [r3, #8]
 1421 0060 0023     		movs	r3, #0
 1422 0062 0093     		str	r3, [sp]
 1423 0064 039B     		ldr	r3, [sp, #12]
 1424 0066 029C     		ldr	r4, [sp, #8]
 1425 0068 2246     		mov	r2, r4
 1426 006a 4146     		mov	r1, r8
 1427 006c FFF7FEFF 		bl	copyBitArray
 1428              	.LVL178:
1395:libcanard/canard.c ****             output_bit_offset = (uint8_t)(output_bit_offset + amount);
 1429              		.loc 1 1395 0 discriminator 4
 1430 0070 A044     		add	r8, r8, r4
 1431              	.LVL179:
1397:libcanard/canard.c ****         }
ARM GAS  /tmp/cc2kQaha.s 			page 56


 1432              		.loc 1 1397 0 discriminator 4
 1433 0072 059A     		ldr	r2, [sp, #20]
 1434 0074 141B     		subs	r4, r2, r4
 1435              	.LVL180:
 1436 0076 E4B2     		uxtb	r4, r4
 1437              	.LVL181:
 1438              	.L134:
 1439              	.LBE17:
1401:libcanard/canard.c ****         uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 1440              		.loc 1 1401 0
 1441 0078 049B     		ldr	r3, [sp, #16]
 1442 007a 9F8A     		ldrh	r7, [r3, #20]
 1443 007c 07F10057 		add	r7, r7, #536870912
 1444 0080 063F     		subs	r7, r7, #6
 1445 0082 FF00     		lsls	r7, r7, #3
 1446              	.LVL182:
1403:libcanard/canard.c **** 
 1447              		.loc 1 1403 0
 1448 0084 D3F80CA0 		ldr	r10, [r3, #12]
 1449              	.LVL183:
1402:libcanard/canard.c ****         const CanardBufferBlock* block = transfer->payload_middle;
 1450              		.loc 1 1402 0
 1451 0088 4FF03009 		mov	r9, #48
 1452 008c A346     		mov	fp, r4
 1453 008e 5446     		mov	r4, r10
 1454              	.LVL184:
1405:libcanard/canard.c ****         {
 1455              		.loc 1 1405 0
 1456 0090 44E0     		b	.L136
 1457              	.LVL185:
 1458              	.L155:
 1459              	.LBE16:
1362:libcanard/canard.c **** 
 1460              		.loc 1 1362 0 discriminator 1
 1461 0092 5A4B     		ldr	r3, .L166
 1462              	.LVL186:
 1463 0094 5A4A     		ldr	r2, .L166+4
 1464              	.LVL187:
 1465 0096 40F25251 		movw	r1, #1362
 1466              	.LVL188:
 1467 009a 5A48     		ldr	r0, .L166+8
 1468              	.LVL189:
 1469 009c FFF7FEFF 		bl	__assert_func
 1470              	.LVL190:
 1471              	.L156:
1374:libcanard/canard.c **** 
 1472              		.loc 1 1374 0 discriminator 1
 1473 00a0 594B     		ldr	r3, .L166+12
 1474 00a2 574A     		ldr	r2, .L166+4
 1475 00a4 40F25E51 		movw	r1, #1374
 1476 00a8 5648     		ldr	r0, .L166+8
 1477 00aa FFF7FEFF 		bl	__assert_func
 1478              	.LVL191:
 1479              	.L157:
1376:libcanard/canard.c ****     {
 1480              		.loc 1 1376 0 discriminator 1
 1481 00ae 049B     		ldr	r3, [sp, #16]
ARM GAS  /tmp/cc2kQaha.s 			page 57


 1482 00b0 1B69     		ldr	r3, [r3, #16]
 1483 00b2 002B     		cmp	r3, #0
 1484 00b4 C4D1     		bne	.L132
1454:libcanard/canard.c ****     }
 1485              		.loc 1 1454 0
 1486 00b6 049B     		ldr	r3, [sp, #16]
 1487 00b8 9868     		ldr	r0, [r3, #8]
 1488 00ba 0023     		movs	r3, #0
 1489 00bc 0093     		str	r3, [sp]
 1490 00be 039B     		ldr	r3, [sp, #12]
 1491 00c0 059A     		ldr	r2, [sp, #20]
 1492 00c2 4146     		mov	r1, r8
 1493 00c4 FFF7FEFF 		bl	copyBitArray
 1494              	.LVL192:
 1495 00c8 6EE0     		b	.L149
 1496              	.LVL193:
 1497              	.L152:
 1498              	.LBB25:
 1499              	.LBB18:
1390:libcanard/canard.c ****                                                 CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input
 1500              		.loc 1 1390 0
 1501 00ca 059B     		ldr	r3, [sp, #20]
 1502 00cc 0293     		str	r3, [sp, #8]
 1503 00ce C5E7     		b	.L135
 1504              	.L151:
 1505              	.LBE18:
1385:libcanard/canard.c **** 
 1506              		.loc 1 1385 0
 1507 00d0 059C     		ldr	r4, [sp, #20]
1384:libcanard/canard.c ****         uint8_t remaining_bit_length = bit_length;
 1508              		.loc 1 1384 0
 1509 00d2 0023     		movs	r3, #0
 1510 00d4 0293     		str	r3, [sp, #8]
 1511 00d6 CFE7     		b	.L134
 1512              	.LVL194:
 1513              	.L160:
 1514              	.LBB19:
1407:libcanard/canard.c ****             const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_S
 1515              		.loc 1 1407 0 discriminator 1
 1516 00d8 4C4B     		ldr	r3, .L166+16
 1517 00da 494A     		ldr	r2, .L166+4
 1518 00dc 40F27F51 		movw	r1, #1407
 1519 00e0 4848     		ldr	r0, .L166+8
 1520 00e2 FFF7FEFF 		bl	__assert_func
 1521              	.LVL195:
 1522              	.L153:
 1523              	.LBB20:
1414:libcanard/canard.c **** 
 1524              		.loc 1 1414 0
 1525 00e6 5D46     		mov	r5, fp
 1526              	.L139:
 1527              	.LVL196:
1416:libcanard/canard.c ****                 const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 1528              		.loc 1 1416 0 discriminator 4
 1529 00e8 C845     		cmp	r8, r9
 1530 00ea 30D3     		bcc	.L158
 1531              	.LVL197:
ARM GAS  /tmp/cc2kQaha.s 			page 58


1419:libcanard/canard.c **** 
 1532              		.loc 1 1419 0
 1533 00ec 029B     		ldr	r3, [sp, #8]
 1534 00ee 0093     		str	r3, [sp]
 1535 00f0 039B     		ldr	r3, [sp, #12]
 1536 00f2 2A46     		mov	r2, r5
 1537 00f4 A8EB0901 		sub	r1, r8, r9
 1538              	.LVL198:
 1539 00f8 201D     		adds	r0, r4, #4
 1540 00fa FFF7FEFF 		bl	copyBitArray
 1541              	.LVL199:
1421:libcanard/canard.c ****                 output_bit_offset = (uint8_t)(output_bit_offset + amount);
 1542              		.loc 1 1421 0
 1543 00fe A844     		add	r8, r8, r5
 1544              	.LVL200:
1422:libcanard/canard.c ****                 remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 1545              		.loc 1 1422 0
 1546 0100 029B     		ldr	r3, [sp, #8]
 1547 0102 2B44     		add	r3, r3, r5
 1548 0104 DBB2     		uxtb	r3, r3
 1549 0106 0293     		str	r3, [sp, #8]
 1550              	.LVL201:
1423:libcanard/canard.c ****             }
 1551              		.loc 1 1423 0
 1552 0108 ABEB050B 		sub	fp, fp, r5
 1553              	.LVL202:
 1554 010c 5FFA8BFB 		uxtb	fp, fp
 1555              	.LVL203:
 1556              	.L138:
 1557              	.LBE20:
1426:libcanard/canard.c ****             remaining_bits -= block_end_bit_offset - block_bit_offset;
 1558              		.loc 1 1426 0
 1559 0110 B145     		cmp	r9, r6
 1560 0112 23D2     		bcs	.L159
 1561 0114 A7EB0A07 		sub	r7, r7, r10
 1562              	.LVL204:
1429:libcanard/canard.c ****         }
 1563              		.loc 1 1429 0
 1564 0118 2468     		ldr	r4, [r4]
 1565              	.LVL205:
1428:libcanard/canard.c ****             block = block->next;
 1566              		.loc 1 1428 0
 1567 011a B146     		mov	r9, r6
 1568              	.LVL206:
 1569              	.L136:
 1570              	.LBE19:
1405:libcanard/canard.c ****         {
 1571              		.loc 1 1405 0
 1572 011c 2CB3     		cbz	r4, .L142
1405:libcanard/canard.c ****         {
 1573              		.loc 1 1405 0 is_stmt 0 discriminator 1
 1574 011e BBF1000F 		cmp	fp, #0
 1575 0122 22D0     		beq	.L142
 1576              	.LBB22:
1407:libcanard/canard.c ****             const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_S
 1577              		.loc 1 1407 0 is_stmt 1
 1578 0124 002F     		cmp	r7, #0
ARM GAS  /tmp/cc2kQaha.s 			page 59


 1579 0126 D7D0     		beq	.L160
1408:libcanard/canard.c ****                                                                          remaining_bits);
 1580              		.loc 1 1408 0
 1581 0128 BA46     		mov	r10, r7
 1582 012a E02F     		cmp	r7, #224
 1583 012c 28BF     		it	cs
 1584 012e 4FF0E00A 		movcs	r10, #224
 1585 0132 0AEB0906 		add	r6, r10, r9
 1586              	.LVL207:
1412:libcanard/canard.c ****             {
 1587              		.loc 1 1412 0
 1588 0136 B045     		cmp	r8, r6
 1589 0138 EAD2     		bcs	.L138
 1590              	.LBB21:
1414:libcanard/canard.c **** 
 1591              		.loc 1 1414 0
 1592 013a A6EB0803 		sub	r3, r6, r8
 1593 013e 9B45     		cmp	fp, r3
 1594 0140 D1D3     		bcc	.L153
1414:libcanard/canard.c **** 
 1595              		.loc 1 1414 0 is_stmt 0 discriminator 1
 1596 0142 F5B2     		uxtb	r5, r6
 1597 0144 5FFA88F3 		uxtb	r3, r8
 1598 0148 ED1A     		subs	r5, r5, r3
 1599 014a EDB2     		uxtb	r5, r5
 1600 014c CCE7     		b	.L139
 1601              	.LVL208:
 1602              	.L158:
1416:libcanard/canard.c ****                 const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 1603              		.loc 1 1416 0 is_stmt 1 discriminator 1
 1604 014e 304B     		ldr	r3, .L166+20
 1605 0150 2B4A     		ldr	r2, .L166+4
 1606 0152 4FF4B161 		mov	r1, #1416
 1607 0156 2B48     		ldr	r0, .L166+8
 1608 0158 FFF7FEFF 		bl	__assert_func
 1609              	.LVL209:
 1610              	.L159:
 1611              	.LBE21:
1426:libcanard/canard.c ****             remaining_bits -= block_end_bit_offset - block_bit_offset;
 1612              		.loc 1 1426 0 discriminator 1
 1613 015c 2D4B     		ldr	r3, .L166+24
 1614 015e 284A     		ldr	r2, .L166+4
 1615 0160 40F29251 		movw	r1, #1426
 1616 0164 2748     		ldr	r0, .L166+8
 1617 0166 FFF7FEFF 		bl	__assert_func
 1618              	.LVL210:
 1619              	.L142:
 1620 016a 5C46     		mov	r4, fp
 1621              	.LVL211:
 1622              	.LBE22:
1432:libcanard/canard.c **** 
 1623              		.loc 1 1432 0
 1624 016c BB45     		cmp	fp, r7
 1625 016e 20D8     		bhi	.L161
1435:libcanard/canard.c ****         {
 1626              		.loc 1 1435 0
 1627 0170 049B     		ldr	r3, [sp, #16]
ARM GAS  /tmp/cc2kQaha.s 			page 60


 1628 0172 1869     		ldr	r0, [r3, #16]
 1629 0174 78B1     		cbz	r0, .L145
1435:libcanard/canard.c ****         {
 1630              		.loc 1 1435 0 is_stmt 0 discriminator 1
 1631 0176 74B1     		cbz	r4, .L145
 1632              	.LBB23:
1437:libcanard/canard.c ****             const uint32_t offset = input_bit_offset - block_bit_offset;
 1633              		.loc 1 1437 0 is_stmt 1
 1634 0178 C845     		cmp	r8, r9
 1635 017a 21D3     		bcc	.L162
 1636              	.LVL212:
1440:libcanard/canard.c ****                          output_bit_offset);
 1637              		.loc 1 1440 0
 1638 017c 029E     		ldr	r6, [sp, #8]
 1639 017e 0096     		str	r6, [sp]
 1640 0180 039B     		ldr	r3, [sp, #12]
 1641 0182 2246     		mov	r2, r4
 1642 0184 A8EB0901 		sub	r1, r8, r9
 1643              	.LVL213:
 1644 0188 FFF7FEFF 		bl	copyBitArray
 1645              	.LVL214:
1443:libcanard/canard.c ****             output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 1646              		.loc 1 1443 0
 1647 018c D844     		add	r8, r8, fp
 1648              	.LVL215:
1444:libcanard/canard.c ****             remaining_bit_length = 0;
 1649              		.loc 1 1444 0
 1650 018e 3444     		add	r4, r4, r6
 1651 0190 E3B2     		uxtb	r3, r4
 1652 0192 0293     		str	r3, [sp, #8]
 1653              	.LVL216:
1445:libcanard/canard.c ****         }
 1654              		.loc 1 1445 0
 1655 0194 0024     		movs	r4, #0
 1656              	.LVL217:
 1657              	.L145:
 1658              	.LBE23:
1448:libcanard/canard.c ****         CANARD_ASSERT(output_bit_offset <= 64);
 1659              		.loc 1 1448 0
 1660 0196 049B     		ldr	r3, [sp, #16]
 1661 0198 9B8A     		ldrh	r3, [r3, #20]
 1662 019a B8EBC30F 		cmp	r8, r3, lsl #3
 1663 019e 16D8     		bhi	.L163
1449:libcanard/canard.c ****         CANARD_ASSERT(remaining_bit_length == 0);
 1664              		.loc 1 1449 0
 1665 01a0 029B     		ldr	r3, [sp, #8]
 1666 01a2 402B     		cmp	r3, #64
 1667 01a4 1AD8     		bhi	.L164
1450:libcanard/canard.c ****     }
 1668              		.loc 1 1450 0
 1669 01a6 04BB     		cbnz	r4, .L165
 1670              	.LVL218:
 1671              	.L149:
 1672              	.LBE25:
1457:libcanard/canard.c **** }
 1673              		.loc 1 1457 0
 1674 01a8 BDF91400 		ldrsh	r0, [sp, #20]
ARM GAS  /tmp/cc2kQaha.s 			page 61


 1675              	.LVL219:
 1676              	.L129:
1458:libcanard/canard.c **** 
 1677              		.loc 1 1458 0
 1678 01ac 07B0     		add	sp, sp, #28
 1679              	.LCFI18:
 1680              		.cfi_remember_state
 1681              		.cfi_def_cfa_offset 36
 1682              		@ sp needed
 1683 01ae BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1684              	.LVL220:
 1685              	.L161:
 1686              	.LCFI19:
 1687              		.cfi_restore_state
 1688              	.LBB26:
1432:libcanard/canard.c **** 
 1689              		.loc 1 1432 0 discriminator 1
 1690 01b2 194B     		ldr	r3, .L166+28
 1691 01b4 124A     		ldr	r2, .L166+4
 1692 01b6 4FF4B361 		mov	r1, #1432
 1693 01ba 1248     		ldr	r0, .L166+8
 1694 01bc FFF7FEFF 		bl	__assert_func
 1695              	.LVL221:
 1696              	.L162:
 1697              	.LBB24:
1437:libcanard/canard.c ****             const uint32_t offset = input_bit_offset - block_bit_offset;
 1698              		.loc 1 1437 0 discriminator 1
 1699 01c0 134B     		ldr	r3, .L166+20
 1700 01c2 0F4A     		ldr	r2, .L166+4
 1701 01c4 40F29D51 		movw	r1, #1437
 1702 01c8 0E48     		ldr	r0, .L166+8
 1703 01ca FFF7FEFF 		bl	__assert_func
 1704              	.LVL222:
 1705              	.L163:
 1706              	.LBE24:
1448:libcanard/canard.c ****         CANARD_ASSERT(output_bit_offset <= 64);
 1707              		.loc 1 1448 0 discriminator 1
 1708 01ce 134B     		ldr	r3, .L166+32
 1709 01d0 0B4A     		ldr	r2, .L166+4
 1710 01d2 4FF4B561 		mov	r1, #1448
 1711 01d6 0B48     		ldr	r0, .L166+8
 1712 01d8 FFF7FEFF 		bl	__assert_func
 1713              	.LVL223:
 1714              	.L164:
1449:libcanard/canard.c ****         CANARD_ASSERT(remaining_bit_length == 0);
 1715              		.loc 1 1449 0 discriminator 1
 1716 01dc 104B     		ldr	r3, .L166+36
 1717 01de 084A     		ldr	r2, .L166+4
 1718 01e0 40F2A951 		movw	r1, #1449
 1719 01e4 0748     		ldr	r0, .L166+8
 1720 01e6 FFF7FEFF 		bl	__assert_func
 1721              	.LVL224:
 1722              	.L165:
1450:libcanard/canard.c ****     }
 1723              		.loc 1 1450 0 discriminator 1
 1724 01ea 0E4B     		ldr	r3, .L166+40
 1725 01ec 044A     		ldr	r2, .L166+4
ARM GAS  /tmp/cc2kQaha.s 			page 62


 1726 01ee 40F2AA51 		movw	r1, #1450
 1727 01f2 0448     		ldr	r0, .L166+8
 1728 01f4 FFF7FEFF 		bl	__assert_func
 1729              	.LVL225:
 1730              	.L150:
 1731              	.LBE26:
1366:libcanard/canard.c ****     }
 1732              		.loc 1 1366 0
 1733 01f8 0020     		movs	r0, #0
 1734              	.LVL226:
 1735 01fa D7E7     		b	.L129
 1736              	.L167:
 1737              		.align	2
 1738              	.L166:
 1739 01fc 00000000 		.word	.LC7
 1740 0200 00000000 		.word	.LANCHOR5
 1741 0204 14000000 		.word	.LC1
 1742 0208 10000000 		.word	.LC8
 1743 020c 20000000 		.word	.LC9
 1744 0210 34000000 		.word	.LC10
 1745 0214 5C000000 		.word	.LC11
 1746 0218 84000000 		.word	.LC12
 1747 021c AC000000 		.word	.LC13
 1748 0220 DC000000 		.word	.LC14
 1749 0224 F4000000 		.word	.LC15
 1750              		.cfi_endproc
 1751              	.LFE33:
 1753              		.section	.text.swapByteOrder,"ax",%progbits
 1754              		.align	1
 1755              		.syntax unified
 1756              		.thumb
 1757              		.thumb_func
 1758              		.fpu softvfp
 1760              	swapByteOrder:
 1761              	.LFB35:
1476:libcanard/canard.c ****     CANARD_ASSERT(data != NULL);
 1762              		.loc 1 1476 0
 1763              		.cfi_startproc
 1764              		@ args = 0, pretend = 0, frame = 0
 1765              		@ frame_needed = 0, uses_anonymous_args = 0
 1766              	.LVL227:
 1767 0000 10B5     		push	{r4, lr}
 1768              	.LCFI20:
 1769              		.cfi_def_cfa_offset 8
 1770              		.cfi_offset 4, -8
 1771              		.cfi_offset 14, -4
1477:libcanard/canard.c **** 
 1772              		.loc 1 1477 0
 1773 0002 18B1     		cbz	r0, .L173
 1774 0004 0246     		mov	r2, r0
 1775              	.LVL228:
1482:libcanard/canard.c **** 
 1776              		.loc 1 1482 0
 1777 0006 0139     		subs	r1, r1, #1
 1778              	.LVL229:
1481:libcanard/canard.c ****     size_t rev = size - 1;
 1779              		.loc 1 1481 0
ARM GAS  /tmp/cc2kQaha.s 			page 63


 1780 0008 0023     		movs	r3, #0
1484:libcanard/canard.c ****     {
 1781              		.loc 1 1484 0
 1782 000a 0CE0     		b	.L170
 1783              	.LVL230:
 1784              	.L173:
1477:libcanard/canard.c **** 
 1785              		.loc 1 1477 0 discriminator 1
 1786 000c 074B     		ldr	r3, .L174
 1787 000e 084A     		ldr	r2, .L174+4
 1788 0010 40F2C551 		movw	r1, #1477
 1789              	.LVL231:
 1790 0014 0748     		ldr	r0, .L174+8
 1791              	.LVL232:
 1792 0016 FFF7FEFF 		bl	__assert_func
 1793              	.LVL233:
 1794              	.L171:
 1795              	.LBB27:
1486:libcanard/canard.c ****         bytes[fwd] = bytes[rev];
 1796              		.loc 1 1486 0
 1797 001a D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 1798              	.LVL234:
1487:libcanard/canard.c ****         bytes[rev] = x;
 1799              		.loc 1 1487 0
 1800 001c 545C     		ldrb	r4, [r2, r1]	@ zero_extendqisi2
 1801 001e D454     		strb	r4, [r2, r3]
1488:libcanard/canard.c ****         fwd++;
 1802              		.loc 1 1488 0
 1803 0020 5054     		strb	r0, [r2, r1]
1489:libcanard/canard.c ****         rev--;
 1804              		.loc 1 1489 0
 1805 0022 0133     		adds	r3, r3, #1
 1806              	.LVL235:
1490:libcanard/canard.c ****     }
 1807              		.loc 1 1490 0
 1808 0024 0139     		subs	r1, r1, #1
 1809              	.LVL236:
 1810              	.L170:
 1811              	.LBE27:
1484:libcanard/canard.c ****     {
 1812              		.loc 1 1484 0
 1813 0026 8B42     		cmp	r3, r1
 1814 0028 F7D3     		bcc	.L171
1492:libcanard/canard.c **** 
 1815              		.loc 1 1492 0
 1816 002a 10BD     		pop	{r4, pc}
 1817              	.L175:
 1818              		.align	2
 1819              	.L174:
 1820 002c 00000000 		.word	.LC16
 1821 0030 00000000 		.word	.LANCHOR6
 1822 0034 14000000 		.word	.LC1
 1823              		.cfi_endproc
 1824              	.LFE35:
 1826              		.section	.text.createTxItem,"ax",%progbits
 1827              		.align	1
 1828              		.syntax unified
ARM GAS  /tmp/cc2kQaha.s 			page 64


 1829              		.thumb
 1830              		.thumb_func
 1831              		.fpu softvfp
 1833              	createTxItem:
 1834              	.LFB20:
1004:libcanard/canard.c ****     CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 1835              		.loc 1 1004 0
 1836              		.cfi_startproc
 1837              		@ args = 0, pretend = 0, frame = 0
 1838              		@ frame_needed = 0, uses_anonymous_args = 0
 1839              	.LVL237:
 1840 0000 08B5     		push	{r3, lr}
 1841              	.LCFI21:
 1842              		.cfi_def_cfa_offset 8
 1843              		.cfi_offset 3, -8
 1844              		.cfi_offset 14, -4
1005:libcanard/canard.c ****     if (item == NULL)
 1845              		.loc 1 1005 0
 1846 0002 FFF7FEFF 		bl	allocateBlock
 1847              	.LVL238:
1006:libcanard/canard.c ****     {
 1848              		.loc 1 1006 0
 1849 0006 0346     		mov	r3, r0
 1850 0008 28B1     		cbz	r0, .L176
1010:libcanard/canard.c ****     return item;
 1851              		.loc 1 1010 0
 1852 000a 0022     		movs	r2, #0
 1853 000c 0260     		str	r2, [r0]	@ unaligned
 1854 000e 4260     		str	r2, [r0, #4]	@ unaligned
 1855 0010 8260     		str	r2, [r0, #8]	@ unaligned
 1856 0012 C260     		str	r2, [r0, #12]	@ unaligned
 1857 0014 0261     		str	r2, [r0, #16]	@ unaligned
 1858              	.L176:
1012:libcanard/canard.c **** 
 1859              		.loc 1 1012 0
 1860 0016 1846     		mov	r0, r3
 1861              	.LVL239:
 1862 0018 08BD     		pop	{r3, pc}
 1863              		.cfi_endproc
 1864              	.LFE20:
 1866              		.section	.text.enqueueTxFrames,"ax",%progbits
 1867              		.align	1
 1868              		.syntax unified
 1869              		.thumb
 1870              		.thumb_func
 1871              		.fpu softvfp
 1873              	enqueueTxFrames:
 1874              	.LFB18:
 868:libcanard/canard.c ****     CANARD_ASSERT(ins != NULL);
 1875              		.loc 1 868 0
 1876              		.cfi_startproc
 1877              		@ args = 8, pretend = 0, frame = 8
 1878              		@ frame_needed = 0, uses_anonymous_args = 0
 1879              	.LVL240:
 1880 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1881              	.LCFI22:
 1882              		.cfi_def_cfa_offset 36
ARM GAS  /tmp/cc2kQaha.s 			page 65


 1883              		.cfi_offset 4, -36
 1884              		.cfi_offset 5, -32
 1885              		.cfi_offset 6, -28
 1886              		.cfi_offset 7, -24
 1887              		.cfi_offset 8, -20
 1888              		.cfi_offset 9, -16
 1889              		.cfi_offset 10, -12
 1890              		.cfi_offset 11, -8
 1891              		.cfi_offset 14, -4
 1892 0004 83B0     		sub	sp, sp, #12
 1893              	.LCFI23:
 1894              		.cfi_def_cfa_offset 48
 1895 0006 0193     		str	r3, [sp, #4]
 1896 0008 0C9E     		ldr	r6, [sp, #48]
 1897 000a BDF83450 		ldrh	r5, [sp, #52]
 869:libcanard/canard.c ****     CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared
 1898              		.loc 1 869 0
 1899 000e 0090     		str	r0, [sp]
 1900 0010 90B1     		cbz	r0, .L198
 1901 0012 8A46     		mov	r10, r1
 1902 0014 9346     		mov	fp, r2
 870:libcanard/canard.c **** 
 1903              		.loc 1 870 0
 1904 0016 11F0604F 		tst	r1, #-536870912
 1905 001a 14D1     		bne	.L199
 872:libcanard/canard.c ****     {
 1906              		.loc 1 872 0
 1907 001c 002A     		cmp	r2, #0
 1908 001e 7BD0     		beq	.L191
 877:libcanard/canard.c ****     {
 1909              		.loc 1 877 0
 1910 0020 0DB1     		cbz	r5, .L183
 877:libcanard/canard.c ****     {
 1911              		.loc 1 877 0 is_stmt 0 discriminator 1
 1912 0022 002E     		cmp	r6, #0
 1913 0024 7BD0     		beq	.L192
 1914              	.L183:
 1915              	.LVL241:
 884:libcanard/canard.c ****     {
 1916              		.loc 1 884 0 is_stmt 1
 1917 0026 072D     		cmp	r5, #7
 1918 0028 14D9     		bls	.L200
 1919              	.LBB28:
 905:libcanard/canard.c **** 
 1920              		.loc 1 905 0
 1921 002a 4FF08009 		mov	r9, #128
 904:libcanard/canard.c ****         uint8_t sot_eot = 0x80;
 1922              		.loc 1 904 0
 1923 002e 4FF00008 		mov	r8, #0
 903:libcanard/canard.c ****         uint8_t toggle = 0;
 1924              		.loc 1 903 0
 1925 0032 4446     		mov	r4, r8
 1926              	.LBE28:
 882:libcanard/canard.c **** 
 1927              		.loc 1 882 0
 1928 0034 4746     		mov	r7, r8
 1929 0036 5BE0     		b	.L184
ARM GAS  /tmp/cc2kQaha.s 			page 66


 1930              	.LVL242:
 1931              	.L198:
 869:libcanard/canard.c ****     CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared
 1932              		.loc 1 869 0 discriminator 1
 1933 0038 3D4B     		ldr	r3, .L202
 1934              	.LVL243:
 1935 003a 3E4A     		ldr	r2, .L202+4
 1936              	.LVL244:
 1937 003c 40F26531 		movw	r1, #869
 1938              	.LVL245:
 1939 0040 3D48     		ldr	r0, .L202+8
 1940              	.LVL246:
 1941 0042 FFF7FEFF 		bl	__assert_func
 1942              	.LVL247:
 1943              	.L199:
 870:libcanard/canard.c **** 
 1944              		.loc 1 870 0 discriminator 1
 1945 0046 3D4B     		ldr	r3, .L202+12
 1946              	.LVL248:
 1947 0048 3A4A     		ldr	r2, .L202+4
 1948              	.LVL249:
 1949 004a 40F26631 		movw	r1, #870
 1950              	.LVL250:
 1951 004e 3A48     		ldr	r0, .L202+8
 1952              	.LVL251:
 1953 0050 FFF7FEFF 		bl	__assert_func
 1954              	.LVL252:
 1955              	.L200:
 1956              	.LBB32:
 886:libcanard/canard.c ****         if (queue_item == NULL)
 1957              		.loc 1 886 0
 1958 0054 009F     		ldr	r7, [sp]
 1959 0056 07F10C00 		add	r0, r7, #12
 1960              	.LVL253:
 1961 005a FFF7FEFF 		bl	createTxItem
 1962              	.LVL254:
 887:libcanard/canard.c ****         {
 1963              		.loc 1 887 0
 1964 005e 0446     		mov	r4, r0
 1965 0060 0028     		cmp	r0, #0
 1966 0062 5FD0     		beq	.L194
 892:libcanard/canard.c **** 
 1967              		.loc 1 892 0
 1968 0064 2A46     		mov	r2, r5
 1969 0066 3146     		mov	r1, r6
 1970 0068 0830     		adds	r0, r0, #8
 1971              	.LVL255:
 1972 006a FFF7FEFF 		bl	memcpy
 1973              	.LVL256:
 894:libcanard/canard.c ****         queue_item->frame.data[payload_len] = (uint8_t)(0xC0U | (*transfer_id & 31U));
 1974              		.loc 1 894 0
 1975 006e 6B1C     		adds	r3, r5, #1
 1976 0070 2374     		strb	r3, [r4, #16]
 895:libcanard/canard.c ****         queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 1977              		.loc 1 895 0
 1978 0072 9BF80030 		ldrb	r3, [fp]	@ zero_extendqisi2
 1979 0076 03F01F03 		and	r3, r3, #31
ARM GAS  /tmp/cc2kQaha.s 			page 67


 1980 007a 43F0C003 		orr	r3, r3, #192
 1981 007e 2544     		add	r5, r5, r4
 1982 0080 2B72     		strb	r3, [r5, #8]
 896:libcanard/canard.c **** 
 1983              		.loc 1 896 0
 1984 0082 4AF00043 		orr	r3, r10, #-2147483648
 1985 0086 6360     		str	r3, [r4, #4]
 898:libcanard/canard.c ****         result++;
 1986              		.loc 1 898 0
 1987 0088 2146     		mov	r1, r4
 1988 008a 3846     		mov	r0, r7
 1989 008c FFF7FEFF 		bl	pushTxQueue
 1990              	.LVL257:
 899:libcanard/canard.c ****     }
 1991              		.loc 1 899 0
 1992 0090 0127     		movs	r7, #1
 1993              	.LVL258:
 1994              	.L182:
 1995              	.LBE32:
 949:libcanard/canard.c **** 
 1996              		.loc 1 949 0
 1997 0092 3846     		mov	r0, r7
 1998 0094 03B0     		add	sp, sp, #12
 1999              	.LCFI24:
 2000              		.cfi_remember_state
 2001              		.cfi_def_cfa_offset 36
 2002              	.LVL259:
 2003              		@ sp needed
 2004 0096 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2005              	.LVL260:
 2006              	.L196:
 2007              	.LCFI25:
 2008              		.cfi_restore_state
 2009              	.LBB33:
 2010              	.LBB29:
 927:libcanard/canard.c ****             }
 2011              		.loc 1 927 0
 2012 009a 0023     		movs	r3, #0
 2013 009c 06E0     		b	.L186
 2014              	.LVL261:
 2015              	.L188:
 932:libcanard/canard.c ****             }
 2016              		.loc 1 932 0 discriminator 3
 2017 009e 305D     		ldrb	r0, [r6, r4]	@ zero_extendqisi2
 2018 00a0 CA18     		adds	r2, r1, r3
 2019 00a2 1072     		strb	r0, [r2, #8]
 930:libcanard/canard.c ****             {
 2020              		.loc 1 930 0 discriminator 3
 2021 00a4 0133     		adds	r3, r3, #1
 2022              	.LVL262:
 2023 00a6 DBB2     		uxtb	r3, r3
 2024              	.LVL263:
 2025 00a8 0134     		adds	r4, r4, #1
 2026              	.LVL264:
 2027 00aa A4B2     		uxth	r4, r4
 2028              	.LVL265:
 2029              	.L186:
ARM GAS  /tmp/cc2kQaha.s 			page 68


 930:libcanard/canard.c ****             {
 2030              		.loc 1 930 0 is_stmt 0 discriminator 1
 2031 00ac 062B     		cmp	r3, #6
 2032 00ae 01D8     		bhi	.L187
 930:libcanard/canard.c ****             {
 2033              		.loc 1 930 0 discriminator 2
 2034 00b0 AC42     		cmp	r4, r5
 2035 00b2 F4D3     		bcc	.L188
 2036              	.L187:
 935:libcanard/canard.c **** 
 2037              		.loc 1 935 0 is_stmt 1
 2038 00b4 AC42     		cmp	r4, r5
 2039 00b6 2CD0     		beq	.L201
 2040              	.LVL266:
 2041              	.L189:
 937:libcanard/canard.c ****             queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 2042              		.loc 1 937 0 discriminator 4
 2043 00b8 4FEA4812 		lsl	r2, r8, #5
 2044 00bc D2B2     		uxtb	r2, r2
 2045 00be 42EA0909 		orr	r9, r2, r9
 2046              	.LVL267:
 2047 00c2 9BF80020 		ldrb	r2, [fp]	@ zero_extendqisi2
 2048 00c6 02F01F02 		and	r2, r2, #31
 2049 00ca 49EA0209 		orr	r9, r9, r2
 2050 00ce CA18     		adds	r2, r1, r3
 2051 00d0 82F80890 		strb	r9, [r2, #8]
 938:libcanard/canard.c ****             queue_item->frame.data_len = (uint8_t)(i + 1);
 2052              		.loc 1 938 0 discriminator 4
 2053 00d4 4AF00042 		orr	r2, r10, #-2147483648
 2054 00d8 4A60     		str	r2, [r1, #4]
 939:libcanard/canard.c ****             pushTxQueue(ins, queue_item);
 2055              		.loc 1 939 0 discriminator 4
 2056 00da 0133     		adds	r3, r3, #1
 2057              	.LVL268:
 2058 00dc 0B74     		strb	r3, [r1, #16]
 940:libcanard/canard.c **** 
 2059              		.loc 1 940 0 discriminator 4
 2060 00de 0098     		ldr	r0, [sp]
 2061 00e0 FFF7FEFF 		bl	pushTxQueue
 2062              	.LVL269:
 942:libcanard/canard.c ****             toggle ^= 1;
 2063              		.loc 1 942 0 discriminator 4
 2064 00e4 0137     		adds	r7, r7, #1
 2065              	.LVL270:
 2066 00e6 3FB2     		sxth	r7, r7
 2067              	.LVL271:
 943:libcanard/canard.c ****             sot_eot = 0;
 2068              		.loc 1 943 0 discriminator 4
 2069 00e8 88F00108 		eor	r8, r8, #1
 2070              	.LVL272:
 944:libcanard/canard.c ****         }
 2071              		.loc 1 944 0 discriminator 4
 2072 00ec 4FF00009 		mov	r9, #0
 2073              	.LVL273:
 2074              	.L184:
 2075              	.LBE29:
 909:libcanard/canard.c ****         {
ARM GAS  /tmp/cc2kQaha.s 			page 69


 2076              		.loc 1 909 0
 2077 00f0 AC42     		cmp	r4, r5
 2078 00f2 CED0     		beq	.L182
 2079              	.LBB30:
 911:libcanard/canard.c ****             if (queue_item == NULL)
 2080              		.loc 1 911 0
 2081 00f4 009B     		ldr	r3, [sp]
 2082 00f6 03F10C00 		add	r0, r3, #12
 2083 00fa FFF7FEFF 		bl	createTxItem
 2084              	.LVL274:
 912:libcanard/canard.c ****             {
 2085              		.loc 1 912 0
 2086 00fe 0146     		mov	r1, r0
 2087 0100 98B1     		cbz	r0, .L195
 2088              	.LVL275:
 918:libcanard/canard.c ****             {
 2089              		.loc 1 918 0
 2090 0102 002C     		cmp	r4, #0
 2091 0104 C9D1     		bne	.L196
 921:libcanard/canard.c ****                 queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 2092              		.loc 1 921 0
 2093 0106 019A     		ldr	r2, [sp, #4]
 2094 0108 0A72     		strb	r2, [r1, #8]
 922:libcanard/canard.c ****                 i = 2;
 2095              		.loc 1 922 0
 2096 010a 130A     		lsrs	r3, r2, #8
 2097 010c 4372     		strb	r3, [r0, #9]
 2098              	.LVL276:
 923:libcanard/canard.c ****             }
 2099              		.loc 1 923 0
 2100 010e 0223     		movs	r3, #2
 2101 0110 CCE7     		b	.L186
 2102              	.LVL277:
 2103              	.L201:
 935:libcanard/canard.c **** 
 2104              		.loc 1 935 0
 2105 0112 4FF04009 		mov	r9, #64
 2106              	.LVL278:
 2107 0116 CFE7     		b	.L189
 2108              	.LVL279:
 2109              	.L191:
 2110              	.LBE30:
 2111              	.LBE33:
 874:libcanard/canard.c ****     }
 2112              		.loc 1 874 0
 2113 0118 6FF00107 		mvn	r7, #1
 2114 011c B9E7     		b	.L182
 2115              	.L192:
 879:libcanard/canard.c ****     }
 2116              		.loc 1 879 0
 2117 011e 6FF00107 		mvn	r7, #1
 2118 0122 B6E7     		b	.L182
 2119              	.LVL280:
 2120              	.L194:
 2121              	.LBB34:
 889:libcanard/canard.c ****         }
 2122              		.loc 1 889 0
ARM GAS  /tmp/cc2kQaha.s 			page 70


 2123 0124 6FF00207 		mvn	r7, #2
 2124 0128 B3E7     		b	.L182
 2125              	.LVL281:
 2126              	.L195:
 2127              	.LBE34:
 2128              	.LBB35:
 2129              	.LBB31:
 914:libcanard/canard.c ****             }
 2130              		.loc 1 914 0
 2131 012a 6FF00207 		mvn	r7, #2
 2132              	.LVL282:
 2133 012e B0E7     		b	.L182
 2134              	.L203:
 2135              		.align	2
 2136              	.L202:
 2137 0130 00000000 		.word	.LC0
 2138 0134 00000000 		.word	.LANCHOR7
 2139 0138 14000000 		.word	.LC1
 2140 013c 00000000 		.word	.LC17
 2141              	.LBE31:
 2142              	.LBE35:
 2143              		.cfi_endproc
 2144              	.LFE18:
 2146              		.section	.text.createRxState,"ax",%progbits
 2147              		.align	1
 2148              		.syntax unified
 2149              		.thumb
 2150              		.thumb_func
 2151              		.fpu softvfp
 2153              	createRxState:
 2154              	.LFB28:
1178:libcanard/canard.c ****     CanardRxState init = {
 2155              		.loc 1 1178 0
 2156              		.cfi_startproc
 2157              		@ args = 0, pretend = 0, frame = 32
 2158              		@ frame_needed = 0, uses_anonymous_args = 0
 2159              	.LVL283:
 2160 0000 30B5     		push	{r4, r5, lr}
 2161              	.LCFI26:
 2162              		.cfi_def_cfa_offset 12
 2163              		.cfi_offset 4, -12
 2164              		.cfi_offset 5, -8
 2165              		.cfi_offset 14, -4
 2166 0002 89B0     		sub	sp, sp, #36
 2167              	.LCFI27:
 2168              		.cfi_def_cfa_offset 48
 2169 0004 0446     		mov	r4, r0
 2170 0006 0D46     		mov	r5, r1
1179:libcanard/canard.c ****         .next = NULL,
 2171              		.loc 1 1179 0
 2172 0008 2022     		movs	r2, #32
 2173 000a 0021     		movs	r1, #0
 2174              	.LVL284:
 2175 000c 6846     		mov	r0, sp
 2176              	.LVL285:
 2177 000e FFF7FEFF 		bl	memset
 2178              	.LVL286:
ARM GAS  /tmp/cc2kQaha.s 			page 71


 2179 0012 0495     		str	r5, [sp, #16]
1185:libcanard/canard.c ****     if (state == NULL)
 2180              		.loc 1 1185 0
 2181 0014 2046     		mov	r0, r4
 2182 0016 FFF7FEFF 		bl	allocateBlock
 2183              	.LVL287:
1186:libcanard/canard.c ****     {
 2184              		.loc 1 1186 0
 2185 001a 0546     		mov	r5, r0
 2186              	.LVL288:
 2187 001c 50B1     		cbz	r0, .L204
1190:libcanard/canard.c **** 
 2188              		.loc 1 1190 0
 2189 001e 6C46     		mov	r4, sp
 2190              	.LVL289:
 2191 0020 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 2192              	.LVL290:
 2193 0022 2860     		str	r0, [r5]	@ unaligned
 2194 0024 6960     		str	r1, [r5, #4]	@ unaligned
 2195 0026 AA60     		str	r2, [r5, #8]	@ unaligned
 2196 0028 EB60     		str	r3, [r5, #12]	@ unaligned
 2197 002a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 2198 002c 2861     		str	r0, [r5, #16]	@ unaligned
 2199 002e 6961     		str	r1, [r5, #20]	@ unaligned
 2200 0030 AA61     		str	r2, [r5, #24]	@ unaligned
 2201 0032 EB61     		str	r3, [r5, #28]	@ unaligned
 2202              	.L204:
1193:libcanard/canard.c **** 
 2203              		.loc 1 1193 0
 2204 0034 2846     		mov	r0, r5
 2205 0036 09B0     		add	sp, sp, #36
 2206              	.LCFI28:
 2207              		.cfi_def_cfa_offset 12
 2208              		@ sp needed
 2209 0038 30BD     		pop	{r4, r5, pc}
 2210              		.cfi_endproc
 2211              	.LFE28:
 2213              		.section	.text.prependRxState,"ax",%progbits
 2214              		.align	1
 2215              		.syntax unified
 2216              		.thumb
 2217              		.thumb_func
 2218              		.fpu softvfp
 2220              	prependRxState:
 2221              	.LFB27:
1164:libcanard/canard.c ****     CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 2222              		.loc 1 1164 0
 2223              		.cfi_startproc
 2224              		@ args = 0, pretend = 0, frame = 0
 2225              		@ frame_needed = 0, uses_anonymous_args = 0
 2226              	.LVL291:
 2227 0000 10B5     		push	{r4, lr}
 2228              	.LCFI29:
 2229              		.cfi_def_cfa_offset 8
 2230              		.cfi_offset 4, -8
 2231              		.cfi_offset 14, -4
 2232 0002 0446     		mov	r4, r0
ARM GAS  /tmp/cc2kQaha.s 			page 72


1165:libcanard/canard.c **** 
 2233              		.loc 1 1165 0
 2234 0004 0C30     		adds	r0, r0, #12
 2235              	.LVL292:
 2236 0006 FFF7FEFF 		bl	createRxState
 2237              	.LVL293:
1167:libcanard/canard.c ****     {
 2238              		.loc 1 1167 0
 2239 000a 0346     		mov	r3, r0
 2240 000c 10B1     		cbz	r0, .L207
1172:libcanard/canard.c ****     ins->rx_states = state;
 2241              		.loc 1 1172 0
 2242 000e A269     		ldr	r2, [r4, #24]
 2243 0010 0260     		str	r2, [r0]
1173:libcanard/canard.c ****     return state;
 2244              		.loc 1 1173 0
 2245 0012 A061     		str	r0, [r4, #24]
 2246              	.L207:
1175:libcanard/canard.c **** 
 2247              		.loc 1 1175 0
 2248 0014 1846     		mov	r0, r3
 2249              	.LVL294:
 2250 0016 10BD     		pop	{r4, pc}
 2251              		.cfi_endproc
 2252              	.LFE27:
 2254              		.section	.text.traverseRxStates,"ax",%progbits
 2255              		.align	1
 2256              		.syntax unified
 2257              		.thumb
 2258              		.thumb_func
 2259              		.fpu softvfp
 2261              	traverseRxStates:
 2262              	.LFB25:
1117:libcanard/canard.c ****     CanardRxState* states = ins->rx_states;
 2263              		.loc 1 1117 0
 2264              		.cfi_startproc
 2265              		@ args = 0, pretend = 0, frame = 0
 2266              		@ frame_needed = 0, uses_anonymous_args = 0
 2267              	.LVL295:
 2268 0000 38B5     		push	{r3, r4, r5, lr}
 2269              	.LCFI30:
 2270              		.cfi_def_cfa_offset 16
 2271              		.cfi_offset 3, -16
 2272              		.cfi_offset 4, -12
 2273              		.cfi_offset 5, -8
 2274              		.cfi_offset 14, -4
 2275 0002 0446     		mov	r4, r0
 2276 0004 0D46     		mov	r5, r1
1118:libcanard/canard.c **** 
 2277              		.loc 1 1118 0
 2278 0006 8069     		ldr	r0, [r0, #24]
 2279              	.LVL296:
1120:libcanard/canard.c ****     {
 2280              		.loc 1 1120 0
 2281 0008 28B1     		cbz	r0, .L214
1133:libcanard/canard.c ****     if (states != NULL)
 2282              		.loc 1 1133 0
ARM GAS  /tmp/cc2kQaha.s 			page 73


 2283 000a FFF7FEFF 		bl	findRxState
 2284              	.LVL297:
1134:libcanard/canard.c ****     {
 2285              		.loc 1 1134 0
 2286 000e 0346     		mov	r3, r0
 2287 0010 50B1     		cbz	r0, .L215
 2288              	.LVL298:
 2289              	.L210:
1142:libcanard/canard.c **** 
 2290              		.loc 1 1142 0
 2291 0012 1846     		mov	r0, r3
 2292 0014 38BD     		pop	{r3, r4, r5, pc}
 2293              	.LVL299:
 2294              	.L214:
1122:libcanard/canard.c ****         
 2295              		.loc 1 1122 0
 2296 0016 04F10C00 		add	r0, r4, #12
 2297              	.LVL300:
 2298 001a FFF7FEFF 		bl	createRxState
 2299              	.LVL301:
1124:libcanard/canard.c ****         {
 2300              		.loc 1 1124 0
 2301 001e 0346     		mov	r3, r0
 2302 0020 0028     		cmp	r0, #0
 2303 0022 F6D0     		beq	.L210
1129:libcanard/canard.c ****         return states;
 2304              		.loc 1 1129 0
 2305 0024 A061     		str	r0, [r4, #24]
1130:libcanard/canard.c ****     }
 2306              		.loc 1 1130 0
 2307 0026 F4E7     		b	.L210
 2308              	.L215:
1140:libcanard/canard.c ****     }
 2309              		.loc 1 1140 0
 2310 0028 2946     		mov	r1, r5
 2311 002a 2046     		mov	r0, r4
 2312              	.LVL302:
 2313 002c FFF7FEFF 		bl	prependRxState
 2314              	.LVL303:
 2315 0030 0346     		mov	r3, r0
 2316 0032 EEE7     		b	.L210
 2317              		.cfi_endproc
 2318              	.LFE25:
 2320              		.section	.text.canardInit,"ax",%progbits
 2321              		.align	1
 2322              		.global	canardInit
 2323              		.syntax unified
 2324              		.thumb
 2325              		.thumb_func
 2326              		.fpu softvfp
 2328              	canardInit:
 2329              	.LFB0:
  78:libcanard/canard.c ****     CANARD_ASSERT(out_ins != NULL);
 2330              		.loc 1 78 0
 2331              		.cfi_startproc
 2332              		@ args = 8, pretend = 0, frame = 0
 2333              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc2kQaha.s 			page 74


 2334              	.LVL304:
 2335 0000 10B5     		push	{r4, lr}
 2336              	.LCFI31:
 2337              		.cfi_def_cfa_offset 8
 2338              		.cfi_offset 4, -8
 2339              		.cfi_offset 14, -4
  79:libcanard/canard.c **** 
 2340              		.loc 1 79 0
 2341 0002 C8B1     		cbz	r0, .L221
 2342 0004 0446     		mov	r4, r0
  89:libcanard/canard.c **** 
 2343              		.loc 1 89 0
 2344 0006 0020     		movs	r0, #0
 2345              	.LVL305:
 2346 0008 2060     		str	r0, [r4]	@ unaligned
 2347 000a E060     		str	r0, [r4, #12]	@ unaligned
 2348 000c 2061     		str	r0, [r4, #16]	@ unaligned
 2349 000e 6061     		str	r0, [r4, #20]	@ unaligned
  91:libcanard/canard.c ****     out_ins->on_reception = on_reception;
 2350              		.loc 1 91 0
 2351 0010 2070     		strb	r0, [r4]
  92:libcanard/canard.c ****     out_ins->should_accept = should_accept;
 2352              		.loc 1 92 0
 2353 0012 A360     		str	r3, [r4, #8]
  93:libcanard/canard.c ****     out_ins->rx_states = NULL;
 2354              		.loc 1 93 0
 2355 0014 029B     		ldr	r3, [sp, #8]
 2356              	.LVL306:
 2357 0016 6360     		str	r3, [r4, #4]
  94:libcanard/canard.c ****     out_ins->tx_queue = NULL;
 2358              		.loc 1 94 0
 2359 0018 A061     		str	r0, [r4, #24]
  95:libcanard/canard.c ****     out_ins->user_reference = user_reference;
 2360              		.loc 1 95 0
 2361 001a E061     		str	r0, [r4, #28]
  96:libcanard/canard.c **** 
 2362              		.loc 1 96 0
 2363 001c 039B     		ldr	r3, [sp, #12]
 2364 001e 2362     		str	r3, [r4, #32]
  98:libcanard/canard.c ****     if (pool_capacity > 0xFFFFU)
 2365              		.loc 1 98 0
 2366 0020 5209     		lsrs	r2, r2, #5
 2367              	.LVL307:
  99:libcanard/canard.c ****     {
 2368              		.loc 1 99 0
 2369 0022 B2F5803F 		cmp	r2, #65536
 2370 0026 01D3     		bcc	.L218
 101:libcanard/canard.c ****     }
 2371              		.loc 1 101 0
 2372 0028 4FF6FF72 		movw	r2, #65535
 2373              	.LVL308:
 2374              	.L218:
 104:libcanard/canard.c **** }
 2375              		.loc 1 104 0
 2376 002c 92B2     		uxth	r2, r2
 2377              	.LVL309:
 2378 002e 04F10C00 		add	r0, r4, #12
ARM GAS  /tmp/cc2kQaha.s 			page 75


 2379 0032 FFF7FEFF 		bl	initPoolAllocator
 2380              	.LVL310:
 105:libcanard/canard.c **** 
 2381              		.loc 1 105 0
 2382 0036 10BD     		pop	{r4, pc}
 2383              	.LVL311:
 2384              	.L221:
  79:libcanard/canard.c **** 
 2385              		.loc 1 79 0 discriminator 1
 2386 0038 024B     		ldr	r3, .L222
 2387              	.LVL312:
 2388 003a 034A     		ldr	r2, .L222+4
 2389              	.LVL313:
 2390 003c 4F21     		movs	r1, #79
 2391              	.LVL314:
 2392 003e 0348     		ldr	r0, .L222+8
 2393              	.LVL315:
 2394 0040 FFF7FEFF 		bl	__assert_func
 2395              	.LVL316:
 2396              	.L223:
 2397              		.align	2
 2398              	.L222:
 2399 0044 00000000 		.word	.LC18
 2400 0048 00000000 		.word	.LANCHOR8
 2401 004c 14000000 		.word	.LC1
 2402              		.cfi_endproc
 2403              	.LFE0:
 2405              		.section	.text.canardGetUserReference,"ax",%progbits
 2406              		.align	1
 2407              		.global	canardGetUserReference
 2408              		.syntax unified
 2409              		.thumb
 2410              		.thumb_func
 2411              		.fpu softvfp
 2413              	canardGetUserReference:
 2414              	.LFB1:
 108:libcanard/canard.c ****     CANARD_ASSERT(ins != NULL);
 2415              		.loc 1 108 0
 2416              		.cfi_startproc
 2417              		@ args = 0, pretend = 0, frame = 0
 2418              		@ frame_needed = 0, uses_anonymous_args = 0
 2419              	.LVL317:
 2420 0000 08B5     		push	{r3, lr}
 2421              	.LCFI32:
 2422              		.cfi_def_cfa_offset 8
 2423              		.cfi_offset 3, -8
 2424              		.cfi_offset 14, -4
 109:libcanard/canard.c ****     return ins->user_reference;
 2425              		.loc 1 109 0
 2426 0002 08B1     		cbz	r0, .L227
 111:libcanard/canard.c **** 
 2427              		.loc 1 111 0
 2428 0004 006A     		ldr	r0, [r0, #32]
 2429              	.LVL318:
 2430 0006 08BD     		pop	{r3, pc}
 2431              	.LVL319:
 2432              	.L227:
ARM GAS  /tmp/cc2kQaha.s 			page 76


 109:libcanard/canard.c ****     return ins->user_reference;
 2433              		.loc 1 109 0 discriminator 1
 2434 0008 024B     		ldr	r3, .L228
 2435 000a 034A     		ldr	r2, .L228+4
 2436 000c 6D21     		movs	r1, #109
 2437 000e 0348     		ldr	r0, .L228+8
 2438              	.LVL320:
 2439 0010 FFF7FEFF 		bl	__assert_func
 2440              	.LVL321:
 2441              	.L229:
 2442              		.align	2
 2443              	.L228:
 2444 0014 00000000 		.word	.LC0
 2445 0018 00000000 		.word	.LANCHOR9
 2446 001c 14000000 		.word	.LC1
 2447              		.cfi_endproc
 2448              	.LFE1:
 2450              		.section	.text.canardSetLocalNodeID,"ax",%progbits
 2451              		.align	1
 2452              		.global	canardSetLocalNodeID
 2453              		.syntax unified
 2454              		.thumb
 2455              		.thumb_func
 2456              		.fpu softvfp
 2458              	canardSetLocalNodeID:
 2459              	.LFB2:
 114:libcanard/canard.c ****     CANARD_ASSERT(ins != NULL);
 2460              		.loc 1 114 0
 2461              		.cfi_startproc
 2462              		@ args = 0, pretend = 0, frame = 0
 2463              		@ frame_needed = 0, uses_anonymous_args = 0
 2464              	.LVL322:
 2465 0000 08B5     		push	{r3, lr}
 2466              	.LCFI33:
 2467              		.cfi_def_cfa_offset 8
 2468              		.cfi_offset 3, -8
 2469              		.cfi_offset 14, -4
 115:libcanard/canard.c **** 
 2470              		.loc 1 115 0
 2471 0002 38B1     		cbz	r0, .L235
 117:libcanard/canard.c ****         (self_node_id >= CANARD_MIN_NODE_ID) &&
 2472              		.loc 1 117 0
 2473 0004 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 2474 0006 5AB9     		cbnz	r2, .L232
 117:libcanard/canard.c ****         (self_node_id >= CANARD_MIN_NODE_ID) &&
 2475              		.loc 1 117 0 is_stmt 0 discriminator 1
 2476 0008 51B1     		cbz	r1, .L232
 118:libcanard/canard.c ****         (self_node_id <= CANARD_MAX_NODE_ID))
 2477              		.loc 1 118 0 is_stmt 1
 2478 000a 11F0800F 		tst	r1, #128
 2479 000e 07D1     		bne	.L232
 121:libcanard/canard.c ****     }
 2480              		.loc 1 121 0
 2481 0010 0170     		strb	r1, [r0]
 127:libcanard/canard.c **** 
 2482              		.loc 1 127 0
 2483 0012 08BD     		pop	{r3, pc}
ARM GAS  /tmp/cc2kQaha.s 			page 77


 2484              	.L235:
 115:libcanard/canard.c **** 
 2485              		.loc 1 115 0 discriminator 1
 2486 0014 054B     		ldr	r3, .L236
 2487 0016 064A     		ldr	r2, .L236+4
 2488 0018 7321     		movs	r1, #115
 2489              	.LVL323:
 2490 001a 0648     		ldr	r0, .L236+8
 2491              	.LVL324:
 2492 001c FFF7FEFF 		bl	__assert_func
 2493              	.LVL325:
 2494              	.L232:
 125:libcanard/canard.c ****     }
 2495              		.loc 1 125 0
 2496 0020 054B     		ldr	r3, .L236+12
 2497 0022 034A     		ldr	r2, .L236+4
 2498 0024 7D21     		movs	r1, #125
 2499              	.LVL326:
 2500 0026 0348     		ldr	r0, .L236+8
 2501              	.LVL327:
 2502 0028 FFF7FEFF 		bl	__assert_func
 2503              	.LVL328:
 2504              	.L237:
 2505              		.align	2
 2506              	.L236:
 2507 002c 00000000 		.word	.LC0
 2508 0030 00000000 		.word	.LANCHOR10
 2509 0034 14000000 		.word	.LC1
 2510 0038 00000000 		.word	.LC19
 2511              		.cfi_endproc
 2512              	.LFE2:
 2514              		.section	.text.canardGetLocalNodeID,"ax",%progbits
 2515              		.align	1
 2516              		.global	canardGetLocalNodeID
 2517              		.syntax unified
 2518              		.thumb
 2519              		.thumb_func
 2520              		.fpu softvfp
 2522              	canardGetLocalNodeID:
 2523              	.LFB3:
 130:libcanard/canard.c ****     return ins->node_id;
 2524              		.loc 1 130 0
 2525              		.cfi_startproc
 2526              		@ args = 0, pretend = 0, frame = 0
 2527              		@ frame_needed = 0, uses_anonymous_args = 0
 2528              		@ link register save eliminated.
 2529              	.LVL329:
 132:libcanard/canard.c **** 
 2530              		.loc 1 132 0
 2531 0000 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 2532              	.LVL330:
 2533 0002 7047     		bx	lr
 2534              		.cfi_endproc
 2535              	.LFE3:
 2537              		.section	.text.canardBroadcast,"ax",%progbits
 2538              		.align	1
 2539              		.global	canardBroadcast
ARM GAS  /tmp/cc2kQaha.s 			page 78


 2540              		.syntax unified
 2541              		.thumb
 2542              		.thumb_func
 2543              		.fpu softvfp
 2545              	canardBroadcast:
 2546              	.LFB4:
 141:libcanard/canard.c ****     if (payload == NULL && payload_len > 0)
 2547              		.loc 1 141 0
 2548              		.cfi_startproc
 2549              		@ args = 20, pretend = 0, frame = 8
 2550              		@ frame_needed = 0, uses_anonymous_args = 0
 2551              	.LVL331:
 2552 0000 2DE9F04A 		push	{r4, r5, r6, r7, r9, fp, lr}
 2553              	.LCFI34:
 2554              		.cfi_def_cfa_offset 28
 2555              		.cfi_offset 4, -28
 2556              		.cfi_offset 5, -24
 2557              		.cfi_offset 6, -20
 2558              		.cfi_offset 7, -16
 2559              		.cfi_offset 9, -12
 2560              		.cfi_offset 11, -8
 2561              		.cfi_offset 14, -4
 2562 0004 85B0     		sub	sp, sp, #20
 2563              	.LCFI35:
 2564              		.cfi_def_cfa_offset 48
 2565 0006 BDF83040 		ldrh	r4, [sp, #48]
 2566 000a 9DF838B0 		ldrb	fp, [sp, #56]	@ zero_extendqisi2
 2567 000e 0F9E     		ldr	r6, [sp, #60]
 2568 0010 BDF84070 		ldrh	r7, [sp, #64]
 142:libcanard/canard.c ****     {
 2569              		.loc 1 142 0
 2570 0014 9EB3     		cbz	r6, .L250
 2571              	.L240:
 146:libcanard/canard.c ****     {
 2572              		.loc 1 146 0
 2573 0016 BBF11F0F 		cmp	fp, #31
 2574 001a 4BD8     		bhi	.L245
 2575 001c CDE90223 		strd	r2, [sp, #8]
 2576 0020 0546     		mov	r5, r0
 2577              	.LVL332:
 154:libcanard/canard.c ****     {
 2578              		.loc 1 154 0
 2579 0022 FFF7FEFF 		bl	canardGetLocalNodeID
 2580              	.LVL333:
 2581 0026 8146     		mov	r9, r0
 2582 0028 70BB     		cbnz	r0, .L242
 2583              	.LBB36:
 156:libcanard/canard.c ****         {
 2584              		.loc 1 156 0
 2585 002a 072F     		cmp	r7, #7
 2586 002c 45D8     		bhi	.L246
 163:libcanard/canard.c ****         {
 2587              		.loc 1 163 0
 2588 002e 34F00303 		bics	r3, r4, #3
 2589 0032 45D1     		bne	.L247
 169:libcanard/canard.c ****         can_id = ((uint32_t) priority << 24U) | ((uint32_t) discriminator << 9U) |
 2590              		.loc 1 169 0
ARM GAS  /tmp/cc2kQaha.s 			page 79


 2591 0034 3A46     		mov	r2, r7
 2592 0036 3146     		mov	r1, r6
 2593 0038 4FF6FF70 		movw	r0, #65535
 2594 003c FFF7FEFF 		bl	crcAdd
 2595              	.LVL334:
 2596 0040 20F00100 		bic	r0, r0, #1
 2597 0044 4004     		lsls	r0, r0, #17
 2598 0046 400C     		lsrs	r0, r0, #17
 2599              	.LVL335:
 170:libcanard/canard.c ****                  ((uint32_t) (data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins
 2600              		.loc 1 170 0
 2601 0048 4002     		lsls	r0, r0, #9
 2602              	.LVL336:
 2603 004a 40EA0B6B 		orr	fp, r0, fp, lsl #24
 171:libcanard/canard.c ****     }
 2604              		.loc 1 171 0
 2605 004e 2402     		lsls	r4, r4, #8
 2606 0050 04F44074 		and	r4, r4, #768
 170:libcanard/canard.c ****                  ((uint32_t) (data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins
 2607              		.loc 1 170 0
 2608 0054 4BEA0404 		orr	r4, fp, r4
 2609 0058 44EA0909 		orr	r9, r4, r9
 2610              	.LVL337:
 2611              	.LBE36:
 152:libcanard/canard.c **** 
 2612              		.loc 1 152 0
 2613 005c 4FF6FF73 		movw	r3, #65535
 2614              	.LVL338:
 2615              	.L243:
 184:libcanard/canard.c **** 
 2616              		.loc 1 184 0
 2617 0060 0197     		str	r7, [sp, #4]
 2618 0062 0096     		str	r6, [sp]
 2619 0064 0D9A     		ldr	r2, [sp, #52]
 2620 0066 4946     		mov	r1, r9
 2621 0068 2846     		mov	r0, r5
 2622 006a FFF7FEFF 		bl	enqueueTxFrames
 2623              	.LVL339:
 2624 006e 0446     		mov	r4, r0
 2625              	.LVL340:
 186:libcanard/canard.c **** 
 2626              		.loc 1 186 0
 2627 0070 0D98     		ldr	r0, [sp, #52]
 2628 0072 FFF7FEFF 		bl	incrementTransferID
 2629              	.LVL341:
 2630              	.L241:
 189:libcanard/canard.c **** 
 2631              		.loc 1 189 0
 2632 0076 2046     		mov	r0, r4
 2633 0078 05B0     		add	sp, sp, #20
 2634              	.LCFI36:
 2635              		.cfi_remember_state
 2636              		.cfi_def_cfa_offset 28
 2637              		@ sp needed
 2638 007a BDE8F08A 		pop	{r4, r5, r6, r7, r9, fp, pc}
 2639              	.LVL342:
 2640              	.L250:
ARM GAS  /tmp/cc2kQaha.s 			page 80


 2641              	.LCFI37:
 2642              		.cfi_restore_state
 142:libcanard/canard.c ****     {
 2643              		.loc 1 142 0 discriminator 1
 2644 007e 002F     		cmp	r7, #0
 2645 0080 C9D0     		beq	.L240
 144:libcanard/canard.c ****     }
 2646              		.loc 1 144 0
 2647 0082 6FF00104 		mvn	r4, #1
 2648 0086 F6E7     		b	.L241
 2649              	.LVL343:
 2650              	.L242:
 175:libcanard/canard.c **** 
 2651              		.loc 1 175 0
 2652 0088 2402     		lsls	r4, r4, #8
 2653 008a 44EA0B64 		orr	r4, r4, fp, lsl #24
 2654 008e 44EA0009 		orr	r9, r4, r0
 2655              	.LVL344:
 177:libcanard/canard.c ****         {
 2656              		.loc 1 177 0
 2657 0092 072F     		cmp	r7, #7
 2658 0094 0BD9     		bls	.L248
 179:libcanard/canard.c ****             crc = crcAdd(crc, payload, payload_len);
 2659              		.loc 1 179 0
 2660 0096 DDE90223 		ldrd	r2, [sp, #8]
 2661 009a 4FF6FF70 		movw	r0, #65535
 2662 009e FFF7FEFF 		bl	crcAddSignature
 2663              	.LVL345:
 180:libcanard/canard.c ****         }
 2664              		.loc 1 180 0
 2665 00a2 3A46     		mov	r2, r7
 2666 00a4 3146     		mov	r1, r6
 2667 00a6 FFF7FEFF 		bl	crcAdd
 2668              	.LVL346:
 2669 00aa 0346     		mov	r3, r0
 2670              	.LVL347:
 2671 00ac D8E7     		b	.L243
 2672              	.LVL348:
 2673              	.L248:
 152:libcanard/canard.c **** 
 2674              		.loc 1 152 0
 2675 00ae 4FF6FF73 		movw	r3, #65535
 2676 00b2 D5E7     		b	.L243
 2677              	.LVL349:
 2678              	.L245:
 148:libcanard/canard.c ****     }
 2679              		.loc 1 148 0
 2680 00b4 6FF00104 		mvn	r4, #1
 2681 00b8 DDE7     		b	.L241
 2682              	.LVL350:
 2683              	.L246:
 2684              	.LBB37:
 158:libcanard/canard.c ****         }
 2685              		.loc 1 158 0
 2686 00ba 6FF00304 		mvn	r4, #3
 2687 00be DAE7     		b	.L241
 2688              	.L247:
ARM GAS  /tmp/cc2kQaha.s 			page 81


 165:libcanard/canard.c ****         }
 2689              		.loc 1 165 0
 2690 00c0 6FF00104 		mvn	r4, #1
 2691 00c4 D7E7     		b	.L241
 2692              	.LBE37:
 2693              		.cfi_endproc
 2694              	.LFE4:
 2696              		.section	.text.canardRequestOrRespond,"ax",%progbits
 2697              		.align	1
 2698              		.global	canardRequestOrRespond
 2699              		.syntax unified
 2700              		.thumb
 2701              		.thumb_func
 2702              		.fpu softvfp
 2704              	canardRequestOrRespond:
 2705              	.LFB5:
 200:libcanard/canard.c ****     if (payload == NULL && payload_len > 0)
 2706              		.loc 1 200 0
 2707              		.cfi_startproc
 2708              		@ args = 24, pretend = 0, frame = 0
 2709              		@ frame_needed = 0, uses_anonymous_args = 0
 2710              	.LVL351:
 2711 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2712              	.LCFI38:
 2713              		.cfi_def_cfa_offset 36
 2714              		.cfi_offset 4, -36
 2715              		.cfi_offset 5, -32
 2716              		.cfi_offset 6, -28
 2717              		.cfi_offset 7, -24
 2718              		.cfi_offset 8, -20
 2719              		.cfi_offset 9, -16
 2720              		.cfi_offset 10, -12
 2721              		.cfi_offset 11, -8
 2722              		.cfi_offset 14, -4
 2723 0004 83B0     		sub	sp, sp, #12
 2724              	.LCFI39:
 2725              		.cfi_def_cfa_offset 48
 2726 0006 9DF83840 		ldrb	r4, [sp, #56]	@ zero_extendqisi2
 2727 000a 9DF83CA0 		ldrb	r10, [sp, #60]	@ zero_extendqisi2
 2728 000e 109E     		ldr	r6, [sp, #64]
 2729 0010 BDF84470 		ldrh	r7, [sp, #68]
 201:libcanard/canard.c ****     {
 2730              		.loc 1 201 0
 2731 0014 86B3     		cbz	r6, .L260
 2732              	.L252:
 205:libcanard/canard.c ****     {
 2733              		.loc 1 205 0
 2734 0016 1F2C     		cmp	r4, #31
 2735 0018 3AD8     		bhi	.L256
 2736 001a 9046     		mov	r8, r2
 2737 001c 9946     		mov	r9, r3
 2738 001e 8B46     		mov	fp, r1
 2739 0020 0546     		mov	r5, r0
 209:libcanard/canard.c ****     {
 2740              		.loc 1 209 0
 2741 0022 FFF7FEFF 		bl	canardGetLocalNodeID
 2742              	.LVL352:
ARM GAS  /tmp/cc2kQaha.s 			page 82


 2743 0026 B0B3     		cbz	r0, .L257
 214:libcanard/canard.c ****                             ((uint32_t) kind << 15U) | ((uint32_t) destination_node_id << 8U) |
 2744              		.loc 1 214 0
 2745 0028 9DF83030 		ldrb	r3, [sp, #48]	@ zero_extendqisi2
 2746 002c 1B04     		lsls	r3, r3, #16
 2747 002e 43EA0464 		orr	r4, r3, r4, lsl #24
 2748 0032 44EACA34 		orr	r4, r4, r10, lsl #15
 215:libcanard/canard.c ****                             (1U << 7U) | (uint32_t) canardGetLocalNodeID(ins);
 2749              		.loc 1 215 0
 2750 0036 44EA0B24 		orr	r4, r4, fp, lsl #8
 216:libcanard/canard.c ****     uint16_t crc = 0xFFFFU;
 2751              		.loc 1 216 0
 2752 003a 0443     		orrs	r4, r4, r0
 214:libcanard/canard.c ****                             ((uint32_t) kind << 15U) | ((uint32_t) destination_node_id << 8U) |
 2753              		.loc 1 214 0
 2754 003c 44F08004 		orr	r4, r4, #128
 2755              	.LVL353:
 219:libcanard/canard.c ****     {
 2756              		.loc 1 219 0
 2757 0040 072F     		cmp	r7, #7
 2758 0042 1ED9     		bls	.L258
 221:libcanard/canard.c ****         crc = crcAdd(crc, payload, payload_len);
 2759              		.loc 1 221 0
 2760 0044 4246     		mov	r2, r8
 2761 0046 4B46     		mov	r3, r9
 2762 0048 4FF6FF70 		movw	r0, #65535
 2763 004c FFF7FEFF 		bl	crcAddSignature
 2764              	.LVL354:
 222:libcanard/canard.c ****     }
 2765              		.loc 1 222 0
 2766 0050 3A46     		mov	r2, r7
 2767 0052 3146     		mov	r1, r6
 2768 0054 FFF7FEFF 		bl	crcAdd
 2769              	.LVL355:
 2770 0058 0346     		mov	r3, r0
 2771              	.LVL356:
 2772              	.L254:
 225:libcanard/canard.c **** 
 2773              		.loc 1 225 0
 2774 005a 0197     		str	r7, [sp, #4]
 2775 005c 0096     		str	r6, [sp]
 2776 005e 0D9A     		ldr	r2, [sp, #52]
 2777 0060 2146     		mov	r1, r4
 2778 0062 2846     		mov	r0, r5
 2779 0064 FFF7FEFF 		bl	enqueueTxFrames
 2780              	.LVL357:
 2781 0068 0446     		mov	r4, r0
 2782              	.LVL358:
 227:libcanard/canard.c ****     {
 2783              		.loc 1 227 0
 2784 006a BAF1010F 		cmp	r10, #1
 2785 006e 0BD0     		beq	.L261
 2786              	.LVL359:
 2787              	.L253:
 233:libcanard/canard.c **** 
 2788              		.loc 1 233 0
 2789 0070 2046     		mov	r0, r4
ARM GAS  /tmp/cc2kQaha.s 			page 83


 2790 0072 03B0     		add	sp, sp, #12
 2791              	.LCFI40:
 2792              		.cfi_remember_state
 2793              		.cfi_def_cfa_offset 36
 2794              		@ sp needed
 2795 0074 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2796              	.LVL360:
 2797              	.L260:
 2798              	.LCFI41:
 2799              		.cfi_restore_state
 201:libcanard/canard.c ****     {
 2800              		.loc 1 201 0 discriminator 1
 2801 0078 002F     		cmp	r7, #0
 2802 007a CCD0     		beq	.L252
 203:libcanard/canard.c ****     }
 2803              		.loc 1 203 0
 2804 007c 6FF00104 		mvn	r4, #1
 2805 0080 F6E7     		b	.L253
 2806              	.LVL361:
 2807              	.L258:
 217:libcanard/canard.c **** 
 2808              		.loc 1 217 0
 2809 0082 4FF6FF73 		movw	r3, #65535
 2810 0086 E8E7     		b	.L254
 2811              	.LVL362:
 2812              	.L261:
 229:libcanard/canard.c ****     }
 2813              		.loc 1 229 0
 2814 0088 0D98     		ldr	r0, [sp, #52]
 2815 008a FFF7FEFF 		bl	incrementTransferID
 2816              	.LVL363:
 2817 008e EFE7     		b	.L253
 2818              	.LVL364:
 2819              	.L256:
 207:libcanard/canard.c ****     }
 2820              		.loc 1 207 0
 2821 0090 6FF00104 		mvn	r4, #1
 2822 0094 ECE7     		b	.L253
 2823              	.LVL365:
 2824              	.L257:
 211:libcanard/canard.c ****     }
 2825              		.loc 1 211 0
 2826 0096 6FF00304 		mvn	r4, #3
 2827 009a E9E7     		b	.L253
 2828              		.cfi_endproc
 2829              	.LFE5:
 2831              		.section	.text.canardPeekTxQueue,"ax",%progbits
 2832              		.align	1
 2833              		.global	canardPeekTxQueue
 2834              		.syntax unified
 2835              		.thumb
 2836              		.thumb_func
 2837              		.fpu softvfp
 2839              	canardPeekTxQueue:
 2840              	.LFB6:
 236:libcanard/canard.c ****     if (ins->tx_queue == NULL)
 2841              		.loc 1 236 0
ARM GAS  /tmp/cc2kQaha.s 			page 84


 2842              		.cfi_startproc
 2843              		@ args = 0, pretend = 0, frame = 0
 2844              		@ frame_needed = 0, uses_anonymous_args = 0
 2845              		@ link register save eliminated.
 2846              	.LVL366:
 237:libcanard/canard.c ****     {
 2847              		.loc 1 237 0
 2848 0000 C069     		ldr	r0, [r0, #28]
 2849              	.LVL367:
 2850 0002 08B1     		cbz	r0, .L264
 241:libcanard/canard.c **** }
 2851              		.loc 1 241 0
 2852 0004 0430     		adds	r0, r0, #4
 2853 0006 7047     		bx	lr
 2854              	.L264:
 239:libcanard/canard.c ****     }
 2855              		.loc 1 239 0
 2856 0008 0020     		movs	r0, #0
 242:libcanard/canard.c **** 
 2857              		.loc 1 242 0
 2858 000a 7047     		bx	lr
 2859              		.cfi_endproc
 2860              	.LFE6:
 2862              		.section	.text.canardPopTxQueue,"ax",%progbits
 2863              		.align	1
 2864              		.global	canardPopTxQueue
 2865              		.syntax unified
 2866              		.thumb
 2867              		.thumb_func
 2868              		.fpu softvfp
 2870              	canardPopTxQueue:
 2871              	.LFB7:
 245:libcanard/canard.c ****     CanardTxQueueItem* item = ins->tx_queue;
 2872              		.loc 1 245 0
 2873              		.cfi_startproc
 2874              		@ args = 0, pretend = 0, frame = 0
 2875              		@ frame_needed = 0, uses_anonymous_args = 0
 2876              	.LVL368:
 2877 0000 08B5     		push	{r3, lr}
 2878              	.LCFI42:
 2879              		.cfi_def_cfa_offset 8
 2880              		.cfi_offset 3, -8
 2881              		.cfi_offset 14, -4
 246:libcanard/canard.c ****     ins->tx_queue = item->next;
 2882              		.loc 1 246 0
 2883 0002 C169     		ldr	r1, [r0, #28]
 2884              	.LVL369:
 247:libcanard/canard.c ****     freeBlock(&ins->allocator, item);
 2885              		.loc 1 247 0
 2886 0004 0B68     		ldr	r3, [r1]
 2887 0006 C361     		str	r3, [r0, #28]
 248:libcanard/canard.c **** }
 2888              		.loc 1 248 0
 2889 0008 0C30     		adds	r0, r0, #12
 2890              	.LVL370:
 2891 000a FFF7FEFF 		bl	freeBlock
 2892              	.LVL371:
ARM GAS  /tmp/cc2kQaha.s 			page 85


 249:libcanard/canard.c **** 
 2893              		.loc 1 249 0
 2894 000e 08BD     		pop	{r3, pc}
 2895              		.cfi_endproc
 2896              	.LFE7:
 2898              		.section	.text.canardCleanupStaleTransfers,"ax",%progbits
 2899              		.align	1
 2900              		.global	canardCleanupStaleTransfers
 2901              		.syntax unified
 2902              		.thumb
 2903              		.thumb_func
 2904              		.fpu softvfp
 2906              	canardCleanupStaleTransfers:
 2907              	.LFB9:
 478:libcanard/canard.c ****     CanardRxState* prev = ins->rx_states, * state = ins->rx_states;
 2908              		.loc 1 478 0
 2909              		.cfi_startproc
 2910              		@ args = 0, pretend = 0, frame = 0
 2911              		@ frame_needed = 0, uses_anonymous_args = 0
 2912              	.LVL372:
 2913 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2914              	.LCFI43:
 2915              		.cfi_def_cfa_offset 24
 2916              		.cfi_offset 4, -24
 2917              		.cfi_offset 5, -20
 2918              		.cfi_offset 6, -16
 2919              		.cfi_offset 7, -12
 2920              		.cfi_offset 8, -8
 2921              		.cfi_offset 14, -4
 2922 0004 0546     		mov	r5, r0
 2923 0006 1646     		mov	r6, r2
 2924 0008 1F46     		mov	r7, r3
 479:libcanard/canard.c **** 
 2925              		.loc 1 479 0
 2926 000a D0F81880 		ldr	r8, [r0, #24]
 2927              	.LVL373:
 2928 000e 4446     		mov	r4, r8
 481:libcanard/canard.c ****     {
 2929              		.loc 1 481 0
 2930 0010 10E0     		b	.L268
 2931              	.LVL374:
 2932              	.L275:
 487:libcanard/canard.c ****                 ins->rx_states = ins->rx_states->next;
 2933              		.loc 1 487 0
 2934 0012 2146     		mov	r1, r4
 2935 0014 2846     		mov	r0, r5
 2936 0016 FFF7FEFF 		bl	releaseStatePayload
 2937              	.LVL375:
 488:libcanard/canard.c ****                 freeBlock(&ins->allocator, state);
 2938              		.loc 1 488 0
 2939 001a AB69     		ldr	r3, [r5, #24]
 2940 001c 1B68     		ldr	r3, [r3]
 2941 001e AB61     		str	r3, [r5, #24]
 489:libcanard/canard.c ****                 state = ins->rx_states;
 2942              		.loc 1 489 0
 2943 0020 2146     		mov	r1, r4
 2944 0022 05F10C00 		add	r0, r5, #12
ARM GAS  /tmp/cc2kQaha.s 			page 86


 2945 0026 FFF7FEFF 		bl	freeBlock
 2946              	.LVL376:
 490:libcanard/canard.c ****                 prev = state;
 2947              		.loc 1 490 0
 2948 002a AC69     		ldr	r4, [r5, #24]
 2949              	.LVL377:
 2950 002c A046     		mov	r8, r4
 2951 002e 01E0     		b	.L268
 2952              	.LVL378:
 2953              	.L269:
 503:libcanard/canard.c ****             state = state->next;
 2954              		.loc 1 503 0
 2955 0030 A046     		mov	r8, r4
 504:libcanard/canard.c ****         }
 2956              		.loc 1 504 0
 2957 0032 2468     		ldr	r4, [r4]
 2958              	.LVL379:
 2959              	.L268:
 481:libcanard/canard.c ****     {
 2960              		.loc 1 481 0
 2961 0034 E4B1     		cbz	r4, .L274
 483:libcanard/canard.c ****         {
 2962              		.loc 1 483 0
 2963 0036 D4E90201 		ldrd	r0, [r4, #8]
 2964 003a 321A     		subs	r2, r6, r0
 2965 003c 67EB0103 		sbc	r3, r7, r1
 2966 0040 0C48     		ldr	r0, .L276
 2967 0042 0021     		movs	r1, #0
 2968 0044 9942     		cmp	r1, r3
 2969 0046 08BF     		it	eq
 2970 0048 9042     		cmpeq	r0, r2
 2971 004a F1D2     		bcs	.L269
 485:libcanard/canard.c ****             {
 2972              		.loc 1 485 0
 2973 004c AB69     		ldr	r3, [r5, #24]
 2974 004e A342     		cmp	r3, r4
 2975 0050 DFD0     		beq	.L275
 495:libcanard/canard.c ****                 prev->next = state->next;
 2976              		.loc 1 495 0
 2977 0052 2146     		mov	r1, r4
 2978 0054 2846     		mov	r0, r5
 2979 0056 FFF7FEFF 		bl	releaseStatePayload
 2980              	.LVL380:
 496:libcanard/canard.c ****                 freeBlock(&ins->allocator, state);
 2981              		.loc 1 496 0
 2982 005a 2368     		ldr	r3, [r4]
 2983 005c C8F80030 		str	r3, [r8]
 497:libcanard/canard.c ****                 state = prev->next;
 2984              		.loc 1 497 0
 2985 0060 2146     		mov	r1, r4
 2986 0062 05F10C00 		add	r0, r5, #12
 2987 0066 FFF7FEFF 		bl	freeBlock
 2988              	.LVL381:
 498:libcanard/canard.c ****             }
 2989              		.loc 1 498 0
 2990 006a D8F80040 		ldr	r4, [r8]
 2991              	.LVL382:
ARM GAS  /tmp/cc2kQaha.s 			page 87


 2992 006e E1E7     		b	.L268
 2993              	.L274:
 507:libcanard/canard.c **** 
 2994              		.loc 1 507 0
 2995 0070 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2996              	.LVL383:
 2997              	.L277:
 2998              		.align	2
 2999              	.L276:
 3000 0074 80841E00 		.word	2000000
 3001              		.cfi_endproc
 3002              	.LFE9:
 3004              		.section	.text.canardDecodeScalar,"ax",%progbits
 3005              		.align	1
 3006              		.global	canardDecodeScalar
 3007              		.syntax unified
 3008              		.thumb
 3009              		.thumb_func
 3010              		.fpu softvfp
 3012              	canardDecodeScalar:
 3013              	.LFB10:
 514:libcanard/canard.c ****     if (transfer == NULL || out_value == NULL)
 3014              		.loc 1 514 0
 3015              		.cfi_startproc
 3016              		@ args = 4, pretend = 0, frame = 8
 3017              		@ frame_needed = 0, uses_anonymous_args = 0
 3018              	.LVL384:
 3019 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3020              	.LCFI44:
 3021              		.cfi_def_cfa_offset 32
 3022              		.cfi_offset 4, -32
 3023              		.cfi_offset 5, -28
 3024              		.cfi_offset 6, -24
 3025              		.cfi_offset 7, -20
 3026              		.cfi_offset 8, -16
 3027              		.cfi_offset 9, -12
 3028              		.cfi_offset 10, -8
 3029              		.cfi_offset 14, -4
 3030 0004 82B0     		sub	sp, sp, #8
 3031              	.LCFI45:
 3032              		.cfi_def_cfa_offset 40
 3033 0006 0A9E     		ldr	r6, [sp, #40]
 515:libcanard/canard.c ****     {
 3034              		.loc 1 515 0
 3035 0008 0028     		cmp	r0, #0
 3036 000a 00F02281 		beq	.L302
 3037 000e 0446     		mov	r4, r0
 515:libcanard/canard.c ****     {
 3038              		.loc 1 515 0 is_stmt 0 discriminator 1
 3039 0010 002E     		cmp	r6, #0
 3040 0012 00F02181 		beq	.L303
 520:libcanard/canard.c ****     {
 3041              		.loc 1 520 0 is_stmt 1
 3042 0016 551E     		subs	r5, r2, #1
 3043 0018 EDB2     		uxtb	r5, r5
 3044 001a 3F2D     		cmp	r5, #63
 3045 001c 00F21F81 		bhi	.L304
ARM GAS  /tmp/cc2kQaha.s 			page 88


 525:libcanard/canard.c ****     {
 3046              		.loc 1 525 0
 3047 0020 012A     		cmp	r2, #1
 3048 0022 02D1     		bne	.L280
 525:libcanard/canard.c ****     {
 3049              		.loc 1 525 0 is_stmt 0 discriminator 1
 3050 0024 002B     		cmp	r3, #0
 3051 0026 40F01D81 		bne	.L305
 3052              	.L280:
 3053 002a 2046     		mov	r0, r4
 3054              	.LVL385:
 3055 002c 1D46     		mov	r5, r3
 3056 002e 1446     		mov	r4, r2
 3057              	.LVL386:
 548:libcanard/canard.c **** 
 3058              		.loc 1 548 0 is_stmt 1
 3059 0030 0023     		movs	r3, #0
 3060              	.LVL387:
 3061 0032 0093     		str	r3, [sp]
 3062 0034 0193     		str	r3, [sp, #4]
 550:libcanard/canard.c ****     if (result <= 0)
 3063              		.loc 1 550 0
 3064 0036 6B46     		mov	r3, sp
 3065 0038 FFF7FEFF 		bl	descatterTransferPayload
 3066              	.LVL388:
 551:libcanard/canard.c ****     {
 3067              		.loc 1 551 0
 3068 003c 071E     		subs	r7, r0, #0
 3069 003e 40F3D180 		ble	.L279
 556:libcanard/canard.c **** 
 3070              		.loc 1 556 0
 3071 0042 7B1E     		subs	r3, r7, #1
 3072 0044 9BB2     		uxth	r3, r3
 3073 0046 3F2B     		cmp	r3, #63
 3074 0048 1CD8     		bhi	.L281
 556:libcanard/canard.c **** 
 3075              		.loc 1 556 0 is_stmt 0 discriminator 2
 3076 004a A742     		cmp	r7, r4
 3077 004c 1ADC     		bgt	.L281
 564:libcanard/canard.c ****     {
 3078              		.loc 1 564 0 is_stmt 1
 3079 004e 14F0070F 		tst	r4, #7
 3080 0052 0AD0     		beq	.L283
 567:libcanard/canard.c ****     }
 3081              		.loc 1 567 0
 3082 0054 02AB     		add	r3, sp, #8
 3083 0056 03EBD401 		add	r1, r3, r4, lsr #3
 3084 005a 11F8083C 		ldrb	r3, [r1, #-8]	@ zero_extendqisi2
 3085 005e 6242     		negs	r2, r4
 3086 0060 02F00702 		and	r2, r2, #7
 3087 0064 1341     		asrs	r3, r3, r2
 3088 0066 01F8083C 		strb	r3, [r1, #-8]
 3089              	.L283:
 3090              	.LVL389:
 574:libcanard/canard.c ****     else if (bit_length <= 8)   { std_byte_length = 1; }
 3091              		.loc 1 574 0
 3092 006a 012C     		cmp	r4, #1
ARM GAS  /tmp/cc2kQaha.s 			page 89


 3093 006c 18D0     		beq	.L306
 575:libcanard/canard.c ****     else if (bit_length <= 16)  { std_byte_length = 2; }
 3094              		.loc 1 575 0
 3095 006e 082C     		cmp	r4, #8
 3096 0070 47D9     		bls	.L307
 576:libcanard/canard.c ****     else if (bit_length <= 32)  { std_byte_length = 4; }
 3097              		.loc 1 576 0
 3098 0072 102C     		cmp	r4, #16
 3099 0074 48D9     		bls	.L308
 577:libcanard/canard.c ****     else if (bit_length <= 64)  { std_byte_length = 8; }
 3100              		.loc 1 577 0
 3101 0076 202C     		cmp	r4, #32
 3102 0078 49D9     		bls	.L309
 578:libcanard/canard.c ****     else
 3103              		.loc 1 578 0
 3104 007a 402C     		cmp	r4, #64
 3105 007c 09D8     		bhi	.L312
 3106 007e 4FF00808 		mov	r8, #8
 3107 0082 0EE0     		b	.L284
 3108              	.LVL390:
 3109              	.L281:
 556:libcanard/canard.c **** 
 3110              		.loc 1 556 0 discriminator 3
 3111 0084 794B     		ldr	r3, .L322
 3112 0086 7A4A     		ldr	r2, .L322+4
 3113 0088 4FF40B71 		mov	r1, #556
 3114 008c 7948     		ldr	r0, .L322+8
 3115              	.LVL391:
 3116 008e FFF7FEFF 		bl	__assert_func
 3117              	.LVL392:
 3118              	.L312:
 581:libcanard/canard.c ****         return -CANARD_ERROR_INTERNAL;
 3119              		.loc 1 581 0
 3120 0092 794B     		ldr	r3, .L322+12
 3121 0094 764A     		ldr	r2, .L322+4
 3122 0096 40F24521 		movw	r1, #581
 3123 009a 7648     		ldr	r0, .L322+8
 3124              	.LVL393:
 3125 009c FFF7FEFF 		bl	__assert_func
 3126              	.LVL394:
 3127              	.L306:
 574:libcanard/canard.c ****     else if (bit_length <= 8)   { std_byte_length = 1; }
 3128              		.loc 1 574 0
 3129 00a0 A046     		mov	r8, r4
 3130              	.L284:
 3131              	.LVL395:
 585:libcanard/canard.c **** 
 3132              		.loc 1 585 0
 3133 00a2 08F1FF33 		add	r3, r8, #-1
 3134 00a6 DBB2     		uxtb	r3, r3
 3135 00a8 072B     		cmp	r3, #7
 3136 00aa 33D8     		bhi	.L313
 590:libcanard/canard.c ****     {
 3137              		.loc 1 590 0
 3138 00ac FFF7FEFF 		bl	isBigEndian
 3139              	.LVL396:
 3140 00b0 0028     		cmp	r0, #0
ARM GAS  /tmp/cc2kQaha.s 			page 90


 3141 00b2 36D1     		bne	.L314
 3142              	.L286:
 599:libcanard/canard.c ****     {
 3143              		.loc 1 599 0
 3144 00b4 9DB1     		cbz	r5, .L287
 599:libcanard/canard.c ****     {
 3145              		.loc 1 599 0 is_stmt 0 discriminator 1
 3146 00b6 B4EBC80F 		cmp	r4, r8, lsl #3
 3147 00ba 10D0     		beq	.L287
 601:libcanard/canard.c ****         {
 3148              		.loc 1 601 0 is_stmt 1
 3149 00bc 082C     		cmp	r4, #8
 3150 00be 35D8     		bhi	.L288
 603:libcanard/canard.c ****             {
 3151              		.loc 1 603 0
 3152 00c0 9DF80010 		ldrb	r1, [sp]	@ zero_extendqisi2
 3153 00c4 621E     		subs	r2, r4, #1
 3154 00c6 21FA02F2 		lsr	r2, r1, r2
 3155 00ca 12F0010F 		tst	r2, #1
 3156 00ce 06D0     		beq	.L287
 605:libcanard/canard.c ****             }
 3157              		.loc 1 605 0
 3158 00d0 0123     		movs	r3, #1
 3159 00d2 A340     		lsls	r3, r3, r4
 3160 00d4 5B42     		negs	r3, r3
 3161 00d6 DBB2     		uxtb	r3, r3
 3162 00d8 0B43     		orrs	r3, r3, r1
 3163 00da 8DF80030 		strb	r3, [sp]
 3164              	.LVL397:
 3165              	.L287:
 639:libcanard/canard.c ****     {
 3166              		.loc 1 639 0
 3167 00de 002D     		cmp	r5, #0
 3168 00e0 00F09280 		beq	.L292
 641:libcanard/canard.c ****         else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 3169              		.loc 1 641 0
 3170 00e4 082C     		cmp	r4, #8
 3171 00e6 7AD9     		bls	.L315
 642:libcanard/canard.c ****         else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 3172              		.loc 1 642 0
 3173 00e8 102C     		cmp	r4, #16
 3174 00ea 7FD9     		bls	.L316
 643:libcanard/canard.c ****         else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 3175              		.loc 1 643 0
 3176 00ec 202C     		cmp	r4, #32
 3177 00ee 40F28180 		bls	.L317
 644:libcanard/canard.c ****         else
 3178              		.loc 1 644 0
 3179 00f2 402C     		cmp	r4, #64
 3180 00f4 00F28180 		bhi	.L296
 644:libcanard/canard.c ****         else
 3181              		.loc 1 644 0 is_stmt 0 discriminator 1
 3182 00f8 DDE90023 		ldrd	r2, [sp]
 3183 00fc C6E90023 		strd	r2, [r6]
 3184 0100 70E0     		b	.L279
 3185              	.LVL398:
 3186              	.L307:
ARM GAS  /tmp/cc2kQaha.s 			page 91


 575:libcanard/canard.c ****     else if (bit_length <= 16)  { std_byte_length = 2; }
 3187              		.loc 1 575 0 is_stmt 1
 3188 0102 4FF00108 		mov	r8, #1
 3189 0106 CCE7     		b	.L284
 3190              	.L308:
 576:libcanard/canard.c ****     else if (bit_length <= 32)  { std_byte_length = 4; }
 3191              		.loc 1 576 0
 3192 0108 4FF00208 		mov	r8, #2
 3193 010c C9E7     		b	.L284
 3194              	.L309:
 577:libcanard/canard.c ****     else if (bit_length <= 64)  { std_byte_length = 8; }
 3195              		.loc 1 577 0
 3196 010e 4FF00408 		mov	r8, #4
 3197 0112 C6E7     		b	.L284
 3198              	.LVL399:
 3199              	.L313:
 585:libcanard/canard.c **** 
 3200              		.loc 1 585 0 discriminator 1
 3201 0114 594B     		ldr	r3, .L322+16
 3202 0116 564A     		ldr	r2, .L322+4
 3203 0118 40F24921 		movw	r1, #585
 3204 011c 5548     		ldr	r0, .L322+8
 3205              	.LVL400:
 3206 011e FFF7FEFF 		bl	__assert_func
 3207              	.LVL401:
 3208              	.L314:
 592:libcanard/canard.c ****     }
 3209              		.loc 1 592 0
 3210 0122 4146     		mov	r1, r8
 3211 0124 6846     		mov	r0, sp
 3212 0126 FFF7FEFF 		bl	swapByteOrder
 3213              	.LVL402:
 3214 012a C3E7     		b	.L286
 3215              	.L288:
 608:libcanard/canard.c ****         {
 3216              		.loc 1 608 0
 3217 012c 102C     		cmp	r4, #16
 3218 012e 0FD8     		bhi	.L289
 610:libcanard/canard.c ****             {
 3219              		.loc 1 610 0
 3220 0130 BDF80020 		ldrh	r2, [sp]
 3221 0134 631E     		subs	r3, r4, #1
 3222 0136 22FA03F3 		lsr	r3, r2, r3
 3223 013a 13F0010F 		tst	r3, #1
 3224 013e CED0     		beq	.L287
 612:libcanard/canard.c ****             }
 3225              		.loc 1 612 0
 3226 0140 0123     		movs	r3, #1
 3227 0142 A340     		lsls	r3, r3, r4
 3228 0144 5B42     		negs	r3, r3
 3229 0146 9BB2     		uxth	r3, r3
 3230 0148 1343     		orrs	r3, r3, r2
 3231 014a ADF80030 		strh	r3, [sp]	@ movhi
 3232 014e C6E7     		b	.L287
 3233              	.L289:
 615:libcanard/canard.c ****         {
 3234              		.loc 1 615 0
ARM GAS  /tmp/cc2kQaha.s 			page 92


 3235 0150 202C     		cmp	r4, #32
 3236 0152 0CD8     		bhi	.L290
 617:libcanard/canard.c ****             {
 3237              		.loc 1 617 0
 3238 0154 009A     		ldr	r2, [sp]
 3239 0156 631E     		subs	r3, r4, #1
 3240 0158 22FA03F3 		lsr	r3, r2, r3
 3241 015c 13F0010F 		tst	r3, #1
 3242 0160 BDD0     		beq	.L287
 619:libcanard/canard.c ****             }
 3243              		.loc 1 619 0
 3244 0162 0123     		movs	r3, #1
 3245 0164 A340     		lsls	r3, r3, r4
 3246 0166 5B42     		negs	r3, r3
 3247 0168 1A43     		orrs	r2, r2, r3
 3248 016a 0092     		str	r2, [sp]
 3249 016c B7E7     		b	.L287
 3250              	.L290:
 622:libcanard/canard.c ****         {
 3251              		.loc 1 622 0
 3252 016e 3F2C     		cmp	r4, #63
 3253 0170 2ED8     		bhi	.L291
 624:libcanard/canard.c ****             {
 3254              		.loc 1 624 0
 3255 0172 DDE9009A 		ldrd	r9, [sp]
 3256 0176 04F1FF3C 		add	ip, r4, #-1
 3257 017a CCF12008 		rsb	r8, ip, #32
 3258              	.LVL403:
 3259 017e A4F1210E 		sub	lr, r4, #33
 3260 0182 29FA0CF0 		lsr	r0, r9, ip
 3261 0186 0AFA08F8 		lsl	r8, r10, r8
 3262 018a 40EA0800 		orr	r0, r0, r8
 3263 018e 2AFA0EFE 		lsr	lr, r10, lr
 3264 0192 40EA0E00 		orr	r0, r0, lr
 3265 0196 00F00102 		and	r2, r0, #1
 3266 019a 0023     		movs	r3, #0
 3267 019c 1343     		orrs	r3, r2, r3
 3268 019e 9ED0     		beq	.L287
 626:libcanard/canard.c ****             }
 3269              		.loc 1 626 0
 3270 01a0 4FF0010C 		mov	ip, #1
 3271 01a4 A4F12008 		sub	r8, r4, #32
 3272 01a8 C4F1200E 		rsb	lr, r4, #32
 3273 01ac 0CFA08F3 		lsl	r3, ip, r8
 3274 01b0 2CFA0EFE 		lsr	lr, ip, lr
 3275 01b4 43EA0E03 		orr	r3, r3, lr
 3276 01b8 0CFA04F2 		lsl	r2, ip, r4
 3277 01bc 5242     		rsbs	r2, r2, #0
 3278 01be 63EB4303 		sbc	r3, r3, r3, lsl #1
 3279 01c2 49EA0200 		orr	r0, r9, r2
 3280 01c6 4AEA0301 		orr	r1, r10, r3
 3281 01ca CDE90001 		strd	r0, [sp]
 3282 01ce 86E7     		b	.L287
 3283              	.LVL404:
 3284              	.L291:
 631:libcanard/canard.c ****             return -CANARD_ERROR_INTERNAL;
 3285              		.loc 1 631 0
ARM GAS  /tmp/cc2kQaha.s 			page 93


 3286 01d0 294B     		ldr	r3, .L322+12
 3287 01d2 274A     		ldr	r2, .L322+4
 3288 01d4 40F27721 		movw	r1, #631
 3289 01d8 2648     		ldr	r0, .L322+8
 3290 01da FFF7FEFF 		bl	__assert_func
 3291              	.LVL405:
 3292              	.L315:
 641:libcanard/canard.c ****         else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 3293              		.loc 1 641 0 discriminator 1
 3294 01de 9DF90030 		ldrsb	r3, [sp]
 3295 01e2 3370     		strb	r3, [r6]
 3296              	.L279:
 668:libcanard/canard.c **** 
 3297              		.loc 1 668 0
 3298 01e4 3846     		mov	r0, r7
 3299 01e6 02B0     		add	sp, sp, #8
 3300              	.LCFI46:
 3301              		.cfi_remember_state
 3302              		.cfi_def_cfa_offset 32
 3303              		@ sp needed
 3304 01e8 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 3305              	.LVL406:
 3306              	.L316:
 3307              	.LCFI47:
 3308              		.cfi_restore_state
 642:libcanard/canard.c ****         else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 3309              		.loc 1 642 0 discriminator 1
 3310 01ec BDF90030 		ldrsh	r3, [sp]
 3311 01f0 3380     		strh	r3, [r6]	@ movhi
 3312 01f2 F7E7     		b	.L279
 3313              	.L317:
 643:libcanard/canard.c ****         else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 3314              		.loc 1 643 0 discriminator 1
 3315 01f4 009B     		ldr	r3, [sp]
 3316 01f6 3360     		str	r3, [r6]
 3317 01f8 F4E7     		b	.L279
 3318              	.L296:
 647:libcanard/canard.c ****             return -CANARD_ERROR_INTERNAL;
 3319              		.loc 1 647 0
 3320 01fa 1F4B     		ldr	r3, .L322+12
 3321 01fc 1C4A     		ldr	r2, .L322+4
 3322 01fe 40F28721 		movw	r1, #647
 3323 0202 1C48     		ldr	r0, .L322+8
 3324 0204 FFF7FEFF 		bl	__assert_func
 3325              	.LVL407:
 3326              	.L292:
 653:libcanard/canard.c ****         else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 3327              		.loc 1 653 0
 3328 0208 012C     		cmp	r4, #1
 3329 020a 0CD0     		beq	.L318
 654:libcanard/canard.c ****         else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 3330              		.loc 1 654 0
 3331 020c 082C     		cmp	r4, #8
 3332 020e 0ED9     		bls	.L319
 655:libcanard/canard.c ****         else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 3333              		.loc 1 655 0
 3334 0210 102C     		cmp	r4, #16
ARM GAS  /tmp/cc2kQaha.s 			page 94


 3335 0212 10D9     		bls	.L320
 656:libcanard/canard.c ****         else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 3336              		.loc 1 656 0
 3337 0214 202C     		cmp	r4, #32
 3338 0216 12D9     		bls	.L321
 657:libcanard/canard.c ****         else
 3339              		.loc 1 657 0
 3340 0218 402C     		cmp	r4, #64
 3341 021a 13D8     		bhi	.L301
 657:libcanard/canard.c ****         else
 3342              		.loc 1 657 0 is_stmt 0 discriminator 1
 3343 021c DDE90023 		ldrd	r2, [sp]
 3344 0220 C6E90023 		strd	r2, [r6]
 3345 0224 DEE7     		b	.L279
 3346              	.L318:
 653:libcanard/canard.c ****         else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 3347              		.loc 1 653 0 is_stmt 1 discriminator 1
 3348 0226 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 3349 022a 3370     		strb	r3, [r6]
 3350 022c DAE7     		b	.L279
 3351              	.L319:
 654:libcanard/canard.c ****         else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 3352              		.loc 1 654 0 discriminator 1
 3353 022e 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 3354 0232 3370     		strb	r3, [r6]
 3355 0234 D6E7     		b	.L279
 3356              	.L320:
 655:libcanard/canard.c ****         else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 3357              		.loc 1 655 0 discriminator 1
 3358 0236 BDF80030 		ldrh	r3, [sp]
 3359 023a 3380     		strh	r3, [r6]	@ movhi
 3360 023c D2E7     		b	.L279
 3361              	.L321:
 656:libcanard/canard.c ****         else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 3362              		.loc 1 656 0 discriminator 1
 3363 023e 009B     		ldr	r3, [sp]
 3364 0240 3360     		str	r3, [r6]
 3365 0242 CFE7     		b	.L279
 3366              	.L301:
 660:libcanard/canard.c ****             return -CANARD_ERROR_INTERNAL;
 3367              		.loc 1 660 0
 3368 0244 0C4B     		ldr	r3, .L322+12
 3369 0246 0A4A     		ldr	r2, .L322+4
 3370 0248 4FF42571 		mov	r1, #660
 3371 024c 0948     		ldr	r0, .L322+8
 3372 024e FFF7FEFF 		bl	__assert_func
 3373              	.LVL408:
 3374              	.L302:
 517:libcanard/canard.c ****     }
 3375              		.loc 1 517 0
 3376 0252 6FF00107 		mvn	r7, #1
 3377 0256 C5E7     		b	.L279
 3378              	.L303:
 3379 0258 6FF00107 		mvn	r7, #1
 3380 025c C2E7     		b	.L279
 3381              	.L304:
 522:libcanard/canard.c ****     }
ARM GAS  /tmp/cc2kQaha.s 			page 95


 3382              		.loc 1 522 0
 3383 025e 6FF00107 		mvn	r7, #1
 3384 0262 BFE7     		b	.L279
 3385              	.L305:
 527:libcanard/canard.c ****     }
 3386              		.loc 1 527 0
 3387 0264 6FF00107 		mvn	r7, #1
 3388 0268 BCE7     		b	.L279
 3389              	.L323:
 3390 026a 00BF     		.align	2
 3391              	.L322:
 3392 026c 00000000 		.word	.LC20
 3393 0270 00000000 		.word	.LANCHOR11
 3394 0274 14000000 		.word	.LC1
 3395 0278 00000000 		.word	.LC19
 3396 027c 3C000000 		.word	.LC21
 3397              		.cfi_endproc
 3398              	.LFE10:
 3400              		.section	.text.canardEncodeScalar,"ax",%progbits
 3401              		.align	1
 3402              		.global	canardEncodeScalar
 3403              		.syntax unified
 3404              		.thumb
 3405              		.thumb_func
 3406              		.fpu softvfp
 3408              	canardEncodeScalar:
 3409              	.LFB11:
 674:libcanard/canard.c ****     /*
 3410              		.loc 1 674 0
 3411              		.cfi_startproc
 3412              		@ args = 0, pretend = 0, frame = 8
 3413              		@ frame_needed = 0, uses_anonymous_args = 0
 3414              	.LVL409:
 3415 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3416              	.LCFI48:
 3417              		.cfi_def_cfa_offset 20
 3418              		.cfi_offset 4, -20
 3419              		.cfi_offset 5, -16
 3420              		.cfi_offset 6, -12
 3421              		.cfi_offset 7, -8
 3422              		.cfi_offset 14, -4
 3423 0002 85B0     		sub	sp, sp, #20
 3424              	.LCFI49:
 3425              		.cfi_def_cfa_offset 40
 680:libcanard/canard.c ****     CANARD_ASSERT(value != NULL);
 3426              		.loc 1 680 0
 3427 0004 90B1     		cbz	r0, .L337
 3428 0006 0E46     		mov	r6, r1
 3429 0008 1446     		mov	r4, r2
 3430 000a 0546     		mov	r5, r0
 681:libcanard/canard.c **** 
 3431              		.loc 1 681 0
 3432 000c ABB1     		cbz	r3, .L338
 683:libcanard/canard.c ****     {
 3433              		.loc 1 683 0
 3434 000e 402A     		cmp	r2, #64
 3435 0010 1AD8     		bhi	.L339
ARM GAS  /tmp/cc2kQaha.s 			page 96


 689:libcanard/canard.c ****     {
 3436              		.loc 1 689 0
 3437 0012 02B3     		cbz	r2, .L340
 708:libcanard/canard.c **** 
 3438              		.loc 1 708 0
 3439 0014 0022     		movs	r2, #0
 3440              	.LVL410:
 3441 0016 0292     		str	r2, [sp, #8]
 3442 0018 0392     		str	r2, [sp, #12]
 3443              	.LVL411:
 713:libcanard/canard.c ****     else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) valu
 3444              		.loc 1 713 0
 3445 001a 012C     		cmp	r4, #1
 3446 001c 22D0     		beq	.L341
 714:libcanard/canard.c ****     else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) val
 3447              		.loc 1 714 0
 3448 001e 082C     		cmp	r4, #8
 3449 0020 3ED8     		bhi	.L331
 3450              	.LVL412:
 714:libcanard/canard.c ****     else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) val
 3451              		.loc 1 714 0 is_stmt 0 discriminator 1
 3452 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3453              	.LVL413:
 3454 0024 8DF80830 		strb	r3, [sp, #8]
 3455 0028 0127     		movs	r7, #1
 3456 002a 1FE0     		b	.L330
 3457              	.LVL414:
 3458              	.L337:
 680:libcanard/canard.c ****     CANARD_ASSERT(value != NULL);
 3459              		.loc 1 680 0 is_stmt 1 discriminator 1
 3460 002c 284B     		ldr	r3, .L343
 3461              	.LVL415:
 3462 002e 294A     		ldr	r2, .L343+4
 3463              	.LVL416:
 3464 0030 4FF42A71 		mov	r1, #680
 3465              	.LVL417:
 3466 0034 2848     		ldr	r0, .L343+8
 3467              	.LVL418:
 3468 0036 FFF7FEFF 		bl	__assert_func
 3469              	.LVL419:
 3470              	.L338:
 681:libcanard/canard.c **** 
 3471              		.loc 1 681 0 discriminator 1
 3472 003a 284B     		ldr	r3, .L343+12
 3473              	.LVL420:
 3474 003c 254A     		ldr	r2, .L343+4
 3475              	.LVL421:
 3476 003e 40F2A921 		movw	r1, #681
 3477              	.LVL422:
 3478 0042 2548     		ldr	r0, .L343+8
 3479              	.LVL423:
 3480 0044 FFF7FEFF 		bl	__assert_func
 3481              	.LVL424:
 3482              	.L339:
 685:libcanard/canard.c ****         bit_length = 64;
 3483              		.loc 1 685 0
 3484 0048 254B     		ldr	r3, .L343+16
ARM GAS  /tmp/cc2kQaha.s 			page 97


 3485              	.LVL425:
 3486 004a 224A     		ldr	r2, .L343+4
 3487              	.LVL426:
 3488 004c 40F2AD21 		movw	r1, #685
 3489              	.LVL427:
 3490 0050 2148     		ldr	r0, .L343+8
 3491              	.LVL428:
 3492 0052 FFF7FEFF 		bl	__assert_func
 3493              	.LVL429:
 3494              	.L340:
 691:libcanard/canard.c ****         bit_length = 1;
 3495              		.loc 1 691 0
 3496 0056 224B     		ldr	r3, .L343+16
 3497              	.LVL430:
 3498 0058 1E4A     		ldr	r2, .L343+4
 3499              	.LVL431:
 3500 005a 40F2B321 		movw	r1, #691
 3501              	.LVL432:
 3502 005e 1E48     		ldr	r0, .L343+8
 3503              	.LVL433:
 3504 0060 FFF7FEFF 		bl	__assert_func
 3505              	.LVL434:
 3506              	.L341:
 713:libcanard/canard.c ****     else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) valu
 3507              		.loc 1 713 0 discriminator 1
 3508 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3509              	.LVL435:
 3510 0066 8DF80830 		strb	r3, [sp, #8]
 3511 006a 2746     		mov	r7, r4
 3512              	.LVL436:
 3513              	.L330:
 725:libcanard/canard.c ****     {
 3514              		.loc 1 725 0
 3515 006c FFF7FEFF 		bl	isBigEndian
 3516              	.LVL437:
 3517 0070 48BB     		cbnz	r0, .L342
 3518              	.L334:
 737:libcanard/canard.c ****     {
 3519              		.loc 1 737 0
 3520 0072 14F0070F 		tst	r4, #7
 3521 0076 0AD0     		beq	.L335
 740:libcanard/canard.c ****     }
 3522              		.loc 1 740 0
 3523 0078 04AB     		add	r3, sp, #16
 3524 007a 03EBD401 		add	r1, r3, r4, lsr #3
 3525 007e 11F8083C 		ldrb	r3, [r1, #-8]	@ zero_extendqisi2
 3526 0082 6242     		negs	r2, r4
 3527 0084 02F00702 		and	r2, r2, #7
 3528 0088 9340     		lsls	r3, r3, r2
 3529 008a 01F8083C 		strb	r3, [r1, #-8]
 3530              	.L335:
 746:libcanard/canard.c **** }
 3531              		.loc 1 746 0
 3532 008e 0096     		str	r6, [sp]
 3533 0090 2B46     		mov	r3, r5
 3534 0092 2246     		mov	r2, r4
 3535 0094 0021     		movs	r1, #0
ARM GAS  /tmp/cc2kQaha.s 			page 98


 3536 0096 02A8     		add	r0, sp, #8
 3537 0098 FFF7FEFF 		bl	copyBitArray
 3538              	.LVL438:
 747:libcanard/canard.c **** 
 3539              		.loc 1 747 0
 3540 009c 05B0     		add	sp, sp, #20
 3541              	.LCFI50:
 3542              		.cfi_remember_state
 3543              		.cfi_def_cfa_offset 20
 3544              		@ sp needed
 3545 009e F0BD     		pop	{r4, r5, r6, r7, pc}
 3546              	.LVL439:
 3547              	.L331:
 3548              	.LCFI51:
 3549              		.cfi_restore_state
 715:libcanard/canard.c ****     else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) val
 3550              		.loc 1 715 0
 3551 00a0 102C     		cmp	r4, #16
 3552 00a2 04D8     		bhi	.L332
 3553              	.LVL440:
 715:libcanard/canard.c ****     else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) val
 3554              		.loc 1 715 0 is_stmt 0 discriminator 1
 3555 00a4 1B88     		ldrh	r3, [r3]
 3556              	.LVL441:
 3557 00a6 ADF80830 		strh	r3, [sp, #8]	@ movhi
 3558 00aa 0227     		movs	r7, #2
 3559 00ac DEE7     		b	.L330
 3560              	.LVL442:
 3561              	.L332:
 716:libcanard/canard.c ****     else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) val
 3562              		.loc 1 716 0 is_stmt 1
 3563 00ae 202C     		cmp	r4, #32
 3564 00b0 03D8     		bhi	.L333
 3565              	.LVL443:
 716:libcanard/canard.c ****     else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) val
 3566              		.loc 1 716 0 is_stmt 0 discriminator 1
 3567 00b2 1B68     		ldr	r3, [r3]
 3568              	.LVL444:
 3569 00b4 0293     		str	r3, [sp, #8]
 3570 00b6 0427     		movs	r7, #4
 3571 00b8 D8E7     		b	.L330
 3572              	.LVL445:
 3573              	.L333:
 717:libcanard/canard.c ****     else
 3574              		.loc 1 717 0 is_stmt 1 discriminator 1
 3575 00ba D3E90023 		ldrd	r2, [r3]
 3576 00be CDE90223 		strd	r2, [sp, #8]
 3577 00c2 0827     		movs	r7, #8
 3578 00c4 D2E7     		b	.L330
 3579              	.LVL446:
 3580              	.L342:
 727:libcanard/canard.c ****     }
 3581              		.loc 1 727 0
 3582 00c6 3946     		mov	r1, r7
 3583 00c8 02A8     		add	r0, sp, #8
 3584 00ca FFF7FEFF 		bl	swapByteOrder
 3585              	.LVL447:
ARM GAS  /tmp/cc2kQaha.s 			page 99


 3586 00ce D0E7     		b	.L334
 3587              	.L344:
 3588              		.align	2
 3589              	.L343:
 3590 00d0 00000000 		.word	.LC22
 3591 00d4 00000000 		.word	.LANCHOR12
 3592 00d8 14000000 		.word	.LC1
 3593 00dc 1C000000 		.word	.LC23
 3594 00e0 00000000 		.word	.LC19
 3595              		.cfi_endproc
 3596              	.LFE11:
 3598              		.section	.text.canardReleaseRxTransferPayload,"ax",%progbits
 3599              		.align	1
 3600              		.global	canardReleaseRxTransferPayload
 3601              		.syntax unified
 3602              		.thumb
 3603              		.thumb_func
 3604              		.fpu softvfp
 3606              	canardReleaseRxTransferPayload:
 3607              	.LFB12:
 750:libcanard/canard.c ****     while (transfer->payload_middle != NULL)
 3608              		.loc 1 750 0
 3609              		.cfi_startproc
 3610              		@ args = 0, pretend = 0, frame = 0
 3611              		@ frame_needed = 0, uses_anonymous_args = 0
 3612              	.LVL448:
 3613 0000 70B5     		push	{r4, r5, r6, lr}
 3614              	.LCFI52:
 3615              		.cfi_def_cfa_offset 16
 3616              		.cfi_offset 4, -16
 3617              		.cfi_offset 5, -12
 3618              		.cfi_offset 6, -8
 3619              		.cfi_offset 14, -4
 3620 0002 0646     		mov	r6, r0
 3621 0004 0C46     		mov	r4, r1
 751:libcanard/canard.c ****     {
 3622              		.loc 1 751 0
 3623 0006 05E0     		b	.L346
 3624              	.LVL449:
 3625              	.L347:
 3626              	.LBB38:
 753:libcanard/canard.c ****         freeBlock(&ins->allocator, transfer->payload_middle);
 3627              		.loc 1 753 0
 3628 0008 0D68     		ldr	r5, [r1]
 3629              	.LVL450:
 754:libcanard/canard.c ****         transfer->payload_middle = temp;
 3630              		.loc 1 754 0
 3631 000a 06F10C00 		add	r0, r6, #12
 3632 000e FFF7FEFF 		bl	freeBlock
 3633              	.LVL451:
 755:libcanard/canard.c ****     }
 3634              		.loc 1 755 0
 3635 0012 E560     		str	r5, [r4, #12]
 3636              	.LVL452:
 3637              	.L346:
 3638              	.LBE38:
 751:libcanard/canard.c ****     {
ARM GAS  /tmp/cc2kQaha.s 			page 100


 3639              		.loc 1 751 0
 3640 0014 E168     		ldr	r1, [r4, #12]
 3641 0016 0029     		cmp	r1, #0
 3642 0018 F6D1     		bne	.L347
 758:libcanard/canard.c ****     transfer->payload_head = NULL;
 3643              		.loc 1 758 0
 3644 001a 0023     		movs	r3, #0
 3645 001c E360     		str	r3, [r4, #12]
 759:libcanard/canard.c ****     transfer->payload_tail = NULL;
 3646              		.loc 1 759 0
 3647 001e A360     		str	r3, [r4, #8]
 760:libcanard/canard.c ****     transfer->payload_len = 0;
 3648              		.loc 1 760 0
 3649 0020 2361     		str	r3, [r4, #16]
 761:libcanard/canard.c **** }
 3650              		.loc 1 761 0
 3651 0022 A382     		strh	r3, [r4, #20]	@ movhi
 762:libcanard/canard.c **** 
 3652              		.loc 1 762 0
 3653 0024 70BD     		pop	{r4, r5, r6, pc}
 3654              		.cfi_endproc
 3655              	.LFE12:
 3657              		.section	.text.canardHandleRxFrame,"ax",%progbits
 3658              		.align	1
 3659              		.global	canardHandleRxFrame
 3660              		.syntax unified
 3661              		.thumb
 3662              		.thumb_func
 3663              		.fpu softvfp
 3665              	canardHandleRxFrame:
 3666              	.LFB8:
 252:libcanard/canard.c ****     const CanardTransferType transfer_type = extractTransferType(frame->id);
 3667              		.loc 1 252 0
 3668              		.cfi_startproc
 3669              		@ args = 0, pretend = 0, frame = 64
 3670              		@ frame_needed = 0, uses_anonymous_args = 0
 3671              	.LVL453:
 3672 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3673              	.LCFI53:
 3674              		.cfi_def_cfa_offset 36
 3675              		.cfi_offset 4, -36
 3676              		.cfi_offset 5, -32
 3677              		.cfi_offset 6, -28
 3678              		.cfi_offset 7, -24
 3679              		.cfi_offset 8, -20
 3680              		.cfi_offset 9, -16
 3681              		.cfi_offset 10, -12
 3682              		.cfi_offset 11, -8
 3683              		.cfi_offset 14, -4
 3684 0004 93B0     		sub	sp, sp, #76
 3685              	.LCFI54:
 3686              		.cfi_def_cfa_offset 112
 3687 0006 0746     		mov	r7, r0
 3688 0008 0D46     		mov	r5, r1
 3689 000a CDE90223 		strd	r2, [sp, #8]
 253:libcanard/canard.c ****     const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 3690              		.loc 1 253 0
ARM GAS  /tmp/cc2kQaha.s 			page 101


 3691 000e 0C68     		ldr	r4, [r1]
 3692 0010 2046     		mov	r0, r4
 3693              	.LVL454:
 3694 0012 FFF7FEFF 		bl	extractTransferType
 3695              	.LVL455:
 3696 0016 0646     		mov	r6, r0
 3697              	.LVL456:
 254:libcanard/canard.c ****                                         (uint8_t)CANARD_BROADCAST_NODE_ID :
 3698              		.loc 1 254 0
 3699 0018 0228     		cmp	r0, #2
 3700 001a 06D0     		beq	.L376
 254:libcanard/canard.c ****                                         (uint8_t)CANARD_BROADCAST_NODE_ID :
 3701              		.loc 1 254 0 is_stmt 0 discriminator 1
 3702 001c C4F30628 		ubfx	r8, r4, #8, #7
 3703              	.L350:
 3704              	.LVL457:
 260:libcanard/canard.c ****         (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 3705              		.loc 1 260 0 is_stmt 1 discriminator 4
 3706 0020 002C     		cmp	r4, #0
 3707 0022 05DB     		blt	.L387
 3708              	.LVL458:
 3709              	.L349:
 475:libcanard/canard.c **** 
 3710              		.loc 1 475 0
 3711 0024 13B0     		add	sp, sp, #76
 3712              	.LCFI55:
 3713              		.cfi_remember_state
 3714              		.cfi_def_cfa_offset 36
 3715              		@ sp needed
 3716 0026 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3717              	.LVL459:
 3718              	.L376:
 3719              	.LCFI56:
 3720              		.cfi_restore_state
 254:libcanard/canard.c ****                                         (uint8_t)CANARD_BROADCAST_NODE_ID :
 3721              		.loc 1 254 0
 3722 002a 4FF00008 		mov	r8, #0
 3723 002e F7E7     		b	.L350
 3724              	.LVL460:
 3725              	.L387:
 261:libcanard/canard.c ****         (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 3726              		.loc 1 261 0
 3727 0030 14F0C04F 		tst	r4, #1610612736
 3728 0034 F6D1     		bne	.L349
 263:libcanard/canard.c ****     {
 3729              		.loc 1 263 0
 3730 0036 95F80C90 		ldrb	r9, [r5, #12]	@ zero_extendqisi2
 262:libcanard/canard.c ****         (frame->data_len < 1))
 3731              		.loc 1 262 0
 3732 003a B9F1000F 		cmp	r9, #0
 3733 003e F1D0     		beq	.L349
 268:libcanard/canard.c ****         destination_node_id != canardGetLocalNodeID(ins))
 3734              		.loc 1 268 0
 3735 0040 022E     		cmp	r6, #2
 3736 0042 04D0     		beq	.L352
 269:libcanard/canard.c ****     {
 3737              		.loc 1 269 0 discriminator 1
ARM GAS  /tmp/cc2kQaha.s 			page 102


 3738 0044 3846     		mov	r0, r7
 3739              	.LVL461:
 3740 0046 FFF7FEFF 		bl	canardGetLocalNodeID
 3741              	.LVL462:
 268:libcanard/canard.c ****         destination_node_id != canardGetLocalNodeID(ins))
 3742              		.loc 1 268 0 discriminator 1
 3743 004a 4045     		cmp	r0, r8
 3744 004c EAD1     		bne	.L349
 3745              	.L352:
 274:libcanard/canard.c ****     const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 3746              		.loc 1 274 0
 3747 004e C4F30463 		ubfx	r3, r4, #24, #5
 3748 0052 0493     		str	r3, [sp, #16]
 3749              	.LVL463:
 275:libcanard/canard.c ****     const uint16_t data_type_id = extractDataType(frame->id);
 3750              		.loc 1 275 0
 3751 0054 04F07F0A 		and	r10, r4, #127
 3752              	.LVL464:
 276:libcanard/canard.c ****     const uint32_t transfer_descriptor =
 3753              		.loc 1 276 0
 3754 0058 2046     		mov	r0, r4
 3755 005a FFF7FEFF 		bl	extractDataType
 3756              	.LVL465:
 3757 005e 0590     		str	r0, [sp, #20]
 3758              	.LVL466:
 278:libcanard/canard.c **** 
 3759              		.loc 1 278 0
 3760 0060 40EA0643 		orr	r3, r0, r6, lsl #16
 3761 0064 43EA8A43 		orr	r3, r3, r10, lsl #18
 277:libcanard/canard.c ****             MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_
 3762              		.loc 1 277 0
 3763 0068 43EA4868 		orr	r8, r3, r8, lsl #25
 3764              	.LVL467:
 280:libcanard/canard.c **** 
 3765              		.loc 1 280 0
 3766 006c 09F1FF39 		add	r9, r9, #-1
 3767 0070 A944     		add	r9, r9, r5
 3768 0072 99F80490 		ldrb	r9, [r9, #4]	@ zero_extendqisi2
 3769              	.LVL468:
 284:libcanard/canard.c ****     {
 3770              		.loc 1 284 0
 3771 0076 5FEAD91B 		lsrs	fp, r9, #7
 3772 007a 45D0     		beq	.L353
 3773              	.LBB39:
 286:libcanard/canard.c **** 
 3774              		.loc 1 286 0
 3775 007c 12A9     		add	r1, sp, #72
 3776 007e 0022     		movs	r2, #0
 3777 0080 0023     		movs	r3, #0
 3778 0082 61E90823 		strd	r2, [r1, #-32]!
 288:libcanard/canard.c ****         {
 3779              		.loc 1 288 0
 3780 0086 7C68     		ldr	r4, [r7, #4]
 3781 0088 CDF800A0 		str	r10, [sp]
 3782 008c 3346     		mov	r3, r6
 3783 008e 0246     		mov	r2, r0
 3784 0090 3846     		mov	r0, r7
ARM GAS  /tmp/cc2kQaha.s 			page 103


 3785              	.LVL469:
 3786 0092 A047     		blx	r4
 3787              	.LVL470:
 3788 0094 0028     		cmp	r0, #0
 3789 0096 C5D0     		beq	.L349
 290:libcanard/canard.c **** 
 3790              		.loc 1 290 0
 3791 0098 4146     		mov	r1, r8
 3792 009a 3846     		mov	r0, r7
 3793 009c FFF7FEFF 		bl	traverseRxStates
 3794              	.LVL471:
 292:libcanard/canard.c ****             {
 3795              		.loc 1 292 0
 3796 00a0 0446     		mov	r4, r0
 3797 00a2 0028     		cmp	r0, #0
 3798 00a4 BED0     		beq	.L349
 297:libcanard/canard.c ****         }
 3799              		.loc 1 297 0
 3800 00a6 DDE90A23 		ldrd	r2, [sp, #40]
 3801 00aa 4FF6FF70 		movw	r0, #65535
 3802              	.LVL472:
 3803 00ae FFF7FEFF 		bl	crcAddSignature
 3804              	.LVL473:
 3805 00b2 A082     		strh	r0, [r4, #20]	@ movhi
 3806              	.L355:
 3807              	.LBE39:
 314:libcanard/canard.c **** 
 3808              		.loc 1 314 0
 3809 00b4 002C     		cmp	r4, #0
 3810 00b6 2FD0     		beq	.L388
 317:libcanard/canard.c ****     const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 3811              		.loc 1 317 0
 3812 00b8 D4E90223 		ldrd	r2, [r4, #8]
 3813              	.LVL474:
 318:libcanard/canard.c ****     const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
 3814              		.loc 1 318 0
 3815 00bc DDE90201 		ldrd	r0, [sp, #8]
 3816 00c0 CDE90623 		strd	r2, [sp, #24]
 3817 00c4 801A     		subs	r0, r0, r2
 3818 00c6 61EB0301 		sbc	r1, r1, r3
 3819 00ca CDE90801 		strd	r0, [sp, #32]
 3820              	.LVL475:
 321:libcanard/canard.c **** 
 3821              		.loc 1 321 0
 3822 00ce E07D     		ldrb	r0, [r4, #23]	@ zero_extendqisi2
 3823              	.LVL476:
 3824 00d0 09F01F08 		and	r8, r9, #31
 3825              	.LVL477:
 3826 00d4 4146     		mov	r1, r8
 3827 00d6 C0F38400 		ubfx	r0, r0, #2, #5
 3828 00da FFF7FEFF 		bl	computeTransferIDForwardDistance
 3829              	.LVL478:
 3830 00de 8446     		mov	ip, r0
 3831              	.LVL479:
 325:libcanard/canard.c ****             (first_frame && not_previous_tid);
 3832              		.loc 1 325 0
 3833 00e0 DDE90623 		ldrd	r2, [sp, #24]
ARM GAS  /tmp/cc2kQaha.s 			page 104


 3834 00e4 1343     		orrs	r3, r2, r3
 3835 00e6 20D0     		beq	.L377
 324:libcanard/canard.c ****             (tid_timed_out) ||
 3836              		.loc 1 324 0
 3837 00e8 AA4A     		ldr	r2, .L397
 3838 00ea 0023     		movs	r3, #0
 3839 00ec DDE90801 		ldrd	r0, [sp, #32]
 3840 00f0 8B42     		cmp	r3, r1
 3841 00f2 08BF     		it	eq
 3842 00f4 8242     		cmpeq	r2, r0
 3843 00f6 48D3     		bcc	.L378
 325:libcanard/canard.c ****             (first_frame && not_previous_tid);
 3844              		.loc 1 325 0
 3845 00f8 BBF1000F 		cmp	fp, #0
 3846 00fc 47D0     		beq	.L379
 326:libcanard/canard.c **** 
 3847              		.loc 1 326 0
 3848 00fe BCF1010F 		cmp	ip, #1
 3849 0102 10DD     		ble	.L389
 325:libcanard/canard.c ****             (first_frame && not_previous_tid);
 3850              		.loc 1 325 0
 3851 0104 0123     		movs	r3, #1
 3852 0106 11E0     		b	.L357
 3853              	.LVL480:
 3854              	.L353:
 306:libcanard/canard.c **** 
 3855              		.loc 1 306 0
 3856 0108 4146     		mov	r1, r8
 3857 010a B869     		ldr	r0, [r7, #24]
 3858              	.LVL481:
 3859 010c FFF7FEFF 		bl	findRxState
 3860              	.LVL482:
 308:libcanard/canard.c ****         {
 3861              		.loc 1 308 0
 3862 0110 0446     		mov	r4, r0
 3863 0112 0028     		cmp	r0, #0
 3864 0114 CED1     		bne	.L355
 3865 0116 85E7     		b	.L349
 3866              	.LVL483:
 3867              	.L388:
 314:libcanard/canard.c **** 
 3868              		.loc 1 314 0 discriminator 1
 3869 0118 9F4B     		ldr	r3, .L397+4
 3870 011a A04A     		ldr	r2, .L397+8
 3871 011c 4FF49D71 		mov	r1, #314
 3872 0120 9F48     		ldr	r0, .L397+12
 3873 0122 FFF7FEFF 		bl	__assert_func
 3874              	.LVL484:
 3875              	.L389:
 325:libcanard/canard.c ****             (first_frame && not_previous_tid);
 3876              		.loc 1 325 0
 3877 0126 0023     		movs	r3, #0
 3878 0128 00E0     		b	.L357
 3879              	.LVL485:
 3880              	.L377:
 3881 012a 0123     		movs	r3, #1
 3882              	.LVL486:
ARM GAS  /tmp/cc2kQaha.s 			page 105


 3883              	.L357:
 328:libcanard/canard.c ****     {
 3884              		.loc 1 328 0
 3885 012c 002B     		cmp	r3, #0
 3886 012e 30D1     		bne	.L390
 3887              	.LVL487:
 3888              	.L358:
 340:libcanard/canard.c ****     {
 3889              		.loc 1 340 0
 3890 0130 BBF1000F 		cmp	fp, #0
 3891 0134 42D0     		beq	.L359
 340:libcanard/canard.c ****     {
 3892              		.loc 1 340 0 is_stmt 0 discriminator 1
 3893 0136 19F0400F 		tst	r9, #64
 3894 013a 3FD0     		beq	.L359
 3895              	.LBB40:
 342:libcanard/canard.c ****         CanardRxTransfer rx_transfer = {
 3896              		.loc 1 342 0 is_stmt 1
 3897 013c DDE90212 		ldrd	r1, [sp, #8]
 3898 0140 C4E90212 		strd	r1, [r4, #8]
 343:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 3899              		.loc 1 343 0
 3900 0144 0023     		movs	r3, #0
 3901 0146 0D93     		str	r3, [sp, #52]
 3902 0148 0E93     		str	r3, [sp, #56]
 3903 014a 1193     		str	r3, [sp, #68]
 3904 014c CDE90A12 		strd	r1, [sp, #40]
 345:libcanard/canard.c ****             .payload_len = (uint8_t)(frame->data_len - 1U),
 3905              		.loc 1 345 0
 3906 0150 2B1D     		adds	r3, r5, #4
 343:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 3907              		.loc 1 343 0
 3908 0152 0C93     		str	r3, [sp, #48]
 346:libcanard/canard.c ****             .data_type_id = data_type_id,
 3909              		.loc 1 346 0
 3910 0154 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
 3911 0156 013B     		subs	r3, r3, #1
 3912 0158 DBB2     		uxtb	r3, r3
 343:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 3913              		.loc 1 343 0
 3914 015a ADF83C30 		strh	r3, [sp, #60]	@ movhi
 3915 015e BDF81430 		ldrh	r3, [sp, #20]
 3916 0162 ADF83E30 		strh	r3, [sp, #62]	@ movhi
 3917 0166 8DF84060 		strb	r6, [sp, #64]
 3918 016a 8DF84180 		strb	r8, [sp, #65]
 3919 016e 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 3920 0172 8DF84230 		strb	r3, [sp, #66]
 3921 0176 8DF843A0 		strb	r10, [sp, #67]
 354:libcanard/canard.c **** 
 3922              		.loc 1 354 0
 3923 017a BB68     		ldr	r3, [r7, #8]
 3924 017c 0AA9     		add	r1, sp, #40
 3925 017e 3846     		mov	r0, r7
 3926 0180 9847     		blx	r3
 3927              	.LVL488:
 356:libcanard/canard.c ****         return;
 3928              		.loc 1 356 0
ARM GAS  /tmp/cc2kQaha.s 			page 106


 3929 0182 2046     		mov	r0, r4
 3930 0184 FFF7FEFF 		bl	prepareForNextTransfer
 3931              	.LVL489:
 3932 0188 4CE7     		b	.L349
 3933              	.LVL490:
 3934              	.L378:
 3935              	.LBE40:
 325:libcanard/canard.c ****             (first_frame && not_previous_tid);
 3936              		.loc 1 325 0
 3937 018a 0123     		movs	r3, #1
 3938 018c CEE7     		b	.L357
 3939              	.L379:
 3940 018e 0023     		movs	r3, #0
 3941 0190 CCE7     		b	.L357
 3942              	.LVL491:
 3943              	.L390:
 330:libcanard/canard.c ****         rx_state->next_toggle = 0;
 3944              		.loc 1 330 0
 3945 0192 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 3946              	.LVL492:
 3947 0194 69F38603 		bfi	r3, r9, #2, #5
 331:libcanard/canard.c ****         releaseStatePayload(ins, rx_state);
 3948              		.loc 1 331 0
 3949 0198 6FF3C713 		bfc	r3, #7, #1
 3950 019c E375     		strb	r3, [r4, #23]
 3951              	.LVL493:
 332:libcanard/canard.c ****         if (!IS_START_OF_TRANSFER(tail_byte)) // missed the first frame
 3952              		.loc 1 332 0
 3953 019e 2146     		mov	r1, r4
 3954 01a0 3846     		mov	r0, r7
 3955 01a2 FFF7FEFF 		bl	releaseStatePayload
 3956              	.LVL494:
 333:libcanard/canard.c ****         {
 3957              		.loc 1 333 0
 3958 01a6 BBF1000F 		cmp	fp, #0
 3959 01aa C1D1     		bne	.L358
 335:libcanard/canard.c ****             return;
 3960              		.loc 1 335 0
 3961 01ac E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 3962 01ae C3F38402 		ubfx	r2, r3, #2, #5
 3963 01b2 0132     		adds	r2, r2, #1
 3964 01b4 62F38603 		bfi	r3, r2, #2, #5
 3965 01b8 E375     		strb	r3, [r4, #23]
 336:libcanard/canard.c ****         }
 3966              		.loc 1 336 0
 3967 01ba 33E7     		b	.L349
 3968              	.L359:
 360:libcanard/canard.c ****     {
 3969              		.loc 1 360 0
 3970 01bc C9F34013 		ubfx	r3, r9, #5, #1
 3971 01c0 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 3972 01c2 B3EBD21F 		cmp	r3, r2, lsr #7
 3973 01c6 7FF42DAF 		bne	.L349
 365:libcanard/canard.c ****     {
 3974              		.loc 1 365 0
 3975 01ca C2F38403 		ubfx	r3, r2, #2, #5
 3976 01ce 9845     		cmp	r8, r3
ARM GAS  /tmp/cc2kQaha.s 			page 107


 3977 01d0 7FF428AF 		bne	.L349
 370:libcanard/canard.c ****     {
 3978              		.loc 1 370 0
 3979 01d4 BBF1000F 		cmp	fp, #0
 3980 01d8 33D0     		beq	.L360
 370:libcanard/canard.c ****     {
 3981              		.loc 1 370 0 is_stmt 0 discriminator 1
 3982 01da 19F0400F 		tst	r9, #64
 3983 01de 30D1     		bne	.L360
 3984              	.LBB41:
 372:libcanard/canard.c ****         {
 3985              		.loc 1 372 0 is_stmt 1
 3986 01e0 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
 3987 01e2 032B     		cmp	r3, #3
 3988 01e4 7FF61EAF 		bls	.L349
 378:libcanard/canard.c ****         const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 3989              		.loc 1 378 0
 3990 01e8 DDE90223 		ldrd	r2, [sp, #8]
 3991 01ec C4E90223 		strd	r2, [r4, #8]
 379:libcanard/canard.c ****                                                  (uint8_t) (frame->data_len - 3));
 3992              		.loc 1 379 0
 3993 01f0 AE1D     		adds	r6, r5, #6
 380:libcanard/canard.c ****         if (ret < 0)
 3994              		.loc 1 380 0
 3995 01f2 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
 379:libcanard/canard.c ****                                                  (uint8_t) (frame->data_len - 3));
 3996              		.loc 1 379 0
 3997 01f4 033B     		subs	r3, r3, #3
 3998 01f6 DBB2     		uxtb	r3, r3
 3999 01f8 3246     		mov	r2, r6
 4000 01fa 2146     		mov	r1, r4
 4001 01fc 07F10C00 		add	r0, r7, #12
 4002 0200 FFF7FEFF 		bl	bufferBlockPushBytes
 4003              	.LVL495:
 381:libcanard/canard.c ****         {
 4004              		.loc 1 381 0
 4005 0204 0028     		cmp	r0, #0
 4006 0206 14DB     		blt	.L391
 387:libcanard/canard.c ****         rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 4007              		.loc 1 387 0
 4008 0208 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 4009 020a 6A79     		ldrb	r2, [r5, #5]	@ zero_extendqisi2
 4010 020c 43EA0223 		orr	r3, r3, r2, lsl #8
 4011 0210 2383     		strh	r3, [r4, #24]	@ movhi
 389:libcanard/canard.c ****     }
 4012              		.loc 1 389 0
 4013 0212 2A7B     		ldrb	r2, [r5, #12]	@ zero_extendqisi2
 4014 0214 033A     		subs	r2, r2, #3
 388:libcanard/canard.c ****                                           frame->data + 2, (uint8_t)(frame->data_len - 3));
 4015              		.loc 1 388 0
 4016 0216 D2B2     		uxtb	r2, r2
 4017 0218 3146     		mov	r1, r6
 4018 021a A08A     		ldrh	r0, [r4, #20]
 4019              	.LVL496:
 4020 021c FFF7FEFF 		bl	crcAdd
 4021              	.LVL497:
 4022 0220 A082     		strh	r0, [r4, #20]	@ movhi
ARM GAS  /tmp/cc2kQaha.s 			page 108


 4023              	.L362:
 4024              	.LBE41:
 474:libcanard/canard.c **** }
 4025              		.loc 1 474 0
 4026 0222 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 4027 0224 DA43     		mvns	r2, r3
 4028 0226 C2F3C012 		ubfx	r2, r2, #7, #1
 4029 022a 62F3C713 		bfi	r3, r2, #7, #1
 4030 022e E375     		strb	r3, [r4, #23]
 4031 0230 F8E6     		b	.L349
 4032              	.LVL498:
 4033              	.L391:
 4034              	.LBB42:
 383:libcanard/canard.c ****             prepareForNextTransfer(rx_state);
 4035              		.loc 1 383 0
 4036 0232 2146     		mov	r1, r4
 4037 0234 3846     		mov	r0, r7
 4038              	.LVL499:
 4039 0236 FFF7FEFF 		bl	releaseStatePayload
 4040              	.LVL500:
 384:libcanard/canard.c ****             return;
 4041              		.loc 1 384 0
 4042 023a 2046     		mov	r0, r4
 4043 023c FFF7FEFF 		bl	prepareForNextTransfer
 4044              	.LVL501:
 385:libcanard/canard.c ****         }
 4045              		.loc 1 385 0
 4046 0240 F0E6     		b	.L349
 4047              	.L360:
 4048              	.LBE42:
 391:libcanard/canard.c ****     {
 4049              		.loc 1 391 0
 4050 0242 BBF1000F 		cmp	fp, #0
 4051 0246 02D1     		bne	.L363
 391:libcanard/canard.c ****     {
 4052              		.loc 1 391 0 is_stmt 0 discriminator 1
 4053 0248 19F0400F 		tst	r9, #64
 4054 024c 09D0     		beq	.L392
 4055              	.L363:
 4056              	.LBB43:
 406:libcanard/canard.c **** 
 4057              		.loc 1 406 0 is_stmt 1
 4058 024e 297B     		ldrb	r1, [r5, #12]	@ zero_extendqisi2
 4059 0250 0139     		subs	r1, r1, #1
 4060 0252 C9B2     		uxtb	r1, r1
 4061              	.LVL502:
 410:libcanard/canard.c ****         {
 4062              		.loc 1 410 0
 4063 0254 E28A     		ldrh	r2, [r4, #22]
 4064 0256 C2F30902 		ubfx	r2, r2, #0, #10
 4065 025a 052A     		cmp	r2, #5
 4066 025c 65D8     		bhi	.L365
 4067              	.LVL503:
 408:libcanard/canard.c **** 
 4068              		.loc 1 408 0
 4069 025e 0023     		movs	r3, #0
 4070              	.LBB44:
ARM GAS  /tmp/cc2kQaha.s 			page 109


 413:libcanard/canard.c ****                  (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size)
 4071              		.loc 1 413 0
 4072 0260 25E0     		b	.L366
 4073              	.LVL504:
 4074              	.L392:
 4075              	.LBE44:
 4076              	.LBE43:
 4077              	.LBB53:
 393:libcanard/canard.c ****                                                  (uint8_t) (frame->data_len - 1));
 4078              		.loc 1 393 0
 4079 0262 2E1D     		adds	r6, r5, #4
 394:libcanard/canard.c ****         if (ret < 0)
 4080              		.loc 1 394 0
 4081 0264 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
 393:libcanard/canard.c ****                                                  (uint8_t) (frame->data_len - 1));
 4082              		.loc 1 393 0
 4083 0266 013B     		subs	r3, r3, #1
 4084 0268 DBB2     		uxtb	r3, r3
 4085 026a 3246     		mov	r2, r6
 4086 026c 2146     		mov	r1, r4
 4087 026e 07F10C00 		add	r0, r7, #12
 4088 0272 FFF7FEFF 		bl	bufferBlockPushBytes
 4089              	.LVL505:
 395:libcanard/canard.c ****         {
 4090              		.loc 1 395 0
 4091 0276 0028     		cmp	r0, #0
 4092 0278 08DB     		blt	.L393
 402:libcanard/canard.c ****     }
 4093              		.loc 1 402 0
 4094 027a 2A7B     		ldrb	r2, [r5, #12]	@ zero_extendqisi2
 4095 027c 013A     		subs	r2, r2, #1
 401:libcanard/canard.c ****                                           frame->data, (uint8_t)(frame->data_len - 1));
 4096              		.loc 1 401 0
 4097 027e D2B2     		uxtb	r2, r2
 4098 0280 3146     		mov	r1, r6
 4099 0282 A08A     		ldrh	r0, [r4, #20]
 4100              	.LVL506:
 4101 0284 FFF7FEFF 		bl	crcAdd
 4102              	.LVL507:
 4103 0288 A082     		strh	r0, [r4, #20]	@ movhi
 4104              	.LBE53:
 392:libcanard/canard.c ****         const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 4105              		.loc 1 392 0
 4106 028a CAE7     		b	.L362
 4107              	.LVL508:
 4108              	.L393:
 4109              	.LBB54:
 397:libcanard/canard.c ****             prepareForNextTransfer(rx_state);
 4110              		.loc 1 397 0
 4111 028c 2146     		mov	r1, r4
 4112 028e 3846     		mov	r0, r7
 4113              	.LVL509:
 4114 0290 FFF7FEFF 		bl	releaseStatePayload
 4115              	.LVL510:
 398:libcanard/canard.c ****             return;
 4116              		.loc 1 398 0
 4117 0294 2046     		mov	r0, r4
ARM GAS  /tmp/cc2kQaha.s 			page 110


 4118 0296 FFF7FEFF 		bl	prepareForNextTransfer
 4119              	.LVL511:
 399:libcanard/canard.c ****         }
 4120              		.loc 1 399 0
 4121 029a C3E6     		b	.L349
 4122              	.LVL512:
 4123              	.L368:
 4124              	.LBE54:
 4125              	.LBB55:
 4126              	.LBB45:
 417:libcanard/canard.c ****             }
 4127              		.loc 1 417 0
 4128 029c E818     		adds	r0, r5, r3
 4129 029e 90F804C0 		ldrb	ip, [r0, #4]	@ zero_extendqisi2
 4130 02a2 A018     		adds	r0, r4, r2
 4131 02a4 80F81AC0 		strb	ip, [r0, #26]
 415:libcanard/canard.c ****             {
 4132              		.loc 1 415 0
 4133 02a8 0132     		adds	r2, r2, #1
 4134              	.LVL513:
 4135 02aa 0133     		adds	r3, r3, #1
 4136              	.LVL514:
 4137 02ac DBB2     		uxtb	r3, r3
 4138              	.LVL515:
 4139              	.L366:
 413:libcanard/canard.c ****                  (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size)
 4140              		.loc 1 413 0 discriminator 1
 4141 02ae 052A     		cmp	r2, #5
 4142 02b0 01D8     		bhi	.L367
 414:libcanard/canard.c ****                  i++, tail_offset++)
 4143              		.loc 1 414 0
 4144 02b2 8B42     		cmp	r3, r1
 4145 02b4 F2D3     		bcc	.L368
 4146              	.LVL516:
 4147              	.L367:
 4148              	.LBE45:
 446:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 4149              		.loc 1 446 0
 4150 02b6 DDE902BC 		ldrd	fp, [sp, #8]
 4151              	.LVL517:
 4152 02ba CDE90ABC 		strd	fp, [sp, #40]
 448:libcanard/canard.c ****             .payload_middle = rx_state->buffer_blocks,
 4153              		.loc 1 448 0
 4154 02be 04F11A02 		add	r2, r4, #26
 446:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 4155              		.loc 1 446 0
 4156 02c2 0C92     		str	r2, [sp, #48]
 449:libcanard/canard.c ****             .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]
 4157              		.loc 1 449 0
 4158 02c4 6268     		ldr	r2, [r4, #4]
 446:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 4159              		.loc 1 446 0
 4160 02c6 0D92     		str	r2, [sp, #52]
 450:libcanard/canard.c ****             .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 4161              		.loc 1 450 0
 4162 02c8 8B42     		cmp	r3, r1
 4163 02ca 60D2     		bcs	.L383
ARM GAS  /tmp/cc2kQaha.s 			page 111


 450:libcanard/canard.c ****             .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 4164              		.loc 1 450 0 is_stmt 0 discriminator 1
 4165 02cc 2B44     		add	r3, r3, r5
 4166              	.LVL518:
 4167 02ce 0433     		adds	r3, r3, #4
 4168              	.L374:
 446:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 4169              		.loc 1 446 0 is_stmt 1
 4170 02d0 0E93     		str	r3, [sp, #56]
 451:libcanard/canard.c ****             .data_type_id = data_type_id,
 4171              		.loc 1 451 0
 4172 02d2 E38A     		ldrh	r3, [r4, #22]
 4173 02d4 C3F30903 		ubfx	r3, r3, #0, #10
 4174 02d8 1944     		add	r1, r1, r3
 4175              	.LVL519:
 446:libcanard/canard.c ****             .timestamp_usec = timestamp_usec,
 4176              		.loc 1 446 0
 4177 02da ADF83C10 		strh	r1, [sp, #60]	@ movhi
 4178 02de BDF81430 		ldrh	r3, [sp, #20]
 4179 02e2 ADF83E30 		strh	r3, [sp, #62]	@ movhi
 4180 02e6 8DF84060 		strb	r6, [sp, #64]
 4181 02ea 8DF84180 		strb	r8, [sp, #65]
 4182 02ee 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 4183 02f2 8DF84230 		strb	r3, [sp, #66]
 4184 02f6 8DF843A0 		strb	r10, [sp, #67]
 459:libcanard/canard.c **** 
 4185              		.loc 1 459 0
 4186 02fa 0023     		movs	r3, #0
 4187 02fc 6360     		str	r3, [r4, #4]
 462:libcanard/canard.c ****         if (rx_state->calculated_crc == rx_state->payload_crc)
 4188              		.loc 1 462 0
 4189 02fe 2A7B     		ldrb	r2, [r5, #12]	@ zero_extendqisi2
 4190 0300 013A     		subs	r2, r2, #1
 4191 0302 291D     		adds	r1, r5, #4
 4192 0304 A08A     		ldrh	r0, [r4, #20]
 4193 0306 FFF7FEFF 		bl	crcAdd
 4194              	.LVL520:
 4195 030a A082     		strh	r0, [r4, #20]	@ movhi
 463:libcanard/canard.c ****         {
 4196              		.loc 1 463 0
 4197 030c 238B     		ldrh	r3, [r4, #24]
 4198 030e 9842     		cmp	r0, r3
 4199 0310 03D1     		bne	.L375
 465:libcanard/canard.c ****         }
 4200              		.loc 1 465 0
 4201 0312 BB68     		ldr	r3, [r7, #8]
 4202 0314 0AA9     		add	r1, sp, #40
 4203 0316 3846     		mov	r0, r7
 4204 0318 9847     		blx	r3
 4205              	.LVL521:
 4206              	.L375:
 469:libcanard/canard.c ****         prepareForNextTransfer(rx_state);
 4207              		.loc 1 469 0
 4208 031a 0AA9     		add	r1, sp, #40
 4209 031c 3846     		mov	r0, r7
 4210 031e FFF7FEFF 		bl	canardReleaseRxTransferPayload
 4211              	.LVL522:
ARM GAS  /tmp/cc2kQaha.s 			page 112


 470:libcanard/canard.c ****         return;
 4212              		.loc 1 470 0
 4213 0322 2046     		mov	r0, r4
 4214 0324 FFF7FEFF 		bl	prepareForNextTransfer
 4215              	.LVL523:
 4216 0328 7CE6     		b	.L349
 4217              	.LVL524:
 4218              	.L365:
 4219              	.LBB46:
 423:libcanard/canard.c ****             if (block != NULL)          // If there's no middle, that's fine, we'll use only head a
 4220              		.loc 1 423 0
 4221 032a 6068     		ldr	r0, [r4, #4]
 4222              	.LVL525:
 424:libcanard/canard.c ****             {
 4223              		.loc 1 424 0
 4224 032c 10B1     		cbz	r0, .L394
 4225              	.LBB47:
 426:libcanard/canard.c ****                 while (block->next != NULL)
 4226              		.loc 1 426 0
 4227 032e 4FF0060C 		mov	ip, #6
 4228 0332 04E0     		b	.L369
 4229              	.L394:
 4230              	.LBE47:
 4231              	.LBE46:
 408:libcanard/canard.c **** 
 4232              		.loc 1 408 0
 4233 0334 0023     		movs	r3, #0
 4234 0336 BEE7     		b	.L367
 4235              	.LVL526:
 4236              	.L370:
 4237              	.LBB51:
 4238              	.LBB49:
 430:libcanard/canard.c ****                 }
 4239              		.loc 1 430 0
 4240 0338 0CF11C0C 		add	ip, ip, #28
 4241              	.LVL527:
 429:libcanard/canard.c ****                     offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 4242              		.loc 1 429 0
 4243 033c 1846     		mov	r0, r3
 4244              	.LVL528:
 4245              	.L369:
 427:libcanard/canard.c ****                 {
 4246              		.loc 1 427 0
 4247 033e 0368     		ldr	r3, [r0]
 4248 0340 002B     		cmp	r3, #0
 4249 0342 F9D1     		bne	.L370
 432:libcanard/canard.c **** 
 4250              		.loc 1 432 0
 4251 0344 28B1     		cbz	r0, .L395
 434:libcanard/canard.c ****                 CANARD_ASSERT(offset_within_block < CANARD_BUFFER_BLOCK_DATA_SIZE);
 4252              		.loc 1 434 0
 4253 0346 A2EB0C02 		sub	r2, r2, ip
 4254              	.LVL529:
 435:libcanard/canard.c **** 
 4255              		.loc 1 435 0
 4256 034a 1B2A     		cmp	r2, #27
 4257 034c 08D8     		bhi	.L396
ARM GAS  /tmp/cc2kQaha.s 			page 113


 4258              	.LBE49:
 4259              	.LBE51:
 408:libcanard/canard.c **** 
 4260              		.loc 1 408 0
 4261 034e 0023     		movs	r3, #0
 4262 0350 18E0     		b	.L372
 4263              	.LVL530:
 4264              	.L395:
 4265              	.LBB52:
 4266              	.LBB50:
 432:libcanard/canard.c **** 
 4267              		.loc 1 432 0 discriminator 1
 4268 0352 144B     		ldr	r3, .L397+16
 4269 0354 114A     		ldr	r2, .L397+8
 4270 0356 4FF4D871 		mov	r1, #432
 4271              	.LVL531:
 4272 035a 1148     		ldr	r0, .L397+12
 4273              	.LVL532:
 4274 035c FFF7FEFF 		bl	__assert_func
 4275              	.LVL533:
 4276              	.L396:
 435:libcanard/canard.c **** 
 4277              		.loc 1 435 0 discriminator 1
 4278 0360 114B     		ldr	r3, .L397+20
 4279 0362 0E4A     		ldr	r2, .L397+8
 4280              	.LVL534:
 4281 0364 40F2B311 		movw	r1, #435
 4282              	.LVL535:
 4283 0368 0D48     		ldr	r0, .L397+12
 4284              	.LVL536:
 4285 036a FFF7FEFF 		bl	__assert_func
 4286              	.LVL537:
 4287              	.L373:
 4288              	.LBB48:
 441:libcanard/canard.c ****                 }
 4289              		.loc 1 441 0
 4290 036e 05EB030C 		add	ip, r5, r3
 4291 0372 9CF804E0 		ldrb	lr, [ip, #4]	@ zero_extendqisi2
 4292 0376 00EB020C 		add	ip, r0, r2
 4293 037a 8CF804E0 		strb	lr, [ip, #4]
 439:libcanard/canard.c ****                 {
 4294              		.loc 1 439 0
 4295 037e 0132     		adds	r2, r2, #1
 4296              	.LVL538:
 4297 0380 0133     		adds	r3, r3, #1
 4298              	.LVL539:
 4299 0382 DBB2     		uxtb	r3, r3
 4300              	.LVL540:
 4301              	.L372:
 437:libcanard/canard.c ****                      (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 4302              		.loc 1 437 0 discriminator 1
 4303 0384 1B2A     		cmp	r2, #27
 4304 0386 96D8     		bhi	.L367
 438:libcanard/canard.c ****                      i++, tail_offset++)
 4305              		.loc 1 438 0
 4306 0388 8B42     		cmp	r3, r1
 4307 038a F0D3     		bcc	.L373
ARM GAS  /tmp/cc2kQaha.s 			page 114


 4308 038c 93E7     		b	.L367
 4309              	.LVL541:
 4310              	.L383:
 4311              	.LBE48:
 4312              	.LBE50:
 4313              	.LBE52:
 450:libcanard/canard.c ****             .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 4314              		.loc 1 450 0
 4315 038e 0023     		movs	r3, #0
 4316              	.LVL542:
 4317 0390 9EE7     		b	.L374
 4318              	.L398:
 4319 0392 00BF     		.align	2
 4320              	.L397:
 4321 0394 80841E00 		.word	2000000
 4322 0398 00000000 		.word	.LC24
 4323 039c 00000000 		.word	.LANCHOR13
 4324 03a0 14000000 		.word	.LC1
 4325 03a4 18000000 		.word	.LC25
 4326 03a8 30000000 		.word	.LC26
 4327              	.LBE55:
 4328              		.cfi_endproc
 4329              	.LFE8:
 4331              		.section	.text.canardGetPoolAllocatorStatistics,"ax",%progbits
 4332              		.align	1
 4333              		.global	canardGetPoolAllocatorStatistics
 4334              		.syntax unified
 4335              		.thumb
 4336              		.thumb_func
 4337              		.fpu softvfp
 4339              	canardGetPoolAllocatorStatistics:
 4340              	.LFB13:
 765:libcanard/canard.c ****     return ins->allocator.statistics;
 4341              		.loc 1 765 0
 4342              		.cfi_startproc
 4343              		@ args = 0, pretend = 0, frame = 0
 4344              		@ frame_needed = 0, uses_anonymous_args = 0
 4345              		@ link register save eliminated.
 4346              	.LVL543:
 4347 0000 0346     		mov	r3, r0
 766:libcanard/canard.c **** }
 4348              		.loc 1 766 0
 4349 0002 0869     		ldr	r0, [r1, #16]
 4350              	.LVL544:
 4351 0004 1860     		str	r0, [r3]	@ unaligned
 4352 0006 8A8A     		ldrh	r2, [r1, #20]	@ unaligned
 4353 0008 9A80     		strh	r2, [r3, #4]	@ unaligned
 767:libcanard/canard.c **** 
 4354              		.loc 1 767 0
 4355 000a 1846     		mov	r0, r3
 4356 000c 7047     		bx	lr
 4357              		.cfi_endproc
 4358              	.LFE13:
 4360              		.global	__aeabi_fmul
 4361              		.section	.text.canardConvertNativeFloatToFloat16,"ax",%progbits
 4362              		.align	1
 4363              		.global	canardConvertNativeFloatToFloat16
ARM GAS  /tmp/cc2kQaha.s 			page 115


 4364              		.syntax unified
 4365              		.thumb
 4366              		.thumb_func
 4367              		.fpu softvfp
 4369              	canardConvertNativeFloatToFloat16:
 4370              	.LFB14:
 770:libcanard/canard.c ****     CANARD_ASSERT(sizeof(float) == 4);
 4371              		.loc 1 770 0
 4372              		.cfi_startproc
 4373              		@ args = 0, pretend = 0, frame = 0
 4374              		@ frame_needed = 0, uses_anonymous_args = 0
 4375              	.LVL545:
 4376 0000 10B5     		push	{r4, lr}
 4377              	.LCFI57:
 4378              		.cfi_def_cfa_offset 8
 4379              		.cfi_offset 4, -8
 4380              		.cfi_offset 14, -4
 4381              	.LVL546:
 787:libcanard/canard.c ****     in.u ^= sign;
 4382              		.loc 1 787 0
 4383 0002 00F00044 		and	r4, r0, #-2147483648
 4384              	.LVL547:
 788:libcanard/canard.c **** 
 4385              		.loc 1 788 0
 4386 0006 6040     		eors	r0, r0, r4
 4387              	.LVL548:
 792:libcanard/canard.c ****     {
 4388              		.loc 1 792 0
 4389 0008 B0F1FF4F 		cmp	r0, #2139095040
 4390 000c 03D3     		bcc	.L401
 794:libcanard/canard.c ****     }
 4391              		.loc 1 794 0
 4392 000e 16D9     		bls	.L404
 4393 0010 47F6FF70 		movw	r0, #32767
 4394 0014 10E0     		b	.L402
 4395              	.L401:
 799:libcanard/canard.c ****         in.u -= round_mask;
 4396              		.loc 1 799 0
 4397 0016 4FF0F061 		mov	r1, #125829120
 4398 001a 20F47F60 		bic	r0, r0, #4080
 4399 001e 20F00F00 		bic	r0, r0, #15
 4400 0022 FFF7FEFF 		bl	__aeabi_fmul
 4401              	.LVL549:
 800:libcanard/canard.c ****         if (in.u > f16inf.u)
 4402              		.loc 1 800 0
 4403 0026 00F58050 		add	r0, r0, #4096
 4404              	.LVL550:
 801:libcanard/canard.c ****         {
 4405              		.loc 1 801 0
 4406 002a B0F1786F 		cmp	r0, #260046848
 4407 002e 01D9     		bls	.L403
 803:libcanard/canard.c ****         }
 4408              		.loc 1 803 0
 4409 0030 4FF07860 		mov	r0, #260046848
 4410              	.LVL551:
 4411              	.L403:
 805:libcanard/canard.c ****     }
ARM GAS  /tmp/cc2kQaha.s 			page 116


 4412              		.loc 1 805 0
 4413 0034 C0F34F30 		ubfx	r0, r0, #13, #16
 4414              	.LVL552:
 4415              	.L402:
 811:libcanard/canard.c **** 
 4416              		.loc 1 811 0
 4417 0038 40EA1440 		orr	r0, r0, r4, lsr #16
 4418              	.LVL553:
 4419 003c 10BD     		pop	{r4, pc}
 4420              	.LVL554:
 4421              	.L404:
 794:libcanard/canard.c ****     }
 4422              		.loc 1 794 0
 4423 003e 4FF4F840 		mov	r0, #31744
 4424 0042 F9E7     		b	.L402
 4425              		.cfi_endproc
 4426              	.LFE14:
 4428              		.global	__aeabi_fcmpge
 4429              		.section	.text.canardConvertFloat16ToNativeFloat,"ax",%progbits
 4430              		.align	1
 4431              		.global	canardConvertFloat16ToNativeFloat
 4432              		.syntax unified
 4433              		.thumb
 4434              		.thumb_func
 4435              		.fpu softvfp
 4437              	canardConvertFloat16ToNativeFloat:
 4438              	.LFB15:
 814:libcanard/canard.c ****     CANARD_ASSERT(sizeof(float) == 4);
 4439              		.loc 1 814 0
 4440              		.cfi_startproc
 4441              		@ args = 0, pretend = 0, frame = 0
 4442              		@ frame_needed = 0, uses_anonymous_args = 0
 4443              	.LVL555:
 4444 0000 70B5     		push	{r4, r5, r6, lr}
 4445              	.LCFI58:
 4446              		.cfi_def_cfa_offset 16
 4447              		.cfi_offset 4, -16
 4448              		.cfi_offset 5, -12
 4449              		.cfi_offset 6, -8
 4450              		.cfi_offset 14, -4
 4451 0002 0446     		mov	r4, r0
 828:libcanard/canard.c ****     if (out.f >= was_inf_nan.f)
 4452              		.loc 1 828 0
 4453 0004 4FF0EF41 		mov	r1, #2004877312
 4454 0008 0948     		ldr	r0, .L411
 4455              	.LVL556:
 4456 000a 00EA4430 		and	r0, r0, r4, lsl #13
 4457 000e FFF7FEFF 		bl	__aeabi_fmul
 4458              	.LVL557:
 4459 0012 0646     		mov	r6, r0
 4460 0014 0546     		mov	r5, r0
 4461              	.LVL558:
 829:libcanard/canard.c ****     {
 4462              		.loc 1 829 0
 4463 0016 4FF08F41 		mov	r1, #1199570944
 4464 001a FFF7FEFF 		bl	__aeabi_fcmpge
 4465              	.LVL559:
ARM GAS  /tmp/cc2kQaha.s 			page 117


 4466 001e 08B1     		cbz	r0, .L407
 831:libcanard/canard.c ****     }
 4467              		.loc 1 831 0
 4468 0020 46F0FF45 		orr	r5, r6, #2139095040
 4469              	.L407:
 833:libcanard/canard.c **** 
 4470              		.loc 1 833 0
 4471 0024 2404     		lsls	r4, r4, #16
 4472 0026 04F00040 		and	r0, r4, #-2147483648
 4473              	.LVL560:
 835:libcanard/canard.c **** }
 4474              		.loc 1 835 0
 4475 002a 2843     		orrs	r0, r0, r5
 836:libcanard/canard.c **** 
 4476              		.loc 1 836 0
 4477 002c 70BD     		pop	{r4, r5, r6, pc}
 4478              	.LVL561:
 4479              	.L412:
 4480 002e 00BF     		.align	2
 4481              	.L411:
 4482 0030 00E0FF0F 		.word	268427264
 4483              		.cfi_endproc
 4484              	.LFE15:
 4486              		.section	.rodata.__func__.4795,"a",%progbits
 4487              		.align	2
 4488              		.set	.LANCHOR8,. + 0
 4491              	__func__.4795:
 4492 0000 63616E61 		.ascii	"canardInit\000"
 4492      7264496E 
 4492      697400
 4493              		.section	.rodata.__func__.4800,"a",%progbits
 4494              		.align	2
 4495              		.set	.LANCHOR9,. + 0
 4498              	__func__.4800:
 4499 0000 63616E61 		.ascii	"canardGetUserReference\000"
 4499      72644765 
 4499      74557365 
 4499      72526566 
 4499      6572656E 
 4500              		.section	.rodata.__func__.4805,"a",%progbits
 4501              		.align	2
 4502              		.set	.LANCHOR10,. + 0
 4505              	__func__.4805:
 4506 0000 63616E61 		.ascii	"canardSetLocalNodeID\000"
 4506      72645365 
 4506      744C6F63 
 4506      616C4E6F 
 4506      64654944 
 4507              		.section	.rodata.__func__.4858,"a",%progbits
 4508              		.align	2
 4509              		.set	.LANCHOR13,. + 0
 4512              	__func__.4858:
 4513 0000 63616E61 		.ascii	"canardHandleRxFrame\000"
 4513      72644861 
 4513      6E646C65 
 4513      52784672 
 4513      616D6500 
ARM GAS  /tmp/cc2kQaha.s 			page 118


 4514              		.section	.rodata.__func__.4913,"a",%progbits
 4515              		.align	2
 4516              		.set	.LANCHOR11,. + 0
 4519              	__func__.4913:
 4520 0000 63616E61 		.ascii	"canardDecodeScalar\000"
 4520      72644465 
 4520      636F6465 
 4520      5363616C 
 4520      617200
 4521              		.section	.rodata.__func__.4921,"a",%progbits
 4522              		.align	2
 4523              		.set	.LANCHOR12,. + 0
 4526              	__func__.4921:
 4527 0000 63616E61 		.ascii	"canardEncodeScalar\000"
 4527      7264456E 
 4527      636F6465 
 4527      5363616C 
 4527      617200
 4528              		.section	.rodata.__func__.4975,"a",%progbits
 4529              		.align	2
 4530              		.set	.LANCHOR1,. + 0
 4533              	__func__.4975:
 4534 0000 696E6372 		.ascii	"incrementTransferID\000"
 4534      656D656E 
 4534      74547261 
 4534      6E736665 
 4534      72494400 
 4535              		.section	.rodata.__func__.4984,"a",%progbits
 4536              		.align	2
 4537              		.set	.LANCHOR7,. + 0
 4540              	__func__.4984:
 4541 0000 656E7175 		.ascii	"enqueueTxFrames\000"
 4541      65756554 
 4541      78467261 
 4541      6D657300 
 4542              		.section	.rodata.__func__.5002,"a",%progbits
 4543              		.align	2
 4544              		.set	.LANCHOR0,. + 0
 4547              	__func__.5002:
 4548 0000 70757368 		.ascii	"pushTxQueue\000"
 4548      54785175 
 4548      65756500 
 4549              		.section	.rodata.__func__.5027,"a",%progbits
 4550              		.align	2
 4551              		.set	.LANCHOR3,. + 0
 4554              	__func__.5027:
 4555 0000 70726570 		.ascii	"prepareForNextTransfer\000"
 4555      61726546 
 4555      6F724E65 
 4555      78745472 
 4555      616E7366 
 4556              		.section	.rodata.__func__.5103,"a",%progbits
 4557              		.align	2
 4558              		.set	.LANCHOR4,. + 0
 4561              	__func__.5103:
 4562 0000 636F7079 		.ascii	"copyBitArray\000"
 4562      42697441 
ARM GAS  /tmp/cc2kQaha.s 			page 119


 4562      72726179 
 4562      00
 4563              		.section	.rodata.__func__.5120,"a",%progbits
 4564              		.align	2
 4565              		.set	.LANCHOR5,. + 0
 4568              	__func__.5120:
 4569 0000 64657363 		.ascii	"descatterTransferPayload\000"
 4569      61747465 
 4569      72547261 
 4569      6E736665 
 4569      72506179 
 4570              		.section	.rodata.__func__.5146,"a",%progbits
 4571              		.align	2
 4572              		.set	.LANCHOR6,. + 0
 4575              	__func__.5146:
 4576 0000 73776170 		.ascii	"swapByteOrder\000"
 4576      42797465 
 4576      4F726465 
 4576      7200
 4577              		.section	.rodata.__func__.5197,"a",%progbits
 4578              		.align	2
 4579              		.set	.LANCHOR2,. + 0
 4582              	__func__.5197:
 4583 0000 66726565 		.ascii	"freeBlock\000"
 4583      426C6F63 
 4583      6B00
 4584              		.section	.rodata.canardDecodeScalar.str1.4,"aMS",%progbits,1
 4585              		.align	2
 4586              	.LC20:
 4587 0000 28726573 		.ascii	"(result > 0) && (result <= 64) && (result <= bit_le"
 4587      756C7420 
 4587      3E203029 
 4587      20262620 
 4587      28726573 
 4588 0033 6E677468 		.ascii	"ngth)\000"
 4588      2900
 4589 0039 000000   		.space	3
 4590              	.LC21:
 4591 003c 28737464 		.ascii	"(std_byte_length > 0) && (std_byte_length <= 8)\000"
 4591      5F627974 
 4591      655F6C65 
 4591      6E677468 
 4591      203E2030 
 4592              		.section	.rodata.canardEncodeScalar.str1.4,"aMS",%progbits,1
 4593              		.align	2
 4594              	.LC22:
 4595 0000 64657374 		.ascii	"destination != ((void *)0)\000"
 4595      696E6174 
 4595      696F6E20 
 4595      213D2028 
 4595      28766F69 
 4596 001b 00       		.space	1
 4597              	.LC23:
 4598 001c 76616C75 		.ascii	"value != ((void *)0)\000"
 4598      6520213D 
 4598      20282876 
 4598      6F696420 
ARM GAS  /tmp/cc2kQaha.s 			page 120


 4598      2A293029 
 4599              		.section	.rodata.canardHandleRxFrame.str1.4,"aMS",%progbits,1
 4600              		.align	2
 4601              	.LC24:
 4602 0000 72785F73 		.ascii	"rx_state != ((void *)0)\000"
 4602      74617465 
 4602      20213D20 
 4602      2828766F 
 4602      6964202A 
 4603              	.LC25:
 4604 0018 626C6F63 		.ascii	"block != ((void *)0)\000"
 4604      6B20213D 
 4604      20282876 
 4604      6F696420 
 4604      2A293029 
 4605 002d 000000   		.space	3
 4606              	.LC26:
 4607 0030 6F666673 		.ascii	"offset_within_block < (32U - __builtin_offsetof (Ca"
 4607      65745F77 
 4607      69746869 
 4607      6E5F626C 
 4607      6F636B20 
 4608 0063 6E617264 		.ascii	"nardBufferBlock, data))\000"
 4608      42756666 
 4608      6572426C 
 4608      6F636B2C 
 4608      20646174 
 4609              		.section	.rodata.canardInit.str1.4,"aMS",%progbits,1
 4610              		.align	2
 4611              	.LC18:
 4612 0000 6F75745F 		.ascii	"out_ins != ((void *)0)\000"
 4612      696E7320 
 4612      213D2028 
 4612      28766F69 
 4612      64202A29 
 4613              		.section	.rodata.canardSetLocalNodeID.str1.4,"aMS",%progbits,1
 4614              		.align	2
 4615              	.LC19:
 4616 0000 3000     		.ascii	"0\000"
 4617              		.section	.rodata.copyBitArray.str1.4,"aMS",%progbits,1
 4618              		.align	2
 4619              	.LC6:
 4620 0000 7372635F 		.ascii	"src_len > 0U\000"
 4620      6C656E20 
 4620      3E203055 
 4620      00
 4621              		.section	.rodata.descatterTransferPayload.str1.4,"aMS",%progbits,1
 4622              		.align	2
 4623              	.LC7:
 4624 0000 7472616E 		.ascii	"transfer != 0\000"
 4624      73666572 
 4624      20213D20 
 4624      3000
 4625 000e 0000     		.space	2
 4626              	.LC8:
 4627 0010 6269745F 		.ascii	"bit_length > 0\000"
 4627      6C656E67 
ARM GAS  /tmp/cc2kQaha.s 			page 121


 4627      7468203E 
 4627      203000
 4628 001f 00       		.space	1
 4629              	.LC9:
 4630 0020 72656D61 		.ascii	"remaining_bits > 0\000"
 4630      696E696E 
 4630      675F6269 
 4630      7473203E 
 4630      203000
 4631 0033 00       		.space	1
 4632              	.LC10:
 4633 0034 696E7075 		.ascii	"input_bit_offset >= block_bit_offset\000"
 4633      745F6269 
 4633      745F6F66 
 4633      66736574 
 4633      203E3D20 
 4634 0059 000000   		.space	3
 4635              	.LC11:
 4636 005c 626C6F63 		.ascii	"block_end_bit_offset > block_bit_offset\000"
 4636      6B5F656E 
 4636      645F6269 
 4636      745F6F66 
 4636      66736574 
 4637              	.LC12:
 4638 0084 72656D61 		.ascii	"remaining_bit_length <= remaining_bits\000"
 4638      696E696E 
 4638      675F6269 
 4638      745F6C65 
 4638      6E677468 
 4639 00ab 00       		.space	1
 4640              	.LC13:
 4641 00ac 696E7075 		.ascii	"input_bit_offset <= transfer->payload_len * 8\000"
 4641      745F6269 
 4641      745F6F66 
 4641      66736574 
 4641      203C3D20 
 4642 00da 0000     		.space	2
 4643              	.LC14:
 4644 00dc 6F757470 		.ascii	"output_bit_offset <= 64\000"
 4644      75745F62 
 4644      69745F6F 
 4644      66667365 
 4644      74203C3D 
 4645              	.LC15:
 4646 00f4 72656D61 		.ascii	"remaining_bit_length == 0\000"
 4646      696E696E 
 4646      675F6269 
 4646      745F6C65 
 4646      6E677468 
 4647              		.section	.rodata.enqueueTxFrames.str1.4,"aMS",%progbits,1
 4648              		.align	2
 4649              	.LC17:
 4650 0000 2863616E 		.ascii	"(can_id & 0x1FFFFFFFU) == can_id\000"
 4650      5F696420 
 4650      26203078 
 4650      31464646 
 4650      46464646 
ARM GAS  /tmp/cc2kQaha.s 			page 122


 4651              		.section	.rodata.freeBlock.str1.4,"aMS",%progbits,1
 4652              		.align	2
 4653              	.LC4:
 4654 0000 616C6C6F 		.ascii	"allocator->statistics.current_usage_blocks > 0\000"
 4654      6361746F 
 4654      722D3E73 
 4654      74617469 
 4654      73746963 
 4655              		.section	.rodata.incrementTransferID.str1.4,"aMS",%progbits,1
 4656              		.align	2
 4657              	.LC3:
 4658 0000 7472616E 		.ascii	"transfer_id != ((void *)0)\000"
 4658      73666572 
 4658      5F696420 
 4658      213D2028 
 4658      28766F69 
 4659              		.section	.rodata.prepareForNextTransfer.str1.4,"aMS",%progbits,1
 4660              		.align	2
 4661              	.LC5:
 4662 0000 73746174 		.ascii	"state->buffer_blocks == ((void *)0)\000"
 4662      652D3E62 
 4662      75666665 
 4662      725F626C 
 4662      6F636B73 
 4663              		.section	.rodata.pushTxQueue.str1.4,"aMS",%progbits,1
 4664              		.align	2
 4665              	.LC0:
 4666 0000 696E7320 		.ascii	"ins != ((void *)0)\000"
 4666      213D2028 
 4666      28766F69 
 4666      64202A29 
 4666      302900
 4667 0013 00       		.space	1
 4668              	.LC1:
 4669 0014 6C696263 		.ascii	"libcanard/canard.c\000"
 4669      616E6172 
 4669      642F6361 
 4669      6E617264 
 4669      2E6300
 4670 0027 00       		.space	1
 4671              	.LC2:
 4672 0028 6974656D 		.ascii	"item->frame.data_len > 0\000"
 4672      2D3E6672 
 4672      616D652E 
 4672      64617461 
 4672      5F6C656E 
 4673              		.section	.rodata.swapByteOrder.str1.4,"aMS",%progbits,1
 4674              		.align	2
 4675              	.LC16:
 4676 0000 64617461 		.ascii	"data != ((void *)0)\000"
 4676      20213D20 
 4676      2828766F 
 4676      6964202A 
 4676      29302900 
 4677              		.text
 4678              	.Letext0:
 4679              		.file 2 "/usr/bin/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_default_types.h
ARM GAS  /tmp/cc2kQaha.s 			page 123


 4680              		.file 3 "/usr/bin/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 4681              		.file 4 "/usr/bin/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/stddef.h"
 4682              		.file 5 "libcanard/canard.h"
 4683              		.file 6 "/usr/bin/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 4684              		.file 7 "/usr/bin/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 4685              		.file 8 "/usr/bin/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 4686              		.file 9 "<built-in>"
 4687              		.file 10 "/usr/bin/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/assert.h"
ARM GAS  /tmp/cc2kQaha.s 			page 124


DEFINED SYMBOLS
                            *ABS*:0000000000000000 canard.c
     /tmp/cc2kQaha.s:16     .text.computeTransferIDForwardDistance:0000000000000000 $t
     /tmp/cc2kQaha.s:22     .text.computeTransferIDForwardDistance:0000000000000000 computeTransferIDForwardDistance
     /tmp/cc2kQaha.s:53     .text.isPriorityHigher:0000000000000000 $t
     /tmp/cc2kQaha.s:59     .text.isPriorityHigher:0000000000000000 isPriorityHigher
     /tmp/cc2kQaha.s:160    .text.extractTransferType:0000000000000000 $t
     /tmp/cc2kQaha.s:166    .text.extractTransferType:0000000000000000 extractTransferType
     /tmp/cc2kQaha.s:201    .text.extractDataType:0000000000000000 $t
     /tmp/cc2kQaha.s:207    .text.extractDataType:0000000000000000 extractDataType
     /tmp/cc2kQaha.s:248    .text.findRxState:0000000000000000 $t
     /tmp/cc2kQaha.s:254    .text.findRxState:0000000000000000 findRxState
     /tmp/cc2kQaha.s:280    .text.isBigEndian:0000000000000000 $t
     /tmp/cc2kQaha.s:286    .text.isBigEndian:0000000000000000 isBigEndian
     /tmp/cc2kQaha.s:300    .text.crcAddByte:0000000000000000 $t
     /tmp/cc2kQaha.s:306    .text.crcAddByte:0000000000000000 crcAddByte
     /tmp/cc2kQaha.s:357    .text.crcAddSignature:0000000000000000 $t
     /tmp/cc2kQaha.s:363    .text.crcAddSignature:0000000000000000 crcAddSignature
     /tmp/cc2kQaha.s:413    .text.crcAdd:0000000000000000 $t
     /tmp/cc2kQaha.s:419    .text.crcAdd:0000000000000000 crcAdd
     /tmp/cc2kQaha.s:460    .text.initPoolAllocator:0000000000000000 $t
     /tmp/cc2kQaha.s:466    .text.initPoolAllocator:0000000000000000 initPoolAllocator
     /tmp/cc2kQaha.s:524    .text.allocateBlock:0000000000000000 $t
     /tmp/cc2kQaha.s:530    .text.allocateBlock:0000000000000000 allocateBlock
     /tmp/cc2kQaha.s:570    .text.createBufferBlock:0000000000000000 $t
     /tmp/cc2kQaha.s:576    .text.createBufferBlock:0000000000000000 createBufferBlock
     /tmp/cc2kQaha.s:606    .text.bufferBlockPushBytes:0000000000000000 $t
     /tmp/cc2kQaha.s:612    .text.bufferBlockPushBytes:0000000000000000 bufferBlockPushBytes
     /tmp/cc2kQaha.s:868    .text.pushTxQueue:0000000000000000 $t
     /tmp/cc2kQaha.s:874    .text.pushTxQueue:0000000000000000 pushTxQueue
     /tmp/cc2kQaha.s:978    .text.pushTxQueue:0000000000000068 $d
     /tmp/cc2kQaha.s:986    .text.incrementTransferID:0000000000000000 $t
     /tmp/cc2kQaha.s:992    .text.incrementTransferID:0000000000000000 incrementTransferID
     /tmp/cc2kQaha.s:1032   .text.incrementTransferID:0000000000000024 $d
     /tmp/cc2kQaha.s:1039   .text.freeBlock:0000000000000000 $t
     /tmp/cc2kQaha.s:1045   .text.freeBlock:0000000000000000 freeBlock
     /tmp/cc2kQaha.s:1084   .text.freeBlock:0000000000000020 $d
     /tmp/cc2kQaha.s:1091   .text.releaseStatePayload:0000000000000000 $t
     /tmp/cc2kQaha.s:1097   .text.releaseStatePayload:0000000000000000 releaseStatePayload
     /tmp/cc2kQaha.s:1146   .text.prepareForNextTransfer:0000000000000000 $t
     /tmp/cc2kQaha.s:1152   .text.prepareForNextTransfer:0000000000000000 prepareForNextTransfer
     /tmp/cc2kQaha.s:1195   .text.prepareForNextTransfer:0000000000000038 $d
     /tmp/cc2kQaha.s:1202   .text.copyBitArray:0000000000000000 $t
     /tmp/cc2kQaha.s:1208   .text.copyBitArray:0000000000000000 copyBitArray
     /tmp/cc2kQaha.s:1325   .text.copyBitArray:0000000000000088 $d
     /tmp/cc2kQaha.s:1332   .text.descatterTransferPayload:0000000000000000 $t
     /tmp/cc2kQaha.s:1338   .text.descatterTransferPayload:0000000000000000 descatterTransferPayload
     /tmp/cc2kQaha.s:1739   .text.descatterTransferPayload:00000000000001fc $d
     /tmp/cc2kQaha.s:1754   .text.swapByteOrder:0000000000000000 $t
     /tmp/cc2kQaha.s:1760   .text.swapByteOrder:0000000000000000 swapByteOrder
     /tmp/cc2kQaha.s:1820   .text.swapByteOrder:000000000000002c $d
     /tmp/cc2kQaha.s:1827   .text.createTxItem:0000000000000000 $t
     /tmp/cc2kQaha.s:1833   .text.createTxItem:0000000000000000 createTxItem
     /tmp/cc2kQaha.s:1867   .text.enqueueTxFrames:0000000000000000 $t
     /tmp/cc2kQaha.s:1873   .text.enqueueTxFrames:0000000000000000 enqueueTxFrames
     /tmp/cc2kQaha.s:2137   .text.enqueueTxFrames:0000000000000130 $d
     /tmp/cc2kQaha.s:2147   .text.createRxState:0000000000000000 $t
ARM GAS  /tmp/cc2kQaha.s 			page 125


     /tmp/cc2kQaha.s:2153   .text.createRxState:0000000000000000 createRxState
     /tmp/cc2kQaha.s:2214   .text.prependRxState:0000000000000000 $t
     /tmp/cc2kQaha.s:2220   .text.prependRxState:0000000000000000 prependRxState
     /tmp/cc2kQaha.s:2255   .text.traverseRxStates:0000000000000000 $t
     /tmp/cc2kQaha.s:2261   .text.traverseRxStates:0000000000000000 traverseRxStates
     /tmp/cc2kQaha.s:2321   .text.canardInit:0000000000000000 $t
     /tmp/cc2kQaha.s:2328   .text.canardInit:0000000000000000 canardInit
     /tmp/cc2kQaha.s:2399   .text.canardInit:0000000000000044 $d
     /tmp/cc2kQaha.s:2406   .text.canardGetUserReference:0000000000000000 $t
     /tmp/cc2kQaha.s:2413   .text.canardGetUserReference:0000000000000000 canardGetUserReference
     /tmp/cc2kQaha.s:2444   .text.canardGetUserReference:0000000000000014 $d
     /tmp/cc2kQaha.s:2451   .text.canardSetLocalNodeID:0000000000000000 $t
     /tmp/cc2kQaha.s:2458   .text.canardSetLocalNodeID:0000000000000000 canardSetLocalNodeID
     /tmp/cc2kQaha.s:2507   .text.canardSetLocalNodeID:000000000000002c $d
     /tmp/cc2kQaha.s:2515   .text.canardGetLocalNodeID:0000000000000000 $t
     /tmp/cc2kQaha.s:2522   .text.canardGetLocalNodeID:0000000000000000 canardGetLocalNodeID
     /tmp/cc2kQaha.s:2538   .text.canardBroadcast:0000000000000000 $t
     /tmp/cc2kQaha.s:2545   .text.canardBroadcast:0000000000000000 canardBroadcast
     /tmp/cc2kQaha.s:2697   .text.canardRequestOrRespond:0000000000000000 $t
     /tmp/cc2kQaha.s:2704   .text.canardRequestOrRespond:0000000000000000 canardRequestOrRespond
     /tmp/cc2kQaha.s:2832   .text.canardPeekTxQueue:0000000000000000 $t
     /tmp/cc2kQaha.s:2839   .text.canardPeekTxQueue:0000000000000000 canardPeekTxQueue
     /tmp/cc2kQaha.s:2863   .text.canardPopTxQueue:0000000000000000 $t
     /tmp/cc2kQaha.s:2870   .text.canardPopTxQueue:0000000000000000 canardPopTxQueue
     /tmp/cc2kQaha.s:2899   .text.canardCleanupStaleTransfers:0000000000000000 $t
     /tmp/cc2kQaha.s:2906   .text.canardCleanupStaleTransfers:0000000000000000 canardCleanupStaleTransfers
     /tmp/cc2kQaha.s:3000   .text.canardCleanupStaleTransfers:0000000000000074 $d
     /tmp/cc2kQaha.s:3005   .text.canardDecodeScalar:0000000000000000 $t
     /tmp/cc2kQaha.s:3012   .text.canardDecodeScalar:0000000000000000 canardDecodeScalar
     /tmp/cc2kQaha.s:3392   .text.canardDecodeScalar:000000000000026c $d
     /tmp/cc2kQaha.s:3401   .text.canardEncodeScalar:0000000000000000 $t
     /tmp/cc2kQaha.s:3408   .text.canardEncodeScalar:0000000000000000 canardEncodeScalar
     /tmp/cc2kQaha.s:3590   .text.canardEncodeScalar:00000000000000d0 $d
     /tmp/cc2kQaha.s:3599   .text.canardReleaseRxTransferPayload:0000000000000000 $t
     /tmp/cc2kQaha.s:3606   .text.canardReleaseRxTransferPayload:0000000000000000 canardReleaseRxTransferPayload
     /tmp/cc2kQaha.s:3658   .text.canardHandleRxFrame:0000000000000000 $t
     /tmp/cc2kQaha.s:3665   .text.canardHandleRxFrame:0000000000000000 canardHandleRxFrame
     /tmp/cc2kQaha.s:4321   .text.canardHandleRxFrame:0000000000000394 $d
     /tmp/cc2kQaha.s:4332   .text.canardGetPoolAllocatorStatistics:0000000000000000 $t
     /tmp/cc2kQaha.s:4339   .text.canardGetPoolAllocatorStatistics:0000000000000000 canardGetPoolAllocatorStatistics
     /tmp/cc2kQaha.s:4362   .text.canardConvertNativeFloatToFloat16:0000000000000000 $t
     /tmp/cc2kQaha.s:4369   .text.canardConvertNativeFloatToFloat16:0000000000000000 canardConvertNativeFloatToFloat16
     /tmp/cc2kQaha.s:4430   .text.canardConvertFloat16ToNativeFloat:0000000000000000 $t
     /tmp/cc2kQaha.s:4437   .text.canardConvertFloat16ToNativeFloat:0000000000000000 canardConvertFloat16ToNativeFloat
     /tmp/cc2kQaha.s:4482   .text.canardConvertFloat16ToNativeFloat:0000000000000030 $d
     /tmp/cc2kQaha.s:4487   .rodata.__func__.4795:0000000000000000 $d
     /tmp/cc2kQaha.s:4491   .rodata.__func__.4795:0000000000000000 __func__.4795
     /tmp/cc2kQaha.s:4494   .rodata.__func__.4800:0000000000000000 $d
     /tmp/cc2kQaha.s:4498   .rodata.__func__.4800:0000000000000000 __func__.4800
     /tmp/cc2kQaha.s:4501   .rodata.__func__.4805:0000000000000000 $d
     /tmp/cc2kQaha.s:4505   .rodata.__func__.4805:0000000000000000 __func__.4805
     /tmp/cc2kQaha.s:4508   .rodata.__func__.4858:0000000000000000 $d
     /tmp/cc2kQaha.s:4512   .rodata.__func__.4858:0000000000000000 __func__.4858
     /tmp/cc2kQaha.s:4515   .rodata.__func__.4913:0000000000000000 $d
     /tmp/cc2kQaha.s:4519   .rodata.__func__.4913:0000000000000000 __func__.4913
     /tmp/cc2kQaha.s:4522   .rodata.__func__.4921:0000000000000000 $d
     /tmp/cc2kQaha.s:4526   .rodata.__func__.4921:0000000000000000 __func__.4921
ARM GAS  /tmp/cc2kQaha.s 			page 126


     /tmp/cc2kQaha.s:4529   .rodata.__func__.4975:0000000000000000 $d
     /tmp/cc2kQaha.s:4533   .rodata.__func__.4975:0000000000000000 __func__.4975
     /tmp/cc2kQaha.s:4536   .rodata.__func__.4984:0000000000000000 $d
     /tmp/cc2kQaha.s:4540   .rodata.__func__.4984:0000000000000000 __func__.4984
     /tmp/cc2kQaha.s:4543   .rodata.__func__.5002:0000000000000000 $d
     /tmp/cc2kQaha.s:4547   .rodata.__func__.5002:0000000000000000 __func__.5002
     /tmp/cc2kQaha.s:4550   .rodata.__func__.5027:0000000000000000 $d
     /tmp/cc2kQaha.s:4554   .rodata.__func__.5027:0000000000000000 __func__.5027
     /tmp/cc2kQaha.s:4557   .rodata.__func__.5103:0000000000000000 $d
     /tmp/cc2kQaha.s:4561   .rodata.__func__.5103:0000000000000000 __func__.5103
     /tmp/cc2kQaha.s:4564   .rodata.__func__.5120:0000000000000000 $d
     /tmp/cc2kQaha.s:4568   .rodata.__func__.5120:0000000000000000 __func__.5120
     /tmp/cc2kQaha.s:4571   .rodata.__func__.5146:0000000000000000 $d
     /tmp/cc2kQaha.s:4575   .rodata.__func__.5146:0000000000000000 __func__.5146
     /tmp/cc2kQaha.s:4578   .rodata.__func__.5197:0000000000000000 $d
     /tmp/cc2kQaha.s:4582   .rodata.__func__.5197:0000000000000000 __func__.5197
     /tmp/cc2kQaha.s:4585   .rodata.canardDecodeScalar.str1.4:0000000000000000 $d
     /tmp/cc2kQaha.s:4593   .rodata.canardEncodeScalar.str1.4:0000000000000000 $d
     /tmp/cc2kQaha.s:4600   .rodata.canardHandleRxFrame.str1.4:0000000000000000 $d
     /tmp/cc2kQaha.s:4610   .rodata.canardInit.str1.4:0000000000000000 $d
     /tmp/cc2kQaha.s:4614   .rodata.canardSetLocalNodeID.str1.4:0000000000000000 $d
     /tmp/cc2kQaha.s:4618   .rodata.copyBitArray.str1.4:0000000000000000 $d
     /tmp/cc2kQaha.s:4622   .rodata.descatterTransferPayload.str1.4:0000000000000000 $d
     /tmp/cc2kQaha.s:4648   .rodata.enqueueTxFrames.str1.4:0000000000000000 $d
     /tmp/cc2kQaha.s:4652   .rodata.freeBlock.str1.4:0000000000000000 $d
     /tmp/cc2kQaha.s:4656   .rodata.incrementTransferID.str1.4:0000000000000000 $d
     /tmp/cc2kQaha.s:4660   .rodata.prepareForNextTransfer.str1.4:0000000000000000 $d
     /tmp/cc2kQaha.s:4664   .rodata.pushTxQueue.str1.4:0000000000000000 $d
     /tmp/cc2kQaha.s:4674   .rodata.swapByteOrder.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
__assert_func
memcpy
memset
__aeabi_fmul
__aeabi_fcmpge
